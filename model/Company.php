<?php

/**
 * marketplace_register
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Model;

use \ArrayAccess;
use Request\AlipayRequest;
use Model\ModelInterface;
use Model\ObjectSerializer;

/**
 * Company Class Doc Comment
 *
 * @category Class
 * @package  request
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Company  implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Company';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'legalName' => 'string',
        'companyType' => '\request\model\CompanyType',
        'registeredAddress' => '\request\model\Address',
        'operatingAddress' => '\request\model\Address',
        'incorporationDate' => 'string',
        'stockInfo' => '\request\model\StockInfo',
        'certificates' => '\request\model\Certificate',
        'attachments' => '\request\model\Attachment[]',
        'companyUnit' => '\request\model\CompanyUnitType',
        'contacts' => '\request\model\Contact[]',
        'vatNo' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'legalName' => null,
        'companyType' => null,
        'registeredAddress' => null,
        'operatingAddress' => null,
        'incorporationDate' => null,
        'stockInfo' => null,
        'certificates' => null,
        'attachments' => null,
        'companyUnit' => null,
        'contacts' => null,
        'vatNo' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'legalName' => false,
        'companyType' => false,
        'registeredAddress' => false,
        'operatingAddress' => false,
        'incorporationDate' => false,
        'stockInfo' => false,
        'certificates' => false,
        'attachments' => false,
        'companyUnit' => false,
        'contacts' => false,
        'vatNo' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'legalName' => 'legalName',
        'companyType' => 'companyType',
        'registeredAddress' => 'registeredAddress',
        'operatingAddress' => 'operatingAddress',
        'incorporationDate' => 'incorporationDate',
        'stockInfo' => 'stockInfo',
        'certificates' => 'certificates',
        'attachments' => 'attachments',
        'companyUnit' => 'companyUnit',
        'contacts' => 'contacts',
        'vatNo' => 'vatNo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'legalName' => 'setLegalName',
        'companyType' => 'setCompanyType',
        'registeredAddress' => 'setRegisteredAddress',
        'operatingAddress' => 'setOperatingAddress',
        'incorporationDate' => 'setIncorporationDate',
        'stockInfo' => 'setStockInfo',
        'certificates' => 'setCertificates',
        'attachments' => 'setAttachments',
        'companyUnit' => 'setCompanyUnit',
        'contacts' => 'setContacts',
        'vatNo' => 'setVatNo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'legalName' => 'getLegalName',
        'companyType' => 'getCompanyType',
        'registeredAddress' => 'getRegisteredAddress',
        'operatingAddress' => 'getOperatingAddress',
        'incorporationDate' => 'getIncorporationDate',
        'stockInfo' => 'getStockInfo',
        'certificates' => 'getCertificates',
        'attachments' => 'getAttachments',
        'companyUnit' => 'getCompanyUnit',
        'contacts' => 'getContacts',
        'vatNo' => 'getVatNo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('legalName', $data ?? [], null);
        $this->setIfExists('companyType', $data ?? [], null);
        $this->setIfExists('registeredAddress', $data ?? [], null);
        $this->setIfExists('operatingAddress', $data ?? [], null);
        $this->setIfExists('incorporationDate', $data ?? [], null);
        $this->setIfExists('stockInfo', $data ?? [], null);
        $this->setIfExists('certificates', $data ?? [], null);
        $this->setIfExists('attachments', $data ?? [], null);
        $this->setIfExists('companyUnit', $data ?? [], null);
        $this->setIfExists('contacts', $data ?? [], null);
        $this->setIfExists('vatNo', $data ?? [], null);

            }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['legalName'] === null) {
            $invalidProperties[] = "'legalName' can't be null";
        }
        if ($this->container['companyType'] === null) {
            $invalidProperties[] = "'companyType' can't be null";
        }
        if ($this->container['registeredAddress'] === null) {
            $invalidProperties[] = "'registeredAddress' can't be null";
        }
        if ($this->container['operatingAddress'] === null) {
            $invalidProperties[] = "'operatingAddress' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets legalName
     *
     * @return string
     */
    public function getLegalName()
    {
        return $this->container['legalName'];
    }

    /**
     * Sets legalName
     *
     * @param string $legalName The legal name of the company.    More information:  Maximum size: 256 elements
     *
     * @return self
     */
    public function setLegalName($legalName)
    {
        $this->container['legalName'] = $legalName;

        return $this;
    }

    /**
     * Gets companyType
     *
     * @return \request\model\CompanyType
     */
    public function getCompanyType()
    {
        return $this->container['companyType'];
    }

    /**
     * Sets companyType
     *
     * @param \request\model\CompanyType $companyType companyType
     *
     * @return self
     */
    public function setCompanyType($companyType)
    {
        $this->container['companyType'] = $companyType;

        return $this;
    }

    /**
     * Gets registeredAddress
     *
     * @return \request\model\Address
     */
    public function getRegisteredAddress()
    {
        return $this->container['registeredAddress'];
    }

    /**
     * Sets registeredAddress
     *
     * @param \request\model\Address $registeredAddress registeredAddress
     *
     * @return self
     */
    public function setRegisteredAddress($registeredAddress)
    {
        $this->container['registeredAddress'] = $registeredAddress;

        return $this;
    }

    /**
     * Gets operatingAddress
     *
     * @return \request\model\Address
     */
    public function getOperatingAddress()
    {
        return $this->container['operatingAddress'];
    }

    /**
     * Sets operatingAddress
     *
     * @param \request\model\Address $operatingAddress operatingAddress
     *
     * @return self
     */
    public function setOperatingAddress($operatingAddress)
    {
        $this->container['operatingAddress'] = $operatingAddress;

        return $this;
    }

    /**
     * Gets incorporationDate
     *
     * @return string|null
     */
    public function getIncorporationDate()
    {
        return $this->container['incorporationDate'];
    }

    /**
     * Sets incorporationDate
     *
     * @param string|null $incorporationDate The date when the company was officially registered and incorporated with the government. The value of this parameter is in the format of YYYY-MM-DD, such as 2023-06-25.    Specify this parameter when the value of merchantInfo.company.registeredAddress.region is AU, SG, HK, US, GB, MY, or the company's registered region belongs to the European Union.   More information:  Maximum length: 32 characters
     *
     * @return self
     */
    public function setIncorporationDate($incorporationDate)
    {
        $this->container['incorporationDate'] = $incorporationDate;

        return $this;
    }

    /**
     * Gets stockInfo
     *
     * @return \request\model\StockInfo|null
     */
    public function getStockInfo()
    {
        return $this->container['stockInfo'];
    }

    /**
     * Sets stockInfo
     *
     * @param \request\model\StockInfo|null $stockInfo stockInfo
     *
     * @return self
     */
    public function setStockInfo($stockInfo)
    {
        $this->container['stockInfo'] = $stockInfo;

        return $this;
    }

    /**
     * Gets certificates
     *
     * @return \request\model\Certificate|null
     */
    public function getCertificates()
    {
        return $this->container['certificates'];
    }

    /**
     * Sets certificates
     *
     * @param \request\model\Certificate|null $certificates certificates
     *
     * @return self
     */
    public function setCertificates($certificates)
    {
        $this->container['certificates'] = $certificates;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \request\model\Attachment[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \request\model\Attachment[]|null $attachments The list of attachment information. The information is used to verify the company's legal status and ensure the company complies with regulatory requirements.  Specify this parameter when the value of merchantInfo.company.registeredAddress.region is BR, AU, SG, HK, GB, MY, or belongs to the European Union.    More information:  Maximum size: 10 elements
     *
     * @return self
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets companyUnit
     *
     * @return \request\model\CompanyUnitType|null
     */
    public function getCompanyUnit()
    {
        return $this->container['companyUnit'];
    }

    /**
     * Sets companyUnit
     *
     * @param \request\model\CompanyUnitType|null $companyUnit companyUnit
     *
     * @return self
     */
    public function setCompanyUnit($companyUnit)
    {
        $this->container['companyUnit'] = $companyUnit;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \request\model\Contact[]|null
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \request\model\Contact[]|null $contacts A list of contact information.  Specify this parameter when the value of merchantInfo.company.registeredAddress.region is JP.
     *
     * @return self
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets vatNo
     *
     * @return string|null
     */
    public function getVatNo()
    {
        return $this->container['vatNo'];
    }

    /**
     * Sets vatNo
     *
     * @param string|null $vatNo The Value Added Tax (VAT) number of the company.  Specify this parameter when the value of merchantInfo.company.registeredAddress.region is GB or the company's registered region belongs to the European Union.    More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setVatNo($vatNo)
    {
        $this->container['vatNo'] = $vatNo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    public function toArray(): array
    {
        $array = [];
        foreach (self::$openAPITypes as $propertyName => $propertyType) {
            $propertyValue = $this[$propertyName];
            if ($propertyValue !== null) {
                // Check if the property value is an object and has a toArray() method
                if (is_object($propertyValue) && method_exists($propertyValue, 'toArray')) {
                    $array[$propertyName] = $propertyValue->toArray();
                // Check if it's type datetime
                } elseif ($propertyValue instanceof \DateTime) {
                    $array[$propertyName] = $propertyValue->format(DATE_ATOM);
                // If it's an array type we should check whether it contains objects and if so call toArray method
                } elseif (is_array($propertyValue)) {
                    $array[$propertyName] = array_map(function ($item) {
                        return $item instanceof ModelInterface ? $item->toArray() : $item;
                    }, $propertyValue);
                } else {
                    // Otherwise, directly assign the property value to the array
                    $array[$propertyName] = $propertyValue;
                }
            }
        }
        return $array;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
