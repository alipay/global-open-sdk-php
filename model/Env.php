<?php

/**
 * vaults_vaultPaymentMethod
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Model;

use \ArrayAccess;
use Request\AlipayRequest;
use Model\ModelInterface;
use Model\ObjectSerializer;

/**
 * Env Class Doc Comment
 *
 * @category Class
 * @package  request
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Env  implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Env';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'terminalType' => '\request\model\TerminalType',
        'osType' => '\request\model\OsType',
        'userAgent' => 'string',
        'deviceTokenId' => 'string',
        'clientIp' => 'string',
        'cookieId' => 'string',
        'extendInfo' => 'string',
        'storeTerminalId' => 'string',
        'storeTerminalRequestTime' => 'string',
        'browserInfo' => '\request\model\BrowserInfo',
        'colorDepth' => 'string',
        'screenHeight' => 'string',
        'screenWidth' => 'string',
        'timeZoneOffset' => 'int',
        'deviceBrand' => 'string',
        'deviceModel' => 'string',
        'deviceLanguage' => 'string',
        'deviceId' => 'string',
        'envType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'terminalType' => null,
        'osType' => null,
        'userAgent' => null,
        'deviceTokenId' => null,
        'clientIp' => null,
        'cookieId' => null,
        'extendInfo' => null,
        'storeTerminalId' => null,
        'storeTerminalRequestTime' => null,
        'browserInfo' => null,
        'colorDepth' => null,
        'screenHeight' => null,
        'screenWidth' => null,
        'timeZoneOffset' => null,
        'deviceBrand' => null,
        'deviceModel' => null,
        'deviceLanguage' => null,
        'deviceId' => null,
        'envType' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'terminalType' => false,
        'osType' => false,
        'userAgent' => false,
        'deviceTokenId' => false,
        'clientIp' => false,
        'cookieId' => false,
        'extendInfo' => false,
        'storeTerminalId' => false,
        'storeTerminalRequestTime' => false,
        'browserInfo' => false,
        'colorDepth' => false,
        'screenHeight' => false,
        'screenWidth' => false,
        'timeZoneOffset' => true,
        'deviceBrand' => false,
        'deviceModel' => false,
        'deviceLanguage' => false,
        'deviceId' => false,
        'envType' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'terminalType' => 'terminalType',
        'osType' => 'osType',
        'userAgent' => 'userAgent',
        'deviceTokenId' => 'deviceTokenId',
        'clientIp' => 'clientIp',
        'cookieId' => 'cookieId',
        'extendInfo' => 'extendInfo',
        'storeTerminalId' => 'storeTerminalId',
        'storeTerminalRequestTime' => 'storeTerminalRequestTime',
        'browserInfo' => 'browserInfo',
        'colorDepth' => 'colorDepth',
        'screenHeight' => 'screenHeight',
        'screenWidth' => 'screenWidth',
        'timeZoneOffset' => 'timeZoneOffset',
        'deviceBrand' => 'deviceBrand',
        'deviceModel' => 'deviceModel',
        'deviceLanguage' => 'deviceLanguage',
        'deviceId' => 'deviceId',
        'envType' => 'envType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'terminalType' => 'setTerminalType',
        'osType' => 'setOsType',
        'userAgent' => 'setUserAgent',
        'deviceTokenId' => 'setDeviceTokenId',
        'clientIp' => 'setClientIp',
        'cookieId' => 'setCookieId',
        'extendInfo' => 'setExtendInfo',
        'storeTerminalId' => 'setStoreTerminalId',
        'storeTerminalRequestTime' => 'setStoreTerminalRequestTime',
        'browserInfo' => 'setBrowserInfo',
        'colorDepth' => 'setColorDepth',
        'screenHeight' => 'setScreenHeight',
        'screenWidth' => 'setScreenWidth',
        'timeZoneOffset' => 'setTimeZoneOffset',
        'deviceBrand' => 'setDeviceBrand',
        'deviceModel' => 'setDeviceModel',
        'deviceLanguage' => 'setDeviceLanguage',
        'deviceId' => 'setDeviceId',
        'envType' => 'setEnvType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'terminalType' => 'getTerminalType',
        'osType' => 'getOsType',
        'userAgent' => 'getUserAgent',
        'deviceTokenId' => 'getDeviceTokenId',
        'clientIp' => 'getClientIp',
        'cookieId' => 'getCookieId',
        'extendInfo' => 'getExtendInfo',
        'storeTerminalId' => 'getStoreTerminalId',
        'storeTerminalRequestTime' => 'getStoreTerminalRequestTime',
        'browserInfo' => 'getBrowserInfo',
        'colorDepth' => 'getColorDepth',
        'screenHeight' => 'getScreenHeight',
        'screenWidth' => 'getScreenWidth',
        'timeZoneOffset' => 'getTimeZoneOffset',
        'deviceBrand' => 'getDeviceBrand',
        'deviceModel' => 'getDeviceModel',
        'deviceLanguage' => 'getDeviceLanguage',
        'deviceId' => 'getDeviceId',
        'envType' => 'getEnvType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('terminalType', $data ?? [], null);
        $this->setIfExists('osType', $data ?? [], null);
        $this->setIfExists('userAgent', $data ?? [], null);
        $this->setIfExists('deviceTokenId', $data ?? [], null);
        $this->setIfExists('clientIp', $data ?? [], null);
        $this->setIfExists('cookieId', $data ?? [], null);
        $this->setIfExists('extendInfo', $data ?? [], null);
        $this->setIfExists('storeTerminalId', $data ?? [], null);
        $this->setIfExists('storeTerminalRequestTime', $data ?? [], null);
        $this->setIfExists('browserInfo', $data ?? [], null);
        $this->setIfExists('colorDepth', $data ?? [], null);
        $this->setIfExists('screenHeight', $data ?? [], null);
        $this->setIfExists('screenWidth', $data ?? [], null);
        $this->setIfExists('timeZoneOffset', $data ?? [], null);
        $this->setIfExists('deviceBrand', $data ?? [], null);
        $this->setIfExists('deviceModel', $data ?? [], null);
        $this->setIfExists('deviceLanguage', $data ?? [], null);
        $this->setIfExists('deviceId', $data ?? [], null);
        $this->setIfExists('envType', $data ?? [], null);

            }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['terminalType'] === null) {
            $invalidProperties[] = "'terminalType' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets terminalType
     *
     * @return \request\model\TerminalType
     */
    public function getTerminalType()
    {
        return $this->container['terminalType'];
    }

    /**
     * Sets terminalType
     *
     * @param \request\model\TerminalType $terminalType terminalType
     *
     * @return self
     */
    public function setTerminalType($terminalType)
    {
        $this->container['terminalType'] = $terminalType;

        return $this;
    }

    /**
     * Gets osType
     *
     * @return \request\model\OsType|null
     */
    public function getOsType()
    {
        return $this->container['osType'];
    }

    /**
     * Sets osType
     *
     * @param \request\model\OsType|null $osType osType
     *
     * @return self
     */
    public function setOsType($osType)
    {
        $this->container['osType'] = $osType;

        return $this;
    }

    /**
     * Gets userAgent
     *
     * @return string|null
     */
    public function getUserAgent()
    {
        return $this->container['userAgent'];
    }

    /**
     * Sets userAgent
     *
     * @param string|null $userAgent userAgent
     *
     * @return self
     */
    public function setUserAgent($userAgent)
    {
        $this->container['userAgent'] = $userAgent;

        return $this;
    }

    /**
     * Gets deviceTokenId
     *
     * @return string|null
     */
    public function getDeviceTokenId()
    {
        return $this->container['deviceTokenId'];
    }

    /**
     * Sets deviceTokenId
     *
     * @param string|null $deviceTokenId The token identifier of the device.  Note: Specify this parameter if you integrate with the Antom Device Fingerprint client, which is an SDK or JavaScript library that is used to collect device-related information, such as osType, deviceLanguage, deviceId, websiteLanguage, and userAgent. The device-related information helps to increase the accuracy of anti-money laundering and fraud detection, and increase payment success rates. For more information about the Antom Device Fingerprint client, contact Antom Technical Support.    More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setDeviceTokenId($deviceTokenId)
    {
        $this->container['deviceTokenId'] = $deviceTokenId;

        return $this;
    }

    /**
     * Gets clientIp
     *
     * @return string|null
     */
    public function getClientIp()
    {
        return $this->container['clientIp'];
    }

    /**
     * Sets clientIp
     *
     * @param string|null $clientIp Client IP address of the device.
     *
     * @return self
     */
    public function setClientIp($clientIp)
    {
        $this->container['clientIp'] = $clientIp;

        return $this;
    }

    /**
     * Gets cookieId
     *
     * @return string|null
     */
    public function getCookieId()
    {
        return $this->container['cookieId'];
    }

    /**
     * Sets cookieId
     *
     * @param string|null $cookieId cookieId
     *
     * @return self
     */
    public function setCookieId($cookieId)
    {
        $this->container['cookieId'] = $cookieId;

        return $this;
    }

    /**
     * Gets extendInfo
     *
     * @return string|null
     */
    public function getExtendInfo()
    {
        return $this->container['extendInfo'];
    }

    /**
     * Sets extendInfo
     *
     * @param string|null $extendInfo Extended information.  Specify this field if you need to use the extended information.    More information:  Maximum length: 2048 characters
     *
     * @return self
     */
    public function setExtendInfo($extendInfo)
    {
        $this->container['extendInfo'] = $extendInfo;

        return $this;
    }

    /**
     * Gets storeTerminalId
     *
     * @return string|null
     */
    public function getStoreTerminalId()
    {
        return $this->container['storeTerminalId'];
    }

    /**
     * Sets storeTerminalId
     *
     * @param string|null $storeTerminalId storeTerminalId
     *
     * @return self
     */
    public function setStoreTerminalId($storeTerminalId)
    {
        $this->container['storeTerminalId'] = $storeTerminalId;

        return $this;
    }

    /**
     * Gets storeTerminalRequestTime
     *
     * @return string|null
     */
    public function getStoreTerminalRequestTime()
    {
        return $this->container['storeTerminalRequestTime'];
    }

    /**
     * Sets storeTerminalRequestTime
     *
     * @param string|null $storeTerminalRequestTime storeTerminalRequestTime
     *
     * @return self
     */
    public function setStoreTerminalRequestTime($storeTerminalRequestTime)
    {
        $this->container['storeTerminalRequestTime'] = $storeTerminalRequestTime;

        return $this;
    }

    /**
     * Gets browserInfo
     *
     * @return \request\model\BrowserInfo|null
     */
    public function getBrowserInfo()
    {
        return $this->container['browserInfo'];
    }

    /**
     * Sets browserInfo
     *
     * @param \request\model\BrowserInfo|null $browserInfo browserInfo
     *
     * @return self
     */
    public function setBrowserInfo($browserInfo)
    {
        $this->container['browserInfo'] = $browserInfo;

        return $this;
    }

    /**
     * Gets colorDepth
     *
     * @return string|null
     */
    public function getColorDepth()
    {
        return $this->container['colorDepth'];
    }

    /**
     * Sets colorDepth
     *
     * @param string|null $colorDepth The color depth of the user's browser in bits per pixel. The value is obtained by using the browser's screen.colorDepth property. Valid values are 1, 4, 8, 15, 16, 24, 30, 32, or 48. For example, 8 means 8-bit color depth.    More information:  Value range: 0 - unlimited
     *
     * @return self
     */
    public function setColorDepth($colorDepth)
    {
        $this->container['colorDepth'] = $colorDepth;

        return $this;
    }

    /**
     * Gets screenHeight
     *
     * @return string|null
     */
    public function getScreenHeight()
    {
        return $this->container['screenHeight'];
    }

    /**
     * Sets screenHeight
     *
     * @param string|null $screenHeight The screen height of the user's device in pixels.    Note: Specify this parameter if you require risk control. Providing this information helps to increase the accuracy of anti-money laundering and fraud detection, and increase payment success rates.    More information:  Value range: 1 - unlimited
     *
     * @return self
     */
    public function setScreenHeight($screenHeight)
    {
        $this->container['screenHeight'] = $screenHeight;

        return $this;
    }

    /**
     * Gets screenWidth
     *
     * @return string|null
     */
    public function getScreenWidth()
    {
        return $this->container['screenWidth'];
    }

    /**
     * Sets screenWidth
     *
     * @param string|null $screenWidth The screen width of the user's device in pixels.    Note: Specify this parameter if you require risk control. Providing this information helps to increase the accuracy of anti-money laundering and fraud detection, and increase payment success rates.    More information:  Value range: 1 - unlimited
     *
     * @return self
     */
    public function setScreenWidth($screenWidth)
    {
        $this->container['screenWidth'] = $screenWidth;

        return $this;
    }

    /**
     * Gets timeZoneOffset
     *
     * @return int|null
     */
    public function getTimeZoneOffset()
    {
        return $this->container['timeZoneOffset'];
    }

    /**
     * Sets timeZoneOffset
     *
     * @param int|null $timeZoneOffset The time difference between UTC time and the local time of the user's browser, in minutes. The value is obtained by using the getTimezoneOffset() property. For example, if the local time of the user's browser is UTC+2, the value of this parameter is -120.  Note: Specify this parameter if you require risk control. Providing this information helps to increase the accuracy of anti-money laundering and fraud detection, and increase payment success rates.  More information:  Value range: -720 - 720
     *
     * @return self
     */
    public function setTimeZoneOffset($timeZoneOffset)
    {
        $this->container['timeZoneOffset'] = $timeZoneOffset;

        return $this;
    }

    /**
     * Gets deviceBrand
     *
     * @return string|null
     */
    public function getDeviceBrand()
    {
        return $this->container['deviceBrand'];
    }

    /**
     * Sets deviceBrand
     *
     * @param string|null $deviceBrand The brand of the user's device.   Note: Specify this parameter if you require risk control. Providing this information helps to increase the accuracy of anti-money laundering and fraud detection, and increase payment success rates.    More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setDeviceBrand($deviceBrand)
    {
        $this->container['deviceBrand'] = $deviceBrand;

        return $this;
    }

    /**
     * Gets deviceModel
     *
     * @return string|null
     */
    public function getDeviceModel()
    {
        return $this->container['deviceModel'];
    }

    /**
     * Sets deviceModel
     *
     * @param string|null $deviceModel The model of the user's device.   Note: Specify this parameter if you require risk control. Providing this information helps to increase the accuracy of anti-money laundering and fraud detection, and increase payment success rates.    More information:  Maximum length: 128 characters
     *
     * @return self
     */
    public function setDeviceModel($deviceModel)
    {
        $this->container['deviceModel'] = $deviceModel;

        return $this;
    }

    /**
     * Gets deviceLanguage
     *
     * @return string|null
     */
    public function getDeviceLanguage()
    {
        return $this->container['deviceLanguage'];
    }

    /**
     * Sets deviceLanguage
     *
     * @param string|null $deviceLanguage Device language of the user.
     *
     * @return self
     */
    public function setDeviceLanguage($deviceLanguage)
    {
        $this->container['deviceLanguage'] = $deviceLanguage;

        return $this;
    }

    /**
     * Gets deviceId
     *
     * @return string|null
     */
    public function getDeviceId()
    {
        return $this->container['deviceId'];
    }

    /**
     * Sets deviceId
     *
     * @param string|null $deviceId Device ID of the user.
     *
     * @return self
     */
    public function setDeviceId($deviceId)
    {
        $this->container['deviceId'] = $deviceId;

        return $this;
    }

    /**
     * Gets envType
     *
     * @return string|null
     */
    public function getEnvType()
    {
        return $this->container['envType'];
    }

    /**
     * Sets envType
     *
     * @param string|null $envType 
     *
     * @return self
     */
    public function setEnvType($envType)
    {
        $this->container['envType'] = $envType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    public function toArray(): array
    {
        $array = [];
        foreach (self::$openAPITypes as $propertyName => $propertyType) {
            $propertyValue = $this[$propertyName];
            if ($propertyValue !== null) {
                // Check if the property value is an object and has a toArray() method
                if (is_object($propertyValue) && method_exists($propertyValue, 'toArray')) {
                    $array[$propertyName] = $propertyValue->toArray();
                // Check if it's type datetime
                } elseif ($propertyValue instanceof \DateTime) {
                    $array[$propertyName] = $propertyValue->format(DATE_ATOM);
                // If it's an array type we should check whether it contains objects and if so call toArray method
                } elseif (is_array($propertyValue)) {
                    $array[$propertyName] = array_map(function ($item) {
                        return $item instanceof ModelInterface ? $item->toArray() : $item;
                    }, $propertyValue);
                } else {
                    // Otherwise, directly assign the property value to the array
                    $array[$propertyName] = $propertyValue;
                }
            }
        }
        return $array;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
