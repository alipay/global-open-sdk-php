<?php

/**
 * marketplace_update
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Model;

use \ArrayAccess;
use Request\AlipayRequest;
use Model\ModelInterface;
use Model\ObjectSerializer;

/**
 * SettlementBankAccount Class Doc Comment
 *
 * @category Class
 * @package  request
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SettlementBankAccount  implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SettlementBankAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bankAccountNo' => 'string',
        'accountHolderName' => 'string',
        'swiftCode' => 'string',
        'bankRegion' => 'string',
        'accountHolderType' => '\request\model\AccountHolderType',
        'routingNumber' => 'string',
        'branchCode' => 'string',
        'accountHolderTIN' => 'string',
        'accountType' => '\request\model\AccountType',
        'bankName' => 'string',
        'accountHolderAddress' => '\request\model\Address',
        'iban' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bankAccountNo' => null,
        'accountHolderName' => null,
        'swiftCode' => null,
        'bankRegion' => null,
        'accountHolderType' => null,
        'routingNumber' => null,
        'branchCode' => null,
        'accountHolderTIN' => null,
        'accountType' => null,
        'bankName' => null,
        'accountHolderAddress' => null,
        'iban' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'bankAccountNo' => false,
        'accountHolderName' => false,
        'swiftCode' => false,
        'bankRegion' => false,
        'accountHolderType' => false,
        'routingNumber' => false,
        'branchCode' => false,
        'accountHolderTIN' => false,
        'accountType' => false,
        'bankName' => false,
        'accountHolderAddress' => false,
        'iban' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bankAccountNo' => 'bankAccountNo',
        'accountHolderName' => 'accountHolderName',
        'swiftCode' => 'swiftCode',
        'bankRegion' => 'bankRegion',
        'accountHolderType' => 'accountHolderType',
        'routingNumber' => 'routingNumber',
        'branchCode' => 'branchCode',
        'accountHolderTIN' => 'accountHolderTIN',
        'accountType' => 'accountType',
        'bankName' => 'bankName',
        'accountHolderAddress' => 'accountHolderAddress',
        'iban' => 'iban'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bankAccountNo' => 'setBankAccountNo',
        'accountHolderName' => 'setAccountHolderName',
        'swiftCode' => 'setSwiftCode',
        'bankRegion' => 'setBankRegion',
        'accountHolderType' => 'setAccountHolderType',
        'routingNumber' => 'setRoutingNumber',
        'branchCode' => 'setBranchCode',
        'accountHolderTIN' => 'setAccountHolderTIN',
        'accountType' => 'setAccountType',
        'bankName' => 'setBankName',
        'accountHolderAddress' => 'setAccountHolderAddress',
        'iban' => 'setIban'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bankAccountNo' => 'getBankAccountNo',
        'accountHolderName' => 'getAccountHolderName',
        'swiftCode' => 'getSwiftCode',
        'bankRegion' => 'getBankRegion',
        'accountHolderType' => 'getAccountHolderType',
        'routingNumber' => 'getRoutingNumber',
        'branchCode' => 'getBranchCode',
        'accountHolderTIN' => 'getAccountHolderTIN',
        'accountType' => 'getAccountType',
        'bankName' => 'getBankName',
        'accountHolderAddress' => 'getAccountHolderAddress',
        'iban' => 'getIban'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('bankAccountNo', $data ?? [], null);
        $this->setIfExists('accountHolderName', $data ?? [], null);
        $this->setIfExists('swiftCode', $data ?? [], null);
        $this->setIfExists('bankRegion', $data ?? [], null);
        $this->setIfExists('accountHolderType', $data ?? [], null);
        $this->setIfExists('routingNumber', $data ?? [], null);
        $this->setIfExists('branchCode', $data ?? [], null);
        $this->setIfExists('accountHolderTIN', $data ?? [], null);
        $this->setIfExists('accountType', $data ?? [], null);
        $this->setIfExists('bankName', $data ?? [], null);
        $this->setIfExists('accountHolderAddress', $data ?? [], null);
        $this->setIfExists('iban', $data ?? [], null);

            }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bankAccountNo'] === null) {
            $invalidProperties[] = "'bankAccountNo' can't be null";
        }
        if ($this->container['accountHolderName'] === null) {
            $invalidProperties[] = "'accountHolderName' can't be null";
        }
        if ($this->container['bankRegion'] === null) {
            $invalidProperties[] = "'bankRegion' can't be null";
        }
        if ($this->container['accountHolderType'] === null) {
            $invalidProperties[] = "'accountHolderType' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bankAccountNo
     *
     * @return string
     */
    public function getBankAccountNo()
    {
        return $this->container['bankAccountNo'];
    }

    /**
     * Sets bankAccountNo
     *
     * @param string $bankAccountNo The international bank account number.  The standardized formats in different areas are:  Brazil: ^[0-9]{0,20}$ such as 123456789 More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setBankAccountNo($bankAccountNo)
    {
        $this->container['bankAccountNo'] = $bankAccountNo;

        return $this;
    }

    /**
     * Gets accountHolderName
     *
     * @return string
     */
    public function getAccountHolderName()
    {
        return $this->container['accountHolderName'];
    }

    /**
     * Sets accountHolderName
     *
     * @param string $accountHolderName The full name of the account holder.  The standardized formats in different areas are:  Brazil: ^[A-Za-z0-9/() .,\\-?:'+]{0,50}$ More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setAccountHolderName($accountHolderName)
    {
        $this->container['accountHolderName'] = $accountHolderName;

        return $this;
    }

    /**
     * Gets swiftCode
     *
     * @return string|null
     */
    public function getSwiftCode()
    {
        return $this->container['swiftCode'];
    }

    /**
     * Sets swiftCode
     *
     * @param string|null $swiftCode The eight-character or eleven-character BIC or SWIFT code of the bank.  Specify this parameter when the bank card issuing country is Brazil.    More information:  Maximum length: 11 characters
     *
     * @return self
     */
    public function setSwiftCode($swiftCode)
    {
        $this->container['swiftCode'] = $swiftCode;

        return $this;
    }

    /**
     * Gets bankRegion
     *
     * @return string
     */
    public function getBankRegion()
    {
        return $this->container['bankRegion'];
    }

    /**
     * Sets bankRegion
     *
     * @param string $bankRegion The region where the bank is located.   The value of this parameter is a 2-letter region or country code that follows the ISO 3166 Country Codes standard.    More information:  Maximum length: 2 characters
     *
     * @return self
     */
    public function setBankRegion($bankRegion)
    {
        $this->container['bankRegion'] = $bankRegion;

        return $this;
    }

    /**
     * Gets accountHolderType
     *
     * @return \request\model\AccountHolderType
     */
    public function getAccountHolderType()
    {
        return $this->container['accountHolderType'];
    }

    /**
     * Sets accountHolderType
     *
     * @param \request\model\AccountHolderType $accountHolderType accountHolderType
     *
     * @return self
     */
    public function setAccountHolderType($accountHolderType)
    {
        $this->container['accountHolderType'] = $accountHolderType;

        return $this;
    }

    /**
     * Gets routingNumber
     *
     * @return string|null
     */
    public function getRoutingNumber()
    {
        return $this->container['routingNumber'];
    }

    /**
     * Sets routingNumber
     *
     * @param string|null $routingNumber The routing number. See Bank routing number for valid values.  Specify this parameter when the issuing bank is in Brazil.    More information:  Maximum length: 9 characters
     *
     * @return self
     */
    public function setRoutingNumber($routingNumber)
    {
        $this->container['routingNumber'] = $routingNumber;

        return $this;
    }

    /**
     * Gets branchCode
     *
     * @return string|null
     */
    public function getBranchCode()
    {
        return $this->container['branchCode'];
    }

    /**
     * Sets branchCode
     *
     * @param string|null $branchCode The branch code of the bank. See Bank branch code for valid value s.  Specify this parameter when the issuing bank is in Brazil.    More information:  Maximum length: 32 characters
     *
     * @return self
     */
    public function setBranchCode($branchCode)
    {
        $this->container['branchCode'] = $branchCode;

        return $this;
    }

    /**
     * Gets accountHolderTIN
     *
     * @return string|null
     */
    public function getAccountHolderTIN()
    {
        return $this->container['accountHolderTIN'];
    }

    /**
     * Sets accountHolderTIN
     *
     * @param string|null $accountHolderTIN The tax identification number (TIN) of the account holder.  For the account holder in Brazil:  If the account holder is an individual, the value of this parameter is an eleven-character tax ID known as CPF.  If the account holder is a legal entity, the value of this parameter is a fourteen-character tax ID known as CNPJ.  Specify this parameter when the issuing bank is in Brazil.    More information:  Maximum length: 32 characters
     *
     * @return self
     */
    public function setAccountHolderTIN($accountHolderTIN)
    {
        $this->container['accountHolderTIN'] = $accountHolderTIN;

        return $this;
    }

    /**
     * Gets accountType
     *
     * @return \request\model\AccountType|null
     */
    public function getAccountType()
    {
        return $this->container['accountType'];
    }

    /**
     * Sets accountType
     *
     * @param \request\model\AccountType|null $accountType accountType
     *
     * @return self
     */
    public function setAccountType($accountType)
    {
        $this->container['accountType'] = $accountType;

        return $this;
    }

    /**
     * Gets bankName
     *
     * @return string|null
     */
    public function getBankName()
    {
        return $this->container['bankName'];
    }

    /**
     * Sets bankName
     *
     * @param string|null $bankName The name of the bank.  Specify this parameter when the card issuing country is the United States.    More information:  Maximum length: 256 characters
     *
     * @return self
     */
    public function setBankName($bankName)
    {
        $this->container['bankName'] = $bankName;

        return $this;
    }

    /**
     * Gets accountHolderAddress
     *
     * @return \request\model\Address|null
     */
    public function getAccountHolderAddress()
    {
        return $this->container['accountHolderAddress'];
    }

    /**
     * Sets accountHolderAddress
     *
     * @param \request\model\Address|null $accountHolderAddress accountHolderAddress
     *
     * @return self
     */
    public function setAccountHolderAddress($accountHolderAddress)
    {
        $this->container['accountHolderAddress'] = $accountHolderAddress;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string|null
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string|null $iban The International Bank Account Number (IBAN) used to identify a bank account.  Specify this parameter when the card issuing country is the United Kingdom or belongs to the European Union.    More information:  Maximum length: 34 characters
     *
     * @return self
     */
    public function setIban($iban)
    {
        $this->container['iban'] = $iban;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    public function toArray(): array
    {
        $array = [];
        foreach (self::$openAPITypes as $propertyName => $propertyType) {
            $propertyValue = $this[$propertyName];
            if ($propertyValue !== null) {
                // Check if the property value is an object and has a toArray() method
                if (is_object($propertyValue) && method_exists($propertyValue, 'toArray')) {
                    $array[$propertyName] = $propertyValue->toArray();
                // Check if it's type datetime
                } elseif ($propertyValue instanceof \DateTime) {
                    $array[$propertyName] = $propertyValue->format(DATE_ATOM);
                // If it's an array type we should check whether it contains objects and if so call toArray method
                } elseif (is_array($propertyValue)) {
                    $array[$propertyName] = array_map(function ($item) {
                        return $item instanceof ModelInterface ? $item->toArray() : $item;
                    }, $propertyValue);
                } else {
                    // Otherwise, directly assign the property value to the array
                    $array[$propertyName] = $propertyValue;
                }
            }
        }
        return $array;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
