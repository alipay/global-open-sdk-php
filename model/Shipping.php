<?php

/**
 * payments_createPaymentSession
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Model;

use \ArrayAccess;
use Request\AlipayRequest;
use Model\ModelInterface;
use Model\ObjectSerializer;

/**
 * Shipping Class Doc Comment
 *
 * @category Class
 * @package  request
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Shipping  implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Shipping';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'shippingName' => '\request\model\UserName',
        'shippingAddress' => '\request\model\Address',
        'shippingCarrier' => 'string',
        'shippingPhoneNo' => 'string',
        'shipToEmail' => 'string',
        'shippingFeeId' => 'string',
        'shippingFee' => '\request\model\Amount',
        'shippingDescription' => 'string',
        'deliveryEstimate' => '\request\model\DeliveryEstimate'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'shippingName' => null,
        'shippingAddress' => null,
        'shippingCarrier' => null,
        'shippingPhoneNo' => null,
        'shipToEmail' => null,
        'shippingFeeId' => null,
        'shippingFee' => null,
        'shippingDescription' => null,
        'deliveryEstimate' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'shippingName' => false,
        'shippingAddress' => false,
        'shippingCarrier' => false,
        'shippingPhoneNo' => false,
        'shipToEmail' => false,
        'shippingFeeId' => false,
        'shippingFee' => false,
        'shippingDescription' => false,
        'deliveryEstimate' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shippingName' => 'shippingName',
        'shippingAddress' => 'shippingAddress',
        'shippingCarrier' => 'shippingCarrier',
        'shippingPhoneNo' => 'shippingPhoneNo',
        'shipToEmail' => 'shipToEmail',
        'shippingFeeId' => 'shippingFeeId',
        'shippingFee' => 'shippingFee',
        'shippingDescription' => 'shippingDescription',
        'deliveryEstimate' => 'deliveryEstimate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shippingName' => 'setShippingName',
        'shippingAddress' => 'setShippingAddress',
        'shippingCarrier' => 'setShippingCarrier',
        'shippingPhoneNo' => 'setShippingPhoneNo',
        'shipToEmail' => 'setShipToEmail',
        'shippingFeeId' => 'setShippingFeeId',
        'shippingFee' => 'setShippingFee',
        'shippingDescription' => 'setShippingDescription',
        'deliveryEstimate' => 'setDeliveryEstimate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shippingName' => 'getShippingName',
        'shippingAddress' => 'getShippingAddress',
        'shippingCarrier' => 'getShippingCarrier',
        'shippingPhoneNo' => 'getShippingPhoneNo',
        'shipToEmail' => 'getShipToEmail',
        'shippingFeeId' => 'getShippingFeeId',
        'shippingFee' => 'getShippingFee',
        'shippingDescription' => 'getShippingDescription',
        'deliveryEstimate' => 'getDeliveryEstimate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('shippingName', $data ?? [], null);
        $this->setIfExists('shippingAddress', $data ?? [], null);
        $this->setIfExists('shippingCarrier', $data ?? [], null);
        $this->setIfExists('shippingPhoneNo', $data ?? [], null);
        $this->setIfExists('shipToEmail', $data ?? [], null);
        $this->setIfExists('shippingFeeId', $data ?? [], null);
        $this->setIfExists('shippingFee', $data ?? [], null);
        $this->setIfExists('shippingDescription', $data ?? [], null);
        $this->setIfExists('deliveryEstimate', $data ?? [], null);

            }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shippingName
     *
     * @return \request\model\UserName|null
     */
    public function getShippingName()
    {
        return $this->container['shippingName'];
    }

    /**
     * Sets shippingName
     *
     * @param \request\model\UserName|null $shippingName shippingName
     *
     * @return self
     */
    public function setShippingName($shippingName)
    {
        $this->container['shippingName'] = $shippingName;

        return $this;
    }

    /**
     * Gets shippingAddress
     *
     * @return \request\model\Address|null
     */
    public function getShippingAddress()
    {
        return $this->container['shippingAddress'];
    }

    /**
     * Sets shippingAddress
     *
     * @param \request\model\Address|null $shippingAddress shippingAddress
     *
     * @return self
     */
    public function setShippingAddress($shippingAddress)
    {
        $this->container['shippingAddress'] = $shippingAddress;

        return $this;
    }

    /**
     * Gets shippingCarrier
     *
     * @return string|null
     */
    public function getShippingCarrier()
    {
        return $this->container['shippingCarrier'];
    }

    /**
     * Sets shippingCarrier
     *
     * @param string|null $shippingCarrier The delivery service provider for shipping a physical product, such as FedEx, UPS, or USPS.   Specify this parameter if you require risk control. Providing this information helps to increase the accuracy of anti-money laundering and fraud detection, and increase payment success rates.  More information:  Maximum length: 128 characters
     *
     * @return self
     */
    public function setShippingCarrier($shippingCarrier)
    {
        $this->container['shippingCarrier'] = $shippingCarrier;

        return $this;
    }

    /**
     * Gets shippingPhoneNo
     *
     * @return string|null
     */
    public function getShippingPhoneNo()
    {
        return $this->container['shippingPhoneNo'];
    }

    /**
     * Sets shippingPhoneNo
     *
     * @param string|null $shippingPhoneNo The phone number of a recipient (including extension).  Specify this parameter when you require risk control. Providing this information helps to increase the accuracy of anti-money laundering and fraud detection, and increase payment success rates.  More information:  Maximum length: 16 characters
     *
     * @return self
     */
    public function setShippingPhoneNo($shippingPhoneNo)
    {
        $this->container['shippingPhoneNo'] = $shippingPhoneNo;

        return $this;
    }

    /**
     * Gets shipToEmail
     *
     * @return string|null
     */
    public function getShipToEmail()
    {
        return $this->container['shipToEmail'];
    }

    /**
     * Sets shipToEmail
     *
     * @param string|null $shipToEmail The email address where virtual goods are sent.  Specify this parameter when one of the following conditions is met:  if you require risk control. if you are a digital and entertainment merchant. Providing this information helps to increase fraud and identity theft detection.    More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setShipToEmail($shipToEmail)
    {
        $this->container['shipToEmail'] = $shipToEmail;

        return $this;
    }

    /**
     * Gets shippingFeeId
     *
     * @return string|null
     */
    public function getShippingFeeId()
    {
        return $this->container['shippingFeeId'];
    }

    /**
     * Sets shippingFeeId
     *
     * @param string|null $shippingFeeId The ID of the shipping fee used for identifying the shipping option.  More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setShippingFeeId($shippingFeeId)
    {
        $this->container['shippingFeeId'] = $shippingFeeId;

        return $this;
    }

    /**
     * Gets shippingFee
     *
     * @return \request\model\Amount|null
     */
    public function getShippingFee()
    {
        return $this->container['shippingFee'];
    }

    /**
     * Sets shippingFee
     *
     * @param \request\model\Amount|null $shippingFee shippingFee
     *
     * @return self
     */
    public function setShippingFee($shippingFee)
    {
        $this->container['shippingFee'] = $shippingFee;

        return $this;
    }

    /**
     * Gets shippingDescription
     *
     * @return string|null
     */
    public function getShippingDescription()
    {
        return $this->container['shippingDescription'];
    }

    /**
     * Sets shippingDescription
     *
     * @param string|null $shippingDescription Extended information about logistics-related services, including shipping time, logistics companies, etc.  More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setShippingDescription($shippingDescription)
    {
        $this->container['shippingDescription'] = $shippingDescription;

        return $this;
    }

    /**
     * Gets deliveryEstimate
     *
     * @return \request\model\DeliveryEstimate|null
     */
    public function getDeliveryEstimate()
    {
        return $this->container['deliveryEstimate'];
    }

    /**
     * Sets deliveryEstimate
     *
     * @param \request\model\DeliveryEstimate|null $deliveryEstimate deliveryEstimate
     *
     * @return self
     */
    public function setDeliveryEstimate($deliveryEstimate)
    {
        $this->container['deliveryEstimate'] = $deliveryEstimate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    public function toArray(): array
    {
        $array = [];
        foreach (self::$openAPITypes as $propertyName => $propertyType) {
            $propertyValue = $this[$propertyName];
            if ($propertyValue !== null) {
                // Check if the property value is an object and has a toArray() method
                if (is_object($propertyValue) && method_exists($propertyValue, 'toArray')) {
                    $array[$propertyName] = $propertyValue->toArray();
                // Check if it's type datetime
                } elseif ($propertyValue instanceof \DateTime) {
                    $array[$propertyName] = $propertyValue->format(DATE_ATOM);
                // If it's an array type we should check whether it contains objects and if so call toArray method
                } elseif (is_array($propertyValue)) {
                    $array[$propertyName] = array_map(function ($item) {
                        return $item instanceof ModelInterface ? $item->toArray() : $item;
                    }, $propertyValue);
                } else {
                    // Otherwise, directly assign the property value to the array
                    $array[$propertyName] = $propertyValue;
                }
            }
        }
        return $array;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
