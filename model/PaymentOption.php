<?php

/**
 * Payment API
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Model;

use \ArrayAccess;
use Request\AlipayRequest;
use Model\ModelInterface;
use Model\ObjectSerializer;

/**
 * PaymentOption Class Doc Comment
 *
 * @category Class
 * @package  request
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentOption  implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'paymentMethodType' => 'string',
        'paymentMethodCategory' => '\request\model\PaymentMethodCategoryType',
        'paymentMethodRegion' => 'string[]',
        'enabled' => 'bool',
        'preferred' => 'bool',
        'disableReason' => 'string',
        'amountLimitInfoMap' => 'array<string,\request\model\AmountLimit>',
        'supportedCurrencies' => 'string[]',
        'paymentOptionDetail' => '\request\model\PaymentOptionDetail',
        'extendInfo' => 'string',
        'logo' => '\request\model\Logo',
        'promoNames' => 'string[]',
        'installment' => '\request\model\Installment',
        'promotionInfos' => '\request\model\PromotionInfo[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'paymentMethodType' => null,
        'paymentMethodCategory' => null,
        'paymentMethodRegion' => null,
        'enabled' => null,
        'preferred' => null,
        'disableReason' => null,
        'amountLimitInfoMap' => null,
        'supportedCurrencies' => null,
        'paymentOptionDetail' => null,
        'extendInfo' => null,
        'logo' => null,
        'promoNames' => null,
        'installment' => null,
        'promotionInfos' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'paymentMethodType' => false,
        'paymentMethodCategory' => false,
        'paymentMethodRegion' => false,
        'enabled' => false,
        'preferred' => false,
        'disableReason' => false,
        'amountLimitInfoMap' => false,
        'supportedCurrencies' => false,
        'paymentOptionDetail' => false,
        'extendInfo' => false,
        'logo' => false,
        'promoNames' => false,
        'installment' => false,
        'promotionInfos' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'paymentMethodType' => 'paymentMethodType',
        'paymentMethodCategory' => 'paymentMethodCategory',
        'paymentMethodRegion' => 'paymentMethodRegion',
        'enabled' => 'enabled',
        'preferred' => 'preferred',
        'disableReason' => 'disableReason',
        'amountLimitInfoMap' => 'amountLimitInfoMap',
        'supportedCurrencies' => 'supportedCurrencies',
        'paymentOptionDetail' => 'paymentOptionDetail',
        'extendInfo' => 'extendInfo',
        'logo' => 'logo',
        'promoNames' => 'promoNames',
        'installment' => 'installment',
        'promotionInfos' => 'promotionInfos'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'paymentMethodType' => 'setPaymentMethodType',
        'paymentMethodCategory' => 'setPaymentMethodCategory',
        'paymentMethodRegion' => 'setPaymentMethodRegion',
        'enabled' => 'setEnabled',
        'preferred' => 'setPreferred',
        'disableReason' => 'setDisableReason',
        'amountLimitInfoMap' => 'setAmountLimitInfoMap',
        'supportedCurrencies' => 'setSupportedCurrencies',
        'paymentOptionDetail' => 'setPaymentOptionDetail',
        'extendInfo' => 'setExtendInfo',
        'logo' => 'setLogo',
        'promoNames' => 'setPromoNames',
        'installment' => 'setInstallment',
        'promotionInfos' => 'setPromotionInfos'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'paymentMethodType' => 'getPaymentMethodType',
        'paymentMethodCategory' => 'getPaymentMethodCategory',
        'paymentMethodRegion' => 'getPaymentMethodRegion',
        'enabled' => 'getEnabled',
        'preferred' => 'getPreferred',
        'disableReason' => 'getDisableReason',
        'amountLimitInfoMap' => 'getAmountLimitInfoMap',
        'supportedCurrencies' => 'getSupportedCurrencies',
        'paymentOptionDetail' => 'getPaymentOptionDetail',
        'extendInfo' => 'getExtendInfo',
        'logo' => 'getLogo',
        'promoNames' => 'getPromoNames',
        'installment' => 'getInstallment',
        'promotionInfos' => 'getPromotionInfos'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('paymentMethodType', $data ?? [], null);
        $this->setIfExists('paymentMethodCategory', $data ?? [], null);
        $this->setIfExists('paymentMethodRegion', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('preferred', $data ?? [], null);
        $this->setIfExists('disableReason', $data ?? [], null);
        $this->setIfExists('amountLimitInfoMap', $data ?? [], null);
        $this->setIfExists('supportedCurrencies', $data ?? [], null);
        $this->setIfExists('paymentOptionDetail', $data ?? [], null);
        $this->setIfExists('extendInfo', $data ?? [], null);
        $this->setIfExists('logo', $data ?? [], null);
        $this->setIfExists('promoNames', $data ?? [], null);
        $this->setIfExists('installment', $data ?? [], null);
        $this->setIfExists('promotionInfos', $data ?? [], null);

            }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['paymentMethodType'] === null) {
            $invalidProperties[] = "'paymentMethodType' can't be null";
        }
        if ($this->container['enabled'] === null) {
            $invalidProperties[] = "'enabled' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets paymentMethodType
     *
     * @return string
     */
    public function getPaymentMethodType()
    {
        return $this->container['paymentMethodType'];
    }

    /**
     * Sets paymentMethodType
     *
     * @param string $paymentMethodType The payment method type. See Payment methods to check the valid values.    More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setPaymentMethodType($paymentMethodType)
    {
        $this->container['paymentMethodType'] = $paymentMethodType;

        return $this;
    }

    /**
     * Gets paymentMethodCategory
     *
     * @return \request\model\PaymentMethodCategoryType|null
     */
    public function getPaymentMethodCategory()
    {
        return $this->container['paymentMethodCategory'];
    }

    /**
     * Sets paymentMethodCategory
     *
     * @param \request\model\PaymentMethodCategoryType|null $paymentMethodCategory paymentMethodCategory
     *
     * @return self
     */
    public function setPaymentMethodCategory($paymentMethodCategory)
    {
        $this->container['paymentMethodCategory'] = $paymentMethodCategory;

        return $this;
    }

    /**
     * Gets paymentMethodRegion
     *
     * @return string[]|null
     */
    public function getPaymentMethodRegion()
    {
        return $this->container['paymentMethodRegion'];
    }

    /**
     * Sets paymentMethodRegion
     *
     * @param string[]|null $paymentMethodRegion A list of region codes that represent the countries or regions of payment methods. The value of this parameter is a 2-letter ISO country code or GLOBAL.    More information:  Maximum length: 6 characters
     *
     * @return self
     */
    public function setPaymentMethodRegion($paymentMethodRegion)
    {
        $this->container['paymentMethodRegion'] = $paymentMethodRegion;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled Indicates whether the payment method is available.
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets preferred
     *
     * @return bool|null
     */
    public function getPreferred()
    {
        return $this->container['preferred'];
    }

    /**
     * Sets preferred
     *
     * @param bool|null $preferred preferred
     *
     * @return self
     */
    public function setPreferred($preferred)
    {
        $this->container['preferred'] = $preferred;

        return $this;
    }

    /**
     * Gets disableReason
     *
     * @return string|null
     */
    public function getDisableReason()
    {
        return $this->container['disableReason'];
    }

    /**
     * Sets disableReason
     *
     * @param string|null $disableReason The reason why the payment method is not available. Valid values are:  PAYMENT_ACCOUNT_NOT_AVAILABLE EXCEED_CHANNEL_LIMIT_RULE SERVICE_DEGRADE CHANNEL_NOT_SUPPORT_CURRENCY CHANNEL_DISABLE CHANNEL_NOT_IN_SERVICE_TIME QUERY_IPP_INFO_FAILED LIMIT_CENTER_ACCESS_FAIL  CURRENT_CHANNEL_NOT_EXIST
     *
     * @return self
     */
    public function setDisableReason($disableReason)
    {
        $this->container['disableReason'] = $disableReason;

        return $this;
    }

    /**
     * Gets amountLimitInfoMap
     *
     * @return array<string,\request\model\AmountLimit>|null
     */
    public function getAmountLimitInfoMap()
    {
        return $this->container['amountLimitInfoMap'];
    }

    /**
     * Sets amountLimitInfoMap
     *
     * @param array<string,\request\model\AmountLimit>|null $amountLimitInfoMap amountLimitInfoMap
     *
     * @return self
     */
    public function setAmountLimitInfoMap($amountLimitInfoMap)
    {
        $this->container['amountLimitInfoMap'] = $amountLimitInfoMap;

        return $this;
    }

    /**
     * Gets supportedCurrencies
     *
     * @return string[]|null
     */
    public function getSupportedCurrencies()
    {
        return $this->container['supportedCurrencies'];
    }

    /**
     * Sets supportedCurrencies
     *
     * @param string[]|null $supportedCurrencies supportedCurrencies
     *
     * @return self
     */
    public function setSupportedCurrencies($supportedCurrencies)
    {
        $this->container['supportedCurrencies'] = $supportedCurrencies;

        return $this;
    }

    /**
     * Gets paymentOptionDetail
     *
     * @return \request\model\PaymentOptionDetail|null
     */
    public function getPaymentOptionDetail()
    {
        return $this->container['paymentOptionDetail'];
    }

    /**
     * Sets paymentOptionDetail
     *
     * @param \request\model\PaymentOptionDetail|null $paymentOptionDetail paymentOptionDetail
     *
     * @return self
     */
    public function setPaymentOptionDetail($paymentOptionDetail)
    {
        $this->container['paymentOptionDetail'] = $paymentOptionDetail;

        return $this;
    }

    /**
     * Gets extendInfo
     *
     * @return string|null
     */
    public function getExtendInfo()
    {
        return $this->container['extendInfo'];
    }

    /**
     * Sets extendInfo
     *
     * @param string|null $extendInfo extendInfo
     *
     * @return self
     */
    public function setExtendInfo($extendInfo)
    {
        $this->container['extendInfo'] = $extendInfo;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return \request\model\Logo|null
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param \request\model\Logo|null $logo logo
     *
     * @return self
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets promoNames
     *
     * @return string[]|null
     */
    public function getPromoNames()
    {
        return $this->container['promoNames'];
    }

    /**
     * Sets promoNames
     *
     * @param string[]|null $promoNames The list of the promotion names. In JSON format. The keys are returned as a language and a country code, connected by an underscore, such as zh_CN, while the value is the promotion name, such as RM1 Voucher.    More information:  Maximum length: 512 characters
     *
     * @return self
     */
    public function setPromoNames($promoNames)
    {
        $this->container['promoNames'] = $promoNames;

        return $this;
    }

    /**
     * Gets installment
     *
     * @return \request\model\Installment|null
     */
    public function getInstallment()
    {
        return $this->container['installment'];
    }

    /**
     * Sets installment
     *
     * @param \request\model\Installment|null $installment installment
     *
     * @return self
     */
    public function setInstallment($installment)
    {
        $this->container['installment'] = $installment;

        return $this;
    }

    /**
     * Gets promotionInfos
     *
     * @return \request\model\PromotionInfo[]|null
     */
    public function getPromotionInfos()
    {
        return $this->container['promotionInfos'];
    }

    /**
     * Sets promotionInfos
     *
     * @param \request\model\PromotionInfo[]|null $promotionInfos Promotion information.  This parameter is returned when the payment method offers a promotion to the buyer.
     *
     * @return self
     */
    public function setPromotionInfos($promotionInfos)
    {
        $this->container['promotionInfos'] = $promotionInfos;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    public function toArray(): array
    {
        $array = [];
        foreach (self::$openAPITypes as $propertyName => $propertyType) {
            $propertyValue = $this[$propertyName];
            if ($propertyValue !== null) {
                // Check if the property value is an object and has a toArray() method
                if (is_object($propertyValue) && method_exists($propertyValue, 'toArray')) {
                    $array[$propertyName] = $propertyValue->toArray();
                // Check if it's type datetime
                } elseif ($propertyValue instanceof \DateTime) {
                    $array[$propertyName] = $propertyValue->format(DATE_ATOM);
                // If it's an array type we should check whether it contains objects and if so call toArray method
                } elseif (is_array($propertyValue)) {
                    $array[$propertyName] = array_map(function ($item) {
                        return $item instanceof ModelInterface ? $item->toArray() : $item;
                    }, $propertyValue);
                } else {
                    // Otherwise, directly assign the property value to the array
                    $array[$propertyName] = $propertyValue;
                }
            }
        }
        return $array;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
