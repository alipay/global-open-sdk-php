<?php

/**
 * payments_createPaymentSession
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Model;

use \ArrayAccess;
use Request\AlipayRequest;
use Model\ModelInterface;
use Model\ObjectSerializer;

/**
 * Goods Class Doc Comment
 *
 * @category Class
 * @package  request
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Goods  implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Goods';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'referenceGoodsId' => 'string',
        'goodsName' => 'string',
        'goodsCategory' => 'string',
        'goodsBrand' => 'string',
        'goodsUnitAmount' => '\request\model\Amount',
        'goodsQuantity' => 'string',
        'goodsSkuName' => 'string',
        'goodsUrl' => 'string',
        'deliveryMethodType' => 'string',
        'goodsImageUrl' => 'string',
        'priceId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'referenceGoodsId' => null,
        'goodsName' => null,
        'goodsCategory' => null,
        'goodsBrand' => null,
        'goodsUnitAmount' => null,
        'goodsQuantity' => null,
        'goodsSkuName' => null,
        'goodsUrl' => null,
        'deliveryMethodType' => null,
        'goodsImageUrl' => null,
        'priceId' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'referenceGoodsId' => false,
        'goodsName' => false,
        'goodsCategory' => false,
        'goodsBrand' => false,
        'goodsUnitAmount' => false,
        'goodsQuantity' => false,
        'goodsSkuName' => false,
        'goodsUrl' => false,
        'deliveryMethodType' => false,
        'goodsImageUrl' => false,
        'priceId' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'referenceGoodsId' => 'referenceGoodsId',
        'goodsName' => 'goodsName',
        'goodsCategory' => 'goodsCategory',
        'goodsBrand' => 'goodsBrand',
        'goodsUnitAmount' => 'goodsUnitAmount',
        'goodsQuantity' => 'goodsQuantity',
        'goodsSkuName' => 'goodsSkuName',
        'goodsUrl' => 'goodsUrl',
        'deliveryMethodType' => 'deliveryMethodType',
        'goodsImageUrl' => 'goodsImageUrl',
        'priceId' => 'priceId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'referenceGoodsId' => 'setReferenceGoodsId',
        'goodsName' => 'setGoodsName',
        'goodsCategory' => 'setGoodsCategory',
        'goodsBrand' => 'setGoodsBrand',
        'goodsUnitAmount' => 'setGoodsUnitAmount',
        'goodsQuantity' => 'setGoodsQuantity',
        'goodsSkuName' => 'setGoodsSkuName',
        'goodsUrl' => 'setGoodsUrl',
        'deliveryMethodType' => 'setDeliveryMethodType',
        'goodsImageUrl' => 'setGoodsImageUrl',
        'priceId' => 'setPriceId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'referenceGoodsId' => 'getReferenceGoodsId',
        'goodsName' => 'getGoodsName',
        'goodsCategory' => 'getGoodsCategory',
        'goodsBrand' => 'getGoodsBrand',
        'goodsUnitAmount' => 'getGoodsUnitAmount',
        'goodsQuantity' => 'getGoodsQuantity',
        'goodsSkuName' => 'getGoodsSkuName',
        'goodsUrl' => 'getGoodsUrl',
        'deliveryMethodType' => 'getDeliveryMethodType',
        'goodsImageUrl' => 'getGoodsImageUrl',
        'priceId' => 'getPriceId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('referenceGoodsId', $data ?? [], null);
        $this->setIfExists('goodsName', $data ?? [], null);
        $this->setIfExists('goodsCategory', $data ?? [], null);
        $this->setIfExists('goodsBrand', $data ?? [], null);
        $this->setIfExists('goodsUnitAmount', $data ?? [], null);
        $this->setIfExists('goodsQuantity', $data ?? [], null);
        $this->setIfExists('goodsSkuName', $data ?? [], null);
        $this->setIfExists('goodsUrl', $data ?? [], null);
        $this->setIfExists('deliveryMethodType', $data ?? [], null);
        $this->setIfExists('goodsImageUrl', $data ?? [], null);
        $this->setIfExists('priceId', $data ?? [], null);

            }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['referenceGoodsId'] === null) {
            $invalidProperties[] = "'referenceGoodsId' can't be null";
        }
        if ($this->container['goodsName'] === null) {
            $invalidProperties[] = "'goodsName' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets referenceGoodsId
     *
     * @return string
     */
    public function getReferenceGoodsId()
    {
        return $this->container['referenceGoodsId'];
    }

    /**
     * Sets referenceGoodsId
     *
     * @param string $referenceGoodsId The unique ID to identify the goods.  More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setReferenceGoodsId($referenceGoodsId)
    {
        $this->container['referenceGoodsId'] = $referenceGoodsId;

        return $this;
    }

    /**
     * Gets goodsName
     *
     * @return string
     */
    public function getGoodsName()
    {
        return $this->container['goodsName'];
    }

    /**
     * Sets goodsName
     *
     * @param string $goodsName Goods name.  More information:  Maximum length: 256 characters
     *
     * @return self
     */
    public function setGoodsName($goodsName)
    {
        $this->container['goodsName'] = $goodsName;

        return $this;
    }

    /**
     * Gets goodsCategory
     *
     * @return string|null
     */
    public function getGoodsCategory()
    {
        return $this->container['goodsCategory'];
    }

    /**
     * Sets goodsCategory
     *
     * @param string|null $goodsCategory The category of the goods. If the goods have multiple layers for categorization, use slashes between different categories and write the parent category before the subcategory, such as Digital Goods/Digital Vouchers/Food and Beverages.    Note: Specify this parameter if you require risk control. Providing this information helps to increase the accuracy of anti-money laundering and fraud detection, and increase payment success rates.  More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setGoodsCategory($goodsCategory)
    {
        $this->container['goodsCategory'] = $goodsCategory;

        return $this;
    }

    /**
     * Gets goodsBrand
     *
     * @return string|null
     */
    public function getGoodsBrand()
    {
        return $this->container['goodsBrand'];
    }

    /**
     * Sets goodsBrand
     *
     * @param string|null $goodsBrand goodsBrand
     *
     * @return self
     */
    public function setGoodsBrand($goodsBrand)
    {
        $this->container['goodsBrand'] = $goodsBrand;

        return $this;
    }

    /**
     * Gets goodsUnitAmount
     *
     * @return \request\model\Amount|null
     */
    public function getGoodsUnitAmount()
    {
        return $this->container['goodsUnitAmount'];
    }

    /**
     * Sets goodsUnitAmount
     *
     * @param \request\model\Amount|null $goodsUnitAmount goodsUnitAmount
     *
     * @return self
     */
    public function setGoodsUnitAmount($goodsUnitAmount)
    {
        $this->container['goodsUnitAmount'] = $goodsUnitAmount;

        return $this;
    }

    /**
     * Gets goodsQuantity
     *
     * @return string|null
     */
    public function getGoodsQuantity()
    {
        return $this->container['goodsQuantity'];
    }

    /**
     * Sets goodsQuantity
     *
     * @param string|null $goodsQuantity Quantity of goods.   Specify this parameter if you require risk control. Providing this information helps to increase the accuracy of anti-money laundering and fraud detection, and increase payment success rates.  More information:  Value range: 1 - unlimited
     *
     * @return self
     */
    public function setGoodsQuantity($goodsQuantity)
    {
        $this->container['goodsQuantity'] = $goodsQuantity;

        return $this;
    }

    /**
     * Gets goodsSkuName
     *
     * @return string|null
     */
    public function getGoodsSkuName()
    {
        return $this->container['goodsSkuName'];
    }

    /**
     * Sets goodsSkuName
     *
     * @param string|null $goodsSkuName goodsSkuName
     *
     * @return self
     */
    public function setGoodsSkuName($goodsSkuName)
    {
        $this->container['goodsSkuName'] = $goodsSkuName;

        return $this;
    }

    /**
     * Gets goodsUrl
     *
     * @return string|null
     */
    public function getGoodsUrl()
    {
        return $this->container['goodsUrl'];
    }

    /**
     * Sets goodsUrl
     *
     * @param string|null $goodsUrl The URL of the website where the user places an order.  Specify this parameter if you require risk control. Providing this information helps to identify black-market behavior.   More information:  Maximum length: 2048 characters
     *
     * @return self
     */
    public function setGoodsUrl($goodsUrl)
    {
        $this->container['goodsUrl'] = $goodsUrl;

        return $this;
    }

    /**
     * Gets deliveryMethodType
     *
     * @return string|null
     */
    public function getDeliveryMethodType()
    {
        return $this->container['deliveryMethodType'];
    }

    /**
     * Sets deliveryMethodType
     *
     * @param string|null $deliveryMethodType The delivery method of the goods. Valid values are:  PHYSICAL: indicates that the delivery method is physical delivery. DIGITAL: indicates that the delivery method is digital delivery. Specify this parameter if you require risk control. Providing this information helps to increase the accuracy of anti-money laundering and fraud detection, and increase payment success rates.    More information:  Maximum length: 32 characters
     *
     * @return self
     */
    public function setDeliveryMethodType($deliveryMethodType)
    {
        $this->container['deliveryMethodType'] = $deliveryMethodType;

        return $this;
    }

    /**
     * Gets goodsImageUrl
     *
     * @return string|null
     */
    public function getGoodsImageUrl()
    {
        return $this->container['goodsImageUrl'];
    }

    /**
     * Sets goodsImageUrl
     *
     * @param string|null $goodsImageUrl goodsImageUrl
     *
     * @return self
     */
    public function setGoodsImageUrl($goodsImageUrl)
    {
        $this->container['goodsImageUrl'] = $goodsImageUrl;

        return $this;
    }

    /**
     * Gets priceId
     *
     * @return string|null
     */
    public function getPriceId()
    {
        return $this->container['priceId'];
    }

    /**
     * Sets priceId
     *
     * @param string|null $priceId The ID of the Price object. One of ​priceId​ or ​referenceGoodsId​ is required.  More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setPriceId($priceId)
    {
        $this->container['priceId'] = $priceId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    public function toArray(): array
    {
        $array = [];
        foreach (self::$openAPITypes as $propertyName => $propertyType) {
            $propertyValue = $this[$propertyName];
            if ($propertyValue !== null) {
                // Check if the property value is an object and has a toArray() method
                if (is_object($propertyValue) && method_exists($propertyValue, 'toArray')) {
                    $array[$propertyName] = $propertyValue->toArray();
                // Check if it's type datetime
                } elseif ($propertyValue instanceof \DateTime) {
                    $array[$propertyName] = $propertyValue->format(DATE_ATOM);
                // If it's an array type we should check whether it contains objects and if so call toArray method
                } elseif (is_array($propertyValue)) {
                    $array[$propertyName] = array_map(function ($item) {
                        return $item instanceof ModelInterface ? $item->toArray() : $item;
                    }, $propertyValue);
                } else {
                    // Otherwise, directly assign the property value to the array
                    $array[$propertyName] = $propertyValue;
                }
            }
        }
        return $array;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
