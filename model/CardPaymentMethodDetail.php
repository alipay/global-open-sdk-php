<?php

/**
 * vaults_inquireVaulting
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Model;

use \ArrayAccess;
use Request\AlipayRequest;
use Model\ModelInterface;
use Model\ObjectSerializer;

/**
 * CardPaymentMethodDetail Class Doc Comment
 *
 * @category Class
 * @package  request
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CardPaymentMethodDetail  implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CardPaymentMethodDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cardToken' => 'string',
        'cardNo' => 'string',
        'brand' => '\request\model\CardBrand',
        'selectedCardBrand' => '\request\model\CardBrand',
        'cardIssuer' => 'string',
        'countryIssue' => 'string',
        'instUserName' => '\request\model\UserName',
        'expiryYear' => 'string',
        'expiryMonth' => 'string',
        'billingAddress' => '\request\model\Address',
        'mask' => 'string',
        'last4' => 'string',
        'paymentMethodDetailMetadata' => 'string',
        'maskedCardNo' => 'string',
        'fingerprint' => 'string',
        'authenticationFlow' => 'string',
        'funding' => 'string',
        'avsResultRaw' => 'string',
        'cvvResultRaw' => 'string',
        'bin' => 'string',
        'issuerName' => 'string',
        'issuingCountry' => 'string',
        'lastFour' => 'string',
        'cardholderName' => '\request\model\UserName',
        'cvv' => 'string',
        'dateOfBirth' => 'string',
        'businessNo' => 'string',
        'cardPasswordDigest' => 'string',
        'cpf' => 'string',
        'payerEmail' => 'string',
        'networkTransactionId' => 'string',
        'is3DSAuthentication' => 'bool',
        'request3DS' => 'string',
        'scaExemptionIndicator' => 'string',
        'enableAuthenticationUpgrade' => 'string',
        'mpiData' => '\request\model\MpiData'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cardToken' => null,
        'cardNo' => null,
        'brand' => null,
        'selectedCardBrand' => null,
        'cardIssuer' => null,
        'countryIssue' => null,
        'instUserName' => null,
        'expiryYear' => null,
        'expiryMonth' => null,
        'billingAddress' => null,
        'mask' => null,
        'last4' => null,
        'paymentMethodDetailMetadata' => null,
        'maskedCardNo' => null,
        'fingerprint' => null,
        'authenticationFlow' => null,
        'funding' => null,
        'avsResultRaw' => null,
        'cvvResultRaw' => null,
        'bin' => null,
        'issuerName' => null,
        'issuingCountry' => null,
        'lastFour' => null,
        'cardholderName' => null,
        'cvv' => null,
        'dateOfBirth' => null,
        'businessNo' => null,
        'cardPasswordDigest' => null,
        'cpf' => null,
        'payerEmail' => null,
        'networkTransactionId' => null,
        'is3DSAuthentication' => null,
        'request3DS' => null,
        'scaExemptionIndicator' => null,
        'enableAuthenticationUpgrade' => null,
        'mpiData' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'cardToken' => false,
        'cardNo' => false,
        'brand' => false,
        'selectedCardBrand' => false,
        'cardIssuer' => false,
        'countryIssue' => false,
        'instUserName' => false,
        'expiryYear' => false,
        'expiryMonth' => false,
        'billingAddress' => false,
        'mask' => false,
        'last4' => false,
        'paymentMethodDetailMetadata' => false,
        'maskedCardNo' => false,
        'fingerprint' => false,
        'authenticationFlow' => false,
        'funding' => false,
        'avsResultRaw' => false,
        'cvvResultRaw' => false,
        'bin' => false,
        'issuerName' => false,
        'issuingCountry' => false,
        'lastFour' => false,
        'cardholderName' => false,
        'cvv' => false,
        'dateOfBirth' => false,
        'businessNo' => false,
        'cardPasswordDigest' => false,
        'cpf' => false,
        'payerEmail' => false,
        'networkTransactionId' => false,
        'is3DSAuthentication' => false,
        'request3DS' => false,
        'scaExemptionIndicator' => false,
        'enableAuthenticationUpgrade' => false,
        'mpiData' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cardToken' => 'cardToken',
        'cardNo' => 'cardNo',
        'brand' => 'brand',
        'selectedCardBrand' => 'selectedCardBrand',
        'cardIssuer' => 'cardIssuer',
        'countryIssue' => 'countryIssue',
        'instUserName' => 'instUserName',
        'expiryYear' => 'expiryYear',
        'expiryMonth' => 'expiryMonth',
        'billingAddress' => 'billingAddress',
        'mask' => 'mask',
        'last4' => 'last4',
        'paymentMethodDetailMetadata' => 'paymentMethodDetailMetadata',
        'maskedCardNo' => 'maskedCardNo',
        'fingerprint' => 'fingerprint',
        'authenticationFlow' => 'authenticationFlow',
        'funding' => 'funding',
        'avsResultRaw' => 'avsResultRaw',
        'cvvResultRaw' => 'cvvResultRaw',
        'bin' => 'bin',
        'issuerName' => 'issuerName',
        'issuingCountry' => 'issuingCountry',
        'lastFour' => 'lastFour',
        'cardholderName' => 'cardholderName',
        'cvv' => 'cvv',
        'dateOfBirth' => 'dateOfBirth',
        'businessNo' => 'businessNo',
        'cardPasswordDigest' => 'cardPasswordDigest',
        'cpf' => 'cpf',
        'payerEmail' => 'payerEmail',
        'networkTransactionId' => 'networkTransactionId',
        'is3DSAuthentication' => 'is3DSAuthentication',
        'request3DS' => 'request3DS',
        'scaExemptionIndicator' => 'scaExemptionIndicator',
        'enableAuthenticationUpgrade' => 'enableAuthenticationUpgrade',
        'mpiData' => 'mpiData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cardToken' => 'setCardToken',
        'cardNo' => 'setCardNo',
        'brand' => 'setBrand',
        'selectedCardBrand' => 'setSelectedCardBrand',
        'cardIssuer' => 'setCardIssuer',
        'countryIssue' => 'setCountryIssue',
        'instUserName' => 'setInstUserName',
        'expiryYear' => 'setExpiryYear',
        'expiryMonth' => 'setExpiryMonth',
        'billingAddress' => 'setBillingAddress',
        'mask' => 'setMask',
        'last4' => 'setLast4',
        'paymentMethodDetailMetadata' => 'setPaymentMethodDetailMetadata',
        'maskedCardNo' => 'setMaskedCardNo',
        'fingerprint' => 'setFingerprint',
        'authenticationFlow' => 'setAuthenticationFlow',
        'funding' => 'setFunding',
        'avsResultRaw' => 'setAvsResultRaw',
        'cvvResultRaw' => 'setCvvResultRaw',
        'bin' => 'setBin',
        'issuerName' => 'setIssuerName',
        'issuingCountry' => 'setIssuingCountry',
        'lastFour' => 'setLastFour',
        'cardholderName' => 'setCardholderName',
        'cvv' => 'setCvv',
        'dateOfBirth' => 'setDateOfBirth',
        'businessNo' => 'setBusinessNo',
        'cardPasswordDigest' => 'setCardPasswordDigest',
        'cpf' => 'setCpf',
        'payerEmail' => 'setPayerEmail',
        'networkTransactionId' => 'setNetworkTransactionId',
        'is3DSAuthentication' => 'setIs3DSAuthentication',
        'request3DS' => 'setRequest3DS',
        'scaExemptionIndicator' => 'setScaExemptionIndicator',
        'enableAuthenticationUpgrade' => 'setEnableAuthenticationUpgrade',
        'mpiData' => 'setMpiData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cardToken' => 'getCardToken',
        'cardNo' => 'getCardNo',
        'brand' => 'getBrand',
        'selectedCardBrand' => 'getSelectedCardBrand',
        'cardIssuer' => 'getCardIssuer',
        'countryIssue' => 'getCountryIssue',
        'instUserName' => 'getInstUserName',
        'expiryYear' => 'getExpiryYear',
        'expiryMonth' => 'getExpiryMonth',
        'billingAddress' => 'getBillingAddress',
        'mask' => 'getMask',
        'last4' => 'getLast4',
        'paymentMethodDetailMetadata' => 'getPaymentMethodDetailMetadata',
        'maskedCardNo' => 'getMaskedCardNo',
        'fingerprint' => 'getFingerprint',
        'authenticationFlow' => 'getAuthenticationFlow',
        'funding' => 'getFunding',
        'avsResultRaw' => 'getAvsResultRaw',
        'cvvResultRaw' => 'getCvvResultRaw',
        'bin' => 'getBin',
        'issuerName' => 'getIssuerName',
        'issuingCountry' => 'getIssuingCountry',
        'lastFour' => 'getLastFour',
        'cardholderName' => 'getCardholderName',
        'cvv' => 'getCvv',
        'dateOfBirth' => 'getDateOfBirth',
        'businessNo' => 'getBusinessNo',
        'cardPasswordDigest' => 'getCardPasswordDigest',
        'cpf' => 'getCpf',
        'payerEmail' => 'getPayerEmail',
        'networkTransactionId' => 'getNetworkTransactionId',
        'is3DSAuthentication' => 'getIs3DSAuthentication',
        'request3DS' => 'getRequest3DS',
        'scaExemptionIndicator' => 'getScaExemptionIndicator',
        'enableAuthenticationUpgrade' => 'getEnableAuthenticationUpgrade',
        'mpiData' => 'getMpiData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('cardToken', $data ?? [], null);
        $this->setIfExists('cardNo', $data ?? [], null);
        $this->setIfExists('brand', $data ?? [], null);
        $this->setIfExists('selectedCardBrand', $data ?? [], null);
        $this->setIfExists('cardIssuer', $data ?? [], null);
        $this->setIfExists('countryIssue', $data ?? [], null);
        $this->setIfExists('instUserName', $data ?? [], null);
        $this->setIfExists('expiryYear', $data ?? [], null);
        $this->setIfExists('expiryMonth', $data ?? [], null);
        $this->setIfExists('billingAddress', $data ?? [], null);
        $this->setIfExists('mask', $data ?? [], null);
        $this->setIfExists('last4', $data ?? [], null);
        $this->setIfExists('paymentMethodDetailMetadata', $data ?? [], null);
        $this->setIfExists('maskedCardNo', $data ?? [], null);
        $this->setIfExists('fingerprint', $data ?? [], null);
        $this->setIfExists('authenticationFlow', $data ?? [], null);
        $this->setIfExists('funding', $data ?? [], null);
        $this->setIfExists('avsResultRaw', $data ?? [], null);
        $this->setIfExists('cvvResultRaw', $data ?? [], null);
        $this->setIfExists('bin', $data ?? [], null);
        $this->setIfExists('issuerName', $data ?? [], null);
        $this->setIfExists('issuingCountry', $data ?? [], null);
        $this->setIfExists('lastFour', $data ?? [], null);
        $this->setIfExists('cardholderName', $data ?? [], null);
        $this->setIfExists('cvv', $data ?? [], null);
        $this->setIfExists('dateOfBirth', $data ?? [], null);
        $this->setIfExists('businessNo', $data ?? [], null);
        $this->setIfExists('cardPasswordDigest', $data ?? [], null);
        $this->setIfExists('cpf', $data ?? [], null);
        $this->setIfExists('payerEmail', $data ?? [], null);
        $this->setIfExists('networkTransactionId', $data ?? [], null);
        $this->setIfExists('is3DSAuthentication', $data ?? [], null);
        $this->setIfExists('request3DS', $data ?? [], null);
        $this->setIfExists('scaExemptionIndicator', $data ?? [], null);
        $this->setIfExists('enableAuthenticationUpgrade', $data ?? [], null);
        $this->setIfExists('mpiData', $data ?? [], null);

            }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cardToken'] === null) {
            $invalidProperties[] = "'cardToken' can't be null";
        }
        if ($this->container['brand'] === null) {
            $invalidProperties[] = "'brand' can't be null";
        }
        if ($this->container['maskedCardNo'] === null) {
            $invalidProperties[] = "'maskedCardNo' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cardToken
     *
     * @return string
     */
    public function getCardToken()
    {
        return $this->container['cardToken'];
    }

    /**
     * Sets cardToken
     *
     * @param string $cardToken The token of the card. The value of this parameter is used by paymentMethodId in the pay (Checkout Payment) API when initiating payments.   More information:  Maximum length: 2048 characters
     *
     * @return self
     */
    public function setCardToken($cardToken)
    {
        $this->container['cardToken'] = $cardToken;

        return $this;
    }

    /**
     * Gets cardNo
     *
     * @return string|null
     */
    public function getCardNo()
    {
        return $this->container['cardNo'];
    }

    /**
     * Sets cardNo
     *
     * @param string|null $cardNo cardNo
     *
     * @return self
     */
    public function setCardNo($cardNo)
    {
        $this->container['cardNo'] = $cardNo;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return \request\model\CardBrand
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param \request\model\CardBrand $brand brand
     *
     * @return self
     */
    public function setBrand($brand)
    {
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets selectedCardBrand
     *
     * @return \request\model\CardBrand|null
     */
    public function getSelectedCardBrand()
    {
        return $this->container['selectedCardBrand'];
    }

    /**
     * Sets selectedCardBrand
     *
     * @param \request\model\CardBrand|null $selectedCardBrand selectedCardBrand
     *
     * @return self
     */
    public function setSelectedCardBrand($selectedCardBrand)
    {
        $this->container['selectedCardBrand'] = $selectedCardBrand;

        return $this;
    }

    /**
     * Gets cardIssuer
     *
     * @return string|null
     */
    public function getCardIssuer()
    {
        return $this->container['cardIssuer'];
    }

    /**
     * Sets cardIssuer
     *
     * @param string|null $cardIssuer cardIssuer
     *
     * @return self
     */
    public function setCardIssuer($cardIssuer)
    {
        $this->container['cardIssuer'] = $cardIssuer;

        return $this;
    }

    /**
     * Gets countryIssue
     *
     * @return string|null
     */
    public function getCountryIssue()
    {
        return $this->container['countryIssue'];
    }

    /**
     * Sets countryIssue
     *
     * @param string|null $countryIssue countryIssue
     *
     * @return self
     */
    public function setCountryIssue($countryIssue)
    {
        $this->container['countryIssue'] = $countryIssue;

        return $this;
    }

    /**
     * Gets instUserName
     *
     * @return \request\model\UserName|null
     */
    public function getInstUserName()
    {
        return $this->container['instUserName'];
    }

    /**
     * Sets instUserName
     *
     * @param \request\model\UserName|null $instUserName instUserName
     *
     * @return self
     */
    public function setInstUserName($instUserName)
    {
        $this->container['instUserName'] = $instUserName;

        return $this;
    }

    /**
     * Gets expiryYear
     *
     * @return string|null
     */
    public function getExpiryYear()
    {
        return $this->container['expiryYear'];
    }

    /**
     * Sets expiryYear
     *
     * @param string|null $expiryYear expiryYear
     *
     * @return self
     */
    public function setExpiryYear($expiryYear)
    {
        $this->container['expiryYear'] = $expiryYear;

        return $this;
    }

    /**
     * Gets expiryMonth
     *
     * @return string|null
     */
    public function getExpiryMonth()
    {
        return $this->container['expiryMonth'];
    }

    /**
     * Sets expiryMonth
     *
     * @param string|null $expiryMonth expiryMonth
     *
     * @return self
     */
    public function setExpiryMonth($expiryMonth)
    {
        $this->container['expiryMonth'] = $expiryMonth;

        return $this;
    }

    /**
     * Gets billingAddress
     *
     * @return \request\model\Address|null
     */
    public function getBillingAddress()
    {
        return $this->container['billingAddress'];
    }

    /**
     * Sets billingAddress
     *
     * @param \request\model\Address|null $billingAddress billingAddress
     *
     * @return self
     */
    public function setBillingAddress($billingAddress)
    {
        $this->container['billingAddress'] = $billingAddress;

        return $this;
    }

    /**
     * Gets mask
     *
     * @return string|null
     */
    public function getMask()
    {
        return $this->container['mask'];
    }

    /**
     * Sets mask
     *
     * @param string|null $mask mask
     *
     * @return self
     */
    public function setMask($mask)
    {
        $this->container['mask'] = $mask;

        return $this;
    }

    /**
     * Gets last4
     *
     * @return string|null
     */
    public function getLast4()
    {
        return $this->container['last4'];
    }

    /**
     * Sets last4
     *
     * @param string|null $last4 last4
     *
     * @return self
     */
    public function setLast4($last4)
    {
        $this->container['last4'] = $last4;

        return $this;
    }

    /**
     * Gets paymentMethodDetailMetadata
     *
     * @return string|null
     */
    public function getPaymentMethodDetailMetadata()
    {
        return $this->container['paymentMethodDetailMetadata'];
    }

    /**
     * Sets paymentMethodDetailMetadata
     *
     * @param string|null $paymentMethodDetailMetadata paymentMethodDetailMetadata
     *
     * @return self
     */
    public function setPaymentMethodDetailMetadata($paymentMethodDetailMetadata)
    {
        $this->container['paymentMethodDetailMetadata'] = $paymentMethodDetailMetadata;

        return $this;
    }

    /**
     * Gets maskedCardNo
     *
     * @return string
     */
    public function getMaskedCardNo()
    {
        return $this->container['maskedCardNo'];
    }

    /**
     * Sets maskedCardNo
     *
     * @param string $maskedCardNo The masked card number, showing only a few digits and hiding the rest.   More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setMaskedCardNo($maskedCardNo)
    {
        $this->container['maskedCardNo'] = $maskedCardNo;

        return $this;
    }

    /**
     * Gets fingerprint
     *
     * @return string|null
     */
    public function getFingerprint()
    {
        return $this->container['fingerprint'];
    }

    /**
     * Sets fingerprint
     *
     * @param string|null $fingerprint fingerprint
     *
     * @return self
     */
    public function setFingerprint($fingerprint)
    {
        $this->container['fingerprint'] = $fingerprint;

        return $this;
    }

    /**
     * Gets authenticationFlow
     *
     * @return string|null
     */
    public function getAuthenticationFlow()
    {
        return $this->container['authenticationFlow'];
    }

    /**
     * Sets authenticationFlow
     *
     * @param string|null $authenticationFlow authenticationFlow
     *
     * @return self
     */
    public function setAuthenticationFlow($authenticationFlow)
    {
        $this->container['authenticationFlow'] = $authenticationFlow;

        return $this;
    }

    /**
     * Gets funding
     *
     * @return string|null
     */
    public function getFunding()
    {
        return $this->container['funding'];
    }

    /**
     * Sets funding
     *
     * @param string|null $funding funding
     *
     * @return self
     */
    public function setFunding($funding)
    {
        $this->container['funding'] = $funding;

        return $this;
    }

    /**
     * Gets avsResultRaw
     *
     * @return string|null
     */
    public function getAvsResultRaw()
    {
        return $this->container['avsResultRaw'];
    }

    /**
     * Sets avsResultRaw
     *
     * @param string|null $avsResultRaw avsResultRaw
     *
     * @return self
     */
    public function setAvsResultRaw($avsResultRaw)
    {
        $this->container['avsResultRaw'] = $avsResultRaw;

        return $this;
    }

    /**
     * Gets cvvResultRaw
     *
     * @return string|null
     */
    public function getCvvResultRaw()
    {
        return $this->container['cvvResultRaw'];
    }

    /**
     * Sets cvvResultRaw
     *
     * @param string|null $cvvResultRaw cvvResultRaw
     *
     * @return self
     */
    public function setCvvResultRaw($cvvResultRaw)
    {
        $this->container['cvvResultRaw'] = $cvvResultRaw;

        return $this;
    }

    /**
     * Gets bin
     *
     * @return string|null
     */
    public function getBin()
    {
        return $this->container['bin'];
    }

    /**
     * Sets bin
     *
     * @param string|null $bin bin
     *
     * @return self
     */
    public function setBin($bin)
    {
        $this->container['bin'] = $bin;

        return $this;
    }

    /**
     * Gets issuerName
     *
     * @return string|null
     */
    public function getIssuerName()
    {
        return $this->container['issuerName'];
    }

    /**
     * Sets issuerName
     *
     * @param string|null $issuerName issuerName
     *
     * @return self
     */
    public function setIssuerName($issuerName)
    {
        $this->container['issuerName'] = $issuerName;

        return $this;
    }

    /**
     * Gets issuingCountry
     *
     * @return string|null
     */
    public function getIssuingCountry()
    {
        return $this->container['issuingCountry'];
    }

    /**
     * Sets issuingCountry
     *
     * @param string|null $issuingCountry issuingCountry
     *
     * @return self
     */
    public function setIssuingCountry($issuingCountry)
    {
        $this->container['issuingCountry'] = $issuingCountry;

        return $this;
    }

    /**
     * Gets lastFour
     *
     * @return string|null
     */
    public function getLastFour()
    {
        return $this->container['lastFour'];
    }

    /**
     * Sets lastFour
     *
     * @param string|null $lastFour lastFour
     *
     * @return self
     */
    public function setLastFour($lastFour)
    {
        $this->container['lastFour'] = $lastFour;

        return $this;
    }

    /**
     * Gets cardholderName
     *
     * @return \request\model\UserName|null
     */
    public function getCardholderName()
    {
        return $this->container['cardholderName'];
    }

    /**
     * Sets cardholderName
     *
     * @param \request\model\UserName|null $cardholderName cardholderName
     *
     * @return self
     */
    public function setCardholderName($cardholderName)
    {
        $this->container['cardholderName'] = $cardholderName;

        return $this;
    }

    /**
     * Gets cvv
     *
     * @return string|null
     */
    public function getCvv()
    {
        return $this->container['cvv'];
    }

    /**
     * Sets cvv
     *
     * @param string|null $cvv cvv
     *
     * @return self
     */
    public function setCvv($cvv)
    {
        $this->container['cvv'] = $cvv;

        return $this;
    }

    /**
     * Gets dateOfBirth
     *
     * @return string|null
     */
    public function getDateOfBirth()
    {
        return $this->container['dateOfBirth'];
    }

    /**
     * Sets dateOfBirth
     *
     * @param string|null $dateOfBirth dateOfBirth
     *
     * @return self
     */
    public function setDateOfBirth($dateOfBirth)
    {
        $this->container['dateOfBirth'] = $dateOfBirth;

        return $this;
    }

    /**
     * Gets businessNo
     *
     * @return string|null
     */
    public function getBusinessNo()
    {
        return $this->container['businessNo'];
    }

    /**
     * Sets businessNo
     *
     * @param string|null $businessNo businessNo
     *
     * @return self
     */
    public function setBusinessNo($businessNo)
    {
        $this->container['businessNo'] = $businessNo;

        return $this;
    }

    /**
     * Gets cardPasswordDigest
     *
     * @return string|null
     */
    public function getCardPasswordDigest()
    {
        return $this->container['cardPasswordDigest'];
    }

    /**
     * Sets cardPasswordDigest
     *
     * @param string|null $cardPasswordDigest cardPasswordDigest
     *
     * @return self
     */
    public function setCardPasswordDigest($cardPasswordDigest)
    {
        $this->container['cardPasswordDigest'] = $cardPasswordDigest;

        return $this;
    }

    /**
     * Gets cpf
     *
     * @return string|null
     */
    public function getCpf()
    {
        return $this->container['cpf'];
    }

    /**
     * Sets cpf
     *
     * @param string|null $cpf cpf
     *
     * @return self
     */
    public function setCpf($cpf)
    {
        $this->container['cpf'] = $cpf;

        return $this;
    }

    /**
     * Gets payerEmail
     *
     * @return string|null
     */
    public function getPayerEmail()
    {
        return $this->container['payerEmail'];
    }

    /**
     * Sets payerEmail
     *
     * @param string|null $payerEmail payerEmail
     *
     * @return self
     */
    public function setPayerEmail($payerEmail)
    {
        $this->container['payerEmail'] = $payerEmail;

        return $this;
    }

    /**
     * Gets networkTransactionId
     *
     * @return string|null
     */
    public function getNetworkTransactionId()
    {
        return $this->container['networkTransactionId'];
    }

    /**
     * Sets networkTransactionId
     *
     * @param string|null $networkTransactionId The unique ID assigned by the card scheme to identify a transaction.  More information:  Maximum length: 256 characters
     *
     * @return self
     */
    public function setNetworkTransactionId($networkTransactionId)
    {
        $this->container['networkTransactionId'] = $networkTransactionId;

        return $this;
    }

    /**
     * Gets is3DSAuthentication
     *
     * @return bool|null
     */
    public function getIs3DSAuthentication()
    {
        return $this->container['is3DSAuthentication'];
    }

    /**
     * Sets is3DSAuthentication
     *
     * @param bool|null $is3DSAuthentication is3DSAuthentication
     *
     * @return self
     */
    public function setIs3DSAuthentication($is3DSAuthentication)
    {
        $this->container['is3DSAuthentication'] = $is3DSAuthentication;

        return $this;
    }

    /**
     * Gets request3DS
     *
     * @return string|null
     */
    public function getRequest3DS()
    {
        return $this->container['request3DS'];
    }

    /**
     * Sets request3DS
     *
     * @param string|null $request3DS request3DS
     *
     * @return self
     */
    public function setRequest3DS($request3DS)
    {
        $this->container['request3DS'] = $request3DS;

        return $this;
    }

    /**
     * Gets scaExemptionIndicator
     *
     * @return string|null
     */
    public function getScaExemptionIndicator()
    {
        return $this->container['scaExemptionIndicator'];
    }

    /**
     * Sets scaExemptionIndicator
     *
     * @param string|null $scaExemptionIndicator scaExemptionIndicator
     *
     * @return self
     */
    public function setScaExemptionIndicator($scaExemptionIndicator)
    {
        $this->container['scaExemptionIndicator'] = $scaExemptionIndicator;

        return $this;
    }

    /**
     * Gets enableAuthenticationUpgrade
     *
     * @return string|null
     */
    public function getEnableAuthenticationUpgrade()
    {
        return $this->container['enableAuthenticationUpgrade'];
    }

    /**
     * Sets enableAuthenticationUpgrade
     *
     * @param string|null $enableAuthenticationUpgrade enableAuthenticationUpgrade
     *
     * @return self
     */
    public function setEnableAuthenticationUpgrade($enableAuthenticationUpgrade)
    {
        $this->container['enableAuthenticationUpgrade'] = $enableAuthenticationUpgrade;

        return $this;
    }

    /**
     * Gets mpiData
     *
     * @return \request\model\MpiData|null
     */
    public function getMpiData()
    {
        return $this->container['mpiData'];
    }

    /**
     * Sets mpiData
     *
     * @param \request\model\MpiData|null $mpiData mpiData
     *
     * @return self
     */
    public function setMpiData($mpiData)
    {
        $this->container['mpiData'] = $mpiData;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    public function toArray(): array
    {
        $array = [];
        foreach (self::$openAPITypes as $propertyName => $propertyType) {
            $propertyValue = $this[$propertyName];
            if ($propertyValue !== null) {
                // Check if the property value is an object and has a toArray() method
                if (is_object($propertyValue) && method_exists($propertyValue, 'toArray')) {
                    $array[$propertyName] = $propertyValue->toArray();
                // Check if it's type datetime
                } elseif ($propertyValue instanceof \DateTime) {
                    $array[$propertyName] = $propertyValue->format(DATE_ATOM);
                // If it's an array type we should check whether it contains objects and if so call toArray method
                } elseif (is_array($propertyValue)) {
                    $array[$propertyName] = array_map(function ($item) {
                        return $item instanceof ModelInterface ? $item->toArray() : $item;
                    }, $propertyValue);
                } else {
                    // Otherwise, directly assign the property value to the array
                    $array[$propertyName] = $propertyValue;
                }
            }
        }
        return $array;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
