<?php

/**
 * payments_createPaymentSession
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Model;

use \ArrayAccess;
use Request\AlipayRequest;
use Model\ModelInterface;
use Model\ObjectSerializer;

/**
 * PaymentFactor Class Doc Comment
 *
 * @category Class
 * @package  request
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentFactor  implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentFactor';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'isPaymentEvaluation' => 'bool',
        'inStorePaymentScenario' => '\request\model\InStorePaymentScenario',
        'presentmentMode' => '\request\model\PresentmentMode',
        'captureMode' => 'string',
        'isAuthorization' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'isPaymentEvaluation' => null,
        'inStorePaymentScenario' => null,
        'presentmentMode' => null,
        'captureMode' => null,
        'isAuthorization' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'isPaymentEvaluation' => false,
        'inStorePaymentScenario' => false,
        'presentmentMode' => false,
        'captureMode' => false,
        'isAuthorization' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'isPaymentEvaluation' => 'isPaymentEvaluation',
        'inStorePaymentScenario' => 'inStorePaymentScenario',
        'presentmentMode' => 'presentmentMode',
        'captureMode' => 'captureMode',
        'isAuthorization' => 'isAuthorization'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'isPaymentEvaluation' => 'setIsPaymentEvaluation',
        'inStorePaymentScenario' => 'setInStorePaymentScenario',
        'presentmentMode' => 'setPresentmentMode',
        'captureMode' => 'setCaptureMode',
        'isAuthorization' => 'setIsAuthorization'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'isPaymentEvaluation' => 'getIsPaymentEvaluation',
        'inStorePaymentScenario' => 'getInStorePaymentScenario',
        'presentmentMode' => 'getPresentmentMode',
        'captureMode' => 'getCaptureMode',
        'isAuthorization' => 'getIsAuthorization'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('isPaymentEvaluation', $data ?? [], null);
        $this->setIfExists('inStorePaymentScenario', $data ?? [], null);
        $this->setIfExists('presentmentMode', $data ?? [], null);
        $this->setIfExists('captureMode', $data ?? [], null);
        $this->setIfExists('isAuthorization', $data ?? [], null);

            }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets isPaymentEvaluation
     *
     * @return bool|null
     */
    public function getIsPaymentEvaluation()
    {
        return $this->container['isPaymentEvaluation'];
    }

    /**
     * Sets isPaymentEvaluation
     *
     * @param bool|null $isPaymentEvaluation isPaymentEvaluation
     *
     * @return self
     */
    public function setIsPaymentEvaluation($isPaymentEvaluation)
    {
        $this->container['isPaymentEvaluation'] = $isPaymentEvaluation;

        return $this;
    }

    /**
     * Gets inStorePaymentScenario
     *
     * @return \request\model\InStorePaymentScenario|null
     */
    public function getInStorePaymentScenario()
    {
        return $this->container['inStorePaymentScenario'];
    }

    /**
     * Sets inStorePaymentScenario
     *
     * @param \request\model\InStorePaymentScenario|null $inStorePaymentScenario inStorePaymentScenario
     *
     * @return self
     */
    public function setInStorePaymentScenario($inStorePaymentScenario)
    {
        $this->container['inStorePaymentScenario'] = $inStorePaymentScenario;

        return $this;
    }

    /**
     * Gets presentmentMode
     *
     * @return \request\model\PresentmentMode|null
     */
    public function getPresentmentMode()
    {
        return $this->container['presentmentMode'];
    }

    /**
     * Sets presentmentMode
     *
     * @param \request\model\PresentmentMode|null $presentmentMode presentmentMode
     *
     * @return self
     */
    public function setPresentmentMode($presentmentMode)
    {
        $this->container['presentmentMode'] = $presentmentMode;

        return $this;
    }

    /**
     * Gets captureMode
     *
     * @return string|null
     */
    public function getCaptureMode()
    {
        return $this->container['captureMode'];
    }

    /**
     * Sets captureMode
     *
     * @param string|null $captureMode Indicates the method for capturing funds after the user authorizes the payment. Valid values are:  AUTOMATIC: indicates that Antom automatically captures the funds after the authorization. The same applies when the value is empty or you do not pass in this parameter. MANUAL: indicates that you manually capture the funds by calling the capture (Checkout Payment) API. Specify this parameter if you want to designate the capture mode of the payment.    More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setCaptureMode($captureMode)
    {
        $this->container['captureMode'] = $captureMode;

        return $this;
    }

    /**
     * Gets isAuthorization
     *
     * @return bool|null
     */
    public function getIsAuthorization()
    {
        return $this->container['isAuthorization'];
    }

    /**
     * Sets isAuthorization
     *
     * @param bool|null $isAuthorization Indicates whether the payment scenario is authorization. Specify this parameter when the value of paymentMethodType is CARD and you integrate the client-side SDK. Valid values of this parameter are:  true: indicates that the payment scenario is authorization. false: indicates that the payment scenario is a regular payment without authorization.   Under the authorization scenario, the payment funds are guaranteed and held on the payment method side. You can use the capture (Checkout Payment) API to deduct the payment funds.
     *
     * @return self
     */
    public function setIsAuthorization($isAuthorization)
    {
        $this->container['isAuthorization'] = $isAuthorization;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    public function toArray(): array
    {
        $array = [];
        foreach (self::$openAPITypes as $propertyName => $propertyType) {
            $propertyValue = $this[$propertyName];
            if ($propertyValue !== null) {
                // Check if the property value is an object and has a toArray() method
                if (is_object($propertyValue) && method_exists($propertyValue, 'toArray')) {
                    $array[$propertyName] = $propertyValue->toArray();
                // Check if it's type datetime
                } elseif ($propertyValue instanceof \DateTime) {
                    $array[$propertyName] = $propertyValue->format(DATE_ATOM);
                // If it's an array type we should check whether it contains objects and if so call toArray method
                } elseif (is_array($propertyValue)) {
                    $array[$propertyName] = array_map(function ($item) {
                        return $item instanceof ModelInterface ? $item->toArray() : $item;
                    }, $propertyValue);
                } else {
                    // Otherwise, directly assign the property value to the array
                    $array[$propertyName] = $propertyValue;
                }
            }
        }
        return $array;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
