<?php

/**
 * payments_createPaymentSession
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Model;

use \ArrayAccess;
use Request\AlipayRequest;
use Model\ModelInterface;
use Model\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @package  request
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Order  implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'referenceOrderId' => 'string',
        'orderDescription' => 'string',
        'orderAmount' => '\request\model\Amount',
        'merchant' => '\request\model\Merchant',
        'goods' => '\request\model\Goods[]',
        'shipping' => '\request\model\Shipping',
        'buyer' => '\request\model\Buyer',
        'env' => '\request\model\Env',
        'extendInfo' => 'string',
        'transit' => '\request\model\Transit',
        'lodging' => '\request\model\Lodging',
        'gaming' => '\request\model\Gaming',
        'needDeclaration' => 'bool',
        'orderTest' => 'string',
        'declaration' => '\request\model\Declaration',
        'orderType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'referenceOrderId' => null,
        'orderDescription' => null,
        'orderAmount' => null,
        'merchant' => null,
        'goods' => null,
        'shipping' => null,
        'buyer' => null,
        'env' => null,
        'extendInfo' => null,
        'transit' => null,
        'lodging' => null,
        'gaming' => null,
        'needDeclaration' => null,
        'orderTest' => null,
        'declaration' => null,
        'orderType' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'referenceOrderId' => false,
        'orderDescription' => false,
        'orderAmount' => false,
        'merchant' => false,
        'goods' => false,
        'shipping' => false,
        'buyer' => false,
        'env' => false,
        'extendInfo' => false,
        'transit' => false,
        'lodging' => false,
        'gaming' => false,
        'needDeclaration' => false,
        'orderTest' => false,
        'declaration' => false,
        'orderType' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'referenceOrderId' => 'referenceOrderId',
        'orderDescription' => 'orderDescription',
        'orderAmount' => 'orderAmount',
        'merchant' => 'merchant',
        'goods' => 'goods',
        'shipping' => 'shipping',
        'buyer' => 'buyer',
        'env' => 'env',
        'extendInfo' => 'extendInfo',
        'transit' => 'transit',
        'lodging' => 'lodging',
        'gaming' => 'gaming',
        'needDeclaration' => 'needDeclaration',
        'orderTest' => 'orderTest',
        'declaration' => 'declaration',
        'orderType' => 'orderType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'referenceOrderId' => 'setReferenceOrderId',
        'orderDescription' => 'setOrderDescription',
        'orderAmount' => 'setOrderAmount',
        'merchant' => 'setMerchant',
        'goods' => 'setGoods',
        'shipping' => 'setShipping',
        'buyer' => 'setBuyer',
        'env' => 'setEnv',
        'extendInfo' => 'setExtendInfo',
        'transit' => 'setTransit',
        'lodging' => 'setLodging',
        'gaming' => 'setGaming',
        'needDeclaration' => 'setNeedDeclaration',
        'orderTest' => 'setOrderTest',
        'declaration' => 'setDeclaration',
        'orderType' => 'setOrderType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'referenceOrderId' => 'getReferenceOrderId',
        'orderDescription' => 'getOrderDescription',
        'orderAmount' => 'getOrderAmount',
        'merchant' => 'getMerchant',
        'goods' => 'getGoods',
        'shipping' => 'getShipping',
        'buyer' => 'getBuyer',
        'env' => 'getEnv',
        'extendInfo' => 'getExtendInfo',
        'transit' => 'getTransit',
        'lodging' => 'getLodging',
        'gaming' => 'getGaming',
        'needDeclaration' => 'getNeedDeclaration',
        'orderTest' => 'getOrderTest',
        'declaration' => 'getDeclaration',
        'orderType' => 'getOrderType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('referenceOrderId', $data ?? [], null);
        $this->setIfExists('orderDescription', $data ?? [], null);
        $this->setIfExists('orderAmount', $data ?? [], null);
        $this->setIfExists('merchant', $data ?? [], null);
        $this->setIfExists('goods', $data ?? [], null);
        $this->setIfExists('shipping', $data ?? [], null);
        $this->setIfExists('buyer', $data ?? [], null);
        $this->setIfExists('env', $data ?? [], null);
        $this->setIfExists('extendInfo', $data ?? [], null);
        $this->setIfExists('transit', $data ?? [], null);
        $this->setIfExists('lodging', $data ?? [], null);
        $this->setIfExists('gaming', $data ?? [], null);
        $this->setIfExists('needDeclaration', $data ?? [], null);
        $this->setIfExists('orderTest', $data ?? [], null);
        $this->setIfExists('declaration', $data ?? [], null);
        $this->setIfExists('orderType', $data ?? [], null);

            }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['referenceOrderId'] === null) {
            $invalidProperties[] = "'referenceOrderId' can't be null";
        }
        if ($this->container['orderAmount'] === null) {
            $invalidProperties[] = "'orderAmount' can't be null";
        }
        if ($this->container['orderType'] === null) {
            $invalidProperties[] = "'orderType' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets referenceOrderId
     *
     * @return string
     */
    public function getReferenceOrderId()
    {
        return $this->container['referenceOrderId'];
    }

    /**
     * Sets referenceOrderId
     *
     * @param string $referenceOrderId The unique ID to identify the order on the merchant side, which is assigned by the merchant that provides services or goods directly to the customer. This field is used for user consumption records display and other further actions such as disputes track or handling of customer complaints.  More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setReferenceOrderId($referenceOrderId)
    {
        $this->container['referenceOrderId'] = $referenceOrderId;

        return $this;
    }

    /**
     * Gets orderDescription
     *
     * @return string|null
     */
    public function getOrderDescription()
    {
        return $this->container['orderDescription'];
    }

    /**
     * Sets orderDescription
     *
     * @param string|null $orderDescription Summary description of the order, which is used for user consumption records display or other further actions.  More information:  Maximum length: 256 characters
     *
     * @return self
     */
    public function setOrderDescription($orderDescription)
    {
        $this->container['orderDescription'] = $orderDescription;

        return $this;
    }

    /**
     * Gets orderAmount
     *
     * @return \request\model\Amount
     */
    public function getOrderAmount()
    {
        return $this->container['orderAmount'];
    }

    /**
     * Sets orderAmount
     *
     * @param \request\model\Amount $orderAmount orderAmount
     *
     * @return self
     */
    public function setOrderAmount($orderAmount)
    {
        $this->container['orderAmount'] = $orderAmount;

        return $this;
    }

    /**
     * Gets merchant
     *
     * @return \request\model\Merchant|null
     */
    public function getMerchant()
    {
        return $this->container['merchant'];
    }

    /**
     * Sets merchant
     *
     * @param \request\model\Merchant|null $merchant merchant
     *
     * @return self
     */
    public function setMerchant($merchant)
    {
        $this->container['merchant'] = $merchant;

        return $this;
    }

    /**
     * Gets goods
     *
     * @return \request\model\Goods[]|null
     */
    public function getGoods()
    {
        return $this->container['goods'];
    }

    /**
     * Sets goods
     *
     * @param \request\model\Goods[]|null $goods Goods information, including the ID, name, price, and quantity of the goods in the order.   Note: Specify this parameter if you require risk control. Providing this information helps to increase the accuracy of anti-money laundering and fraud detection, and increase payment success rates.  More information:  Maximum size: 100 elements
     *
     * @return self
     */
    public function setGoods($goods)
    {
        $this->container['goods'] = $goods;

        return $this;
    }

    /**
     * Gets shipping
     *
     * @return \request\model\Shipping|null
     */
    public function getShipping()
    {
        return $this->container['shipping'];
    }

    /**
     * Sets shipping
     *
     * @param \request\model\Shipping|null $shipping shipping
     *
     * @return self
     */
    public function setShipping($shipping)
    {
        $this->container['shipping'] = $shipping;

        return $this;
    }

    /**
     * Gets buyer
     *
     * @return \request\model\Buyer|null
     */
    public function getBuyer()
    {
        return $this->container['buyer'];
    }

    /**
     * Sets buyer
     *
     * @param \request\model\Buyer|null $buyer buyer
     *
     * @return self
     */
    public function setBuyer($buyer)
    {
        $this->container['buyer'] = $buyer;

        return $this;
    }

    /**
     * Gets env
     *
     * @return \request\model\Env|null
     */
    public function getEnv()
    {
        return $this->container['env'];
    }

    /**
     * Sets env
     *
     * @param \request\model\Env|null $env env
     *
     * @return self
     */
    public function setEnv($env)
    {
        $this->container['env'] = $env;

        return $this;
    }

    /**
     * Gets extendInfo
     *
     * @return string|null
     */
    public function getExtendInfo()
    {
        return $this->container['extendInfo'];
    }

    /**
     * Sets extendInfo
     *
     * @param string|null $extendInfo Extended information data, including information for special use cases.  Note: Specify this field when you need to use the extended information.
     *
     * @return self
     */
    public function setExtendInfo($extendInfo)
    {
        $this->container['extendInfo'] = $extendInfo;

        return $this;
    }

    /**
     * Gets transit
     *
     * @return \request\model\Transit|null
     */
    public function getTransit()
    {
        return $this->container['transit'];
    }

    /**
     * Sets transit
     *
     * @param \request\model\Transit|null $transit transit
     *
     * @return self
     */
    public function setTransit($transit)
    {
        $this->container['transit'] = $transit;

        return $this;
    }

    /**
     * Gets lodging
     *
     * @return \request\model\Lodging|null
     */
    public function getLodging()
    {
        return $this->container['lodging'];
    }

    /**
     * Sets lodging
     *
     * @param \request\model\Lodging|null $lodging lodging
     *
     * @return self
     */
    public function setLodging($lodging)
    {
        $this->container['lodging'] = $lodging;

        return $this;
    }

    /**
     * Gets gaming
     *
     * @return \request\model\Gaming|null
     */
    public function getGaming()
    {
        return $this->container['gaming'];
    }

    /**
     * Sets gaming
     *
     * @param \request\model\Gaming|null $gaming gaming
     *
     * @return self
     */
    public function setGaming($gaming)
    {
        $this->container['gaming'] = $gaming;

        return $this;
    }

    /**
     * Gets needDeclaration
     *
     * @return bool|null
     */
    public function getNeedDeclaration()
    {
        return $this->container['needDeclaration'];
    }

    /**
     * Sets needDeclaration
     *
     * @param bool|null $needDeclaration needDeclaration
     *
     * @return self
     */
    public function setNeedDeclaration($needDeclaration)
    {
        $this->container['needDeclaration'] = $needDeclaration;

        return $this;
    }

    /**
     * Gets orderTest
     *
     * @return string|null
     */
    public function getOrderTest()
    {
        return $this->container['orderTest'];
    }

    /**
     * Sets orderTest
     *
     * @param string|null $orderTest orderTest
     *
     * @return self
     */
    public function setOrderTest($orderTest)
    {
        $this->container['orderTest'] = $orderTest;

        return $this;
    }

    /**
     * Gets declaration
     *
     * @return \request\model\Declaration|null
     */
    public function getDeclaration()
    {
        return $this->container['declaration'];
    }

    /**
     * Sets declaration
     *
     * @param \request\model\Declaration|null $declaration declaration
     *
     * @return self
     */
    public function setDeclaration($declaration)
    {
        $this->container['declaration'] = $declaration;

        return $this;
    }

    /**
     * Gets orderType
     *
     * @return string
     */
    public function getOrderType()
    {
        return $this->container['orderType'];
    }

    /**
     * Sets orderType
     *
     * @param string $orderType test
     *
     * @return self
     */
    public function setOrderType($orderType)
    {
        $this->container['orderType'] = $orderType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    public function toArray(): array
    {
        $array = [];
        foreach (self::$openAPITypes as $propertyName => $propertyType) {
            $propertyValue = $this[$propertyName];
            if ($propertyValue !== null) {
                // Check if the property value is an object and has a toArray() method
                if (is_object($propertyValue) && method_exists($propertyValue, 'toArray')) {
                    $array[$propertyName] = $propertyValue->toArray();
                // Check if it's type datetime
                } elseif ($propertyValue instanceof \DateTime) {
                    $array[$propertyName] = $propertyValue->format(DATE_ATOM);
                // If it's an array type we should check whether it contains objects and if so call toArray method
                } elseif (is_array($propertyValue)) {
                    $array[$propertyName] = array_map(function ($item) {
                        return $item instanceof ModelInterface ? $item->toArray() : $item;
                    }, $propertyValue);
                } else {
                    // Otherwise, directly assign the property value to the array
                    $array[$propertyName] = $propertyValue;
                }
            }
        }
        return $array;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
