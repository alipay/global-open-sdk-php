<?php

/**
 * subscriptions_create
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Request\subscription;

use \ArrayAccess;
use Request\AlipayRequest;
use Model\ModelInterface;
use Model\ObjectSerializer;

/**
 * AlipaySubscriptionCreateRequest Class Doc Comment
 *
 * @category Class
 * @package  request
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AlipaySubscriptionCreateRequest   extends AlipayRequest  implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AlipaySubscriptionCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'subscriptionRequestId' => 'string',
        'subscriptionDescription' => 'string',
        'subscriptionRedirectUrl' => 'string',
        'subscriptionStartTime' => 'string',
        'subscriptionEndTime' => 'string',
        'periodRule' => '\request\model\PeriodRule',
        'subscriptionExpiryTime' => 'string',
        'paymentMethod' => '\request\model\PaymentMethod',
        'subscriptionNotificationUrl' => 'string',
        'paymentNotificationUrl' => 'string',
        'orderInfo' => '\request\model\OrderInfo',
        'paymentAmount' => '\request\model\Amount',
        'settlementStrategy' => '\request\model\SettlementStrategy',
        'env' => '\request\model\Env',
        'trials' => '\request\model\Trial[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'subscriptionRequestId' => null,
        'subscriptionDescription' => null,
        'subscriptionRedirectUrl' => null,
        'subscriptionStartTime' => null,
        'subscriptionEndTime' => null,
        'periodRule' => null,
        'subscriptionExpiryTime' => null,
        'paymentMethod' => null,
        'subscriptionNotificationUrl' => null,
        'paymentNotificationUrl' => null,
        'orderInfo' => null,
        'paymentAmount' => null,
        'settlementStrategy' => null,
        'env' => null,
        'trials' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'subscriptionRequestId' => false,
        'subscriptionDescription' => false,
        'subscriptionRedirectUrl' => false,
        'subscriptionStartTime' => false,
        'subscriptionEndTime' => false,
        'periodRule' => false,
        'subscriptionExpiryTime' => false,
        'paymentMethod' => false,
        'subscriptionNotificationUrl' => false,
        'paymentNotificationUrl' => false,
        'orderInfo' => false,
        'paymentAmount' => false,
        'settlementStrategy' => false,
        'env' => false,
        'trials' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subscriptionRequestId' => 'subscriptionRequestId',
        'subscriptionDescription' => 'subscriptionDescription',
        'subscriptionRedirectUrl' => 'subscriptionRedirectUrl',
        'subscriptionStartTime' => 'subscriptionStartTime',
        'subscriptionEndTime' => 'subscriptionEndTime',
        'periodRule' => 'periodRule',
        'subscriptionExpiryTime' => 'subscriptionExpiryTime',
        'paymentMethod' => 'paymentMethod',
        'subscriptionNotificationUrl' => 'subscriptionNotificationUrl',
        'paymentNotificationUrl' => 'paymentNotificationUrl',
        'orderInfo' => 'orderInfo',
        'paymentAmount' => 'paymentAmount',
        'settlementStrategy' => 'settlementStrategy',
        'env' => 'env',
        'trials' => 'trials'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subscriptionRequestId' => 'setSubscriptionRequestId',
        'subscriptionDescription' => 'setSubscriptionDescription',
        'subscriptionRedirectUrl' => 'setSubscriptionRedirectUrl',
        'subscriptionStartTime' => 'setSubscriptionStartTime',
        'subscriptionEndTime' => 'setSubscriptionEndTime',
        'periodRule' => 'setPeriodRule',
        'subscriptionExpiryTime' => 'setSubscriptionExpiryTime',
        'paymentMethod' => 'setPaymentMethod',
        'subscriptionNotificationUrl' => 'setSubscriptionNotificationUrl',
        'paymentNotificationUrl' => 'setPaymentNotificationUrl',
        'orderInfo' => 'setOrderInfo',
        'paymentAmount' => 'setPaymentAmount',
        'settlementStrategy' => 'setSettlementStrategy',
        'env' => 'setEnv',
        'trials' => 'setTrials'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subscriptionRequestId' => 'getSubscriptionRequestId',
        'subscriptionDescription' => 'getSubscriptionDescription',
        'subscriptionRedirectUrl' => 'getSubscriptionRedirectUrl',
        'subscriptionStartTime' => 'getSubscriptionStartTime',
        'subscriptionEndTime' => 'getSubscriptionEndTime',
        'periodRule' => 'getPeriodRule',
        'subscriptionExpiryTime' => 'getSubscriptionExpiryTime',
        'paymentMethod' => 'getPaymentMethod',
        'subscriptionNotificationUrl' => 'getSubscriptionNotificationUrl',
        'paymentNotificationUrl' => 'getPaymentNotificationUrl',
        'orderInfo' => 'getOrderInfo',
        'paymentAmount' => 'getPaymentAmount',
        'settlementStrategy' => 'getSettlementStrategy',
        'env' => 'getEnv',
        'trials' => 'getTrials'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('subscriptionRequestId', $data ?? [], null);
        $this->setIfExists('subscriptionDescription', $data ?? [], null);
        $this->setIfExists('subscriptionRedirectUrl', $data ?? [], null);
        $this->setIfExists('subscriptionStartTime', $data ?? [], null);
        $this->setIfExists('subscriptionEndTime', $data ?? [], null);
        $this->setIfExists('periodRule', $data ?? [], null);
        $this->setIfExists('subscriptionExpiryTime', $data ?? [], null);
        $this->setIfExists('paymentMethod', $data ?? [], null);
        $this->setIfExists('subscriptionNotificationUrl', $data ?? [], null);
        $this->setIfExists('paymentNotificationUrl', $data ?? [], null);
        $this->setIfExists('orderInfo', $data ?? [], null);
        $this->setIfExists('paymentAmount', $data ?? [], null);
        $this->setIfExists('settlementStrategy', $data ?? [], null);
        $this->setIfExists('env', $data ?? [], null);
        $this->setIfExists('trials', $data ?? [], null);

         $this->setPath("/ams/api/v1/subscriptions/create"); 
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['subscriptionRequestId'] === null) {
            $invalidProperties[] = "'subscriptionRequestId' can't be null";
        }
        if ($this->container['subscriptionDescription'] === null) {
            $invalidProperties[] = "'subscriptionDescription' can't be null";
        }
        if ($this->container['subscriptionRedirectUrl'] === null) {
            $invalidProperties[] = "'subscriptionRedirectUrl' can't be null";
        }
        if ($this->container['subscriptionStartTime'] === null) {
            $invalidProperties[] = "'subscriptionStartTime' can't be null";
        }
        if ($this->container['periodRule'] === null) {
            $invalidProperties[] = "'periodRule' can't be null";
        }
        if ($this->container['paymentMethod'] === null) {
            $invalidProperties[] = "'paymentMethod' can't be null";
        }
        if ($this->container['subscriptionNotificationUrl'] === null) {
            $invalidProperties[] = "'subscriptionNotificationUrl' can't be null";
        }
        if ($this->container['paymentNotificationUrl'] === null) {
            $invalidProperties[] = "'paymentNotificationUrl' can't be null";
        }
        if ($this->container['orderInfo'] === null) {
            $invalidProperties[] = "'orderInfo' can't be null";
        }
        if ($this->container['paymentAmount'] === null) {
            $invalidProperties[] = "'paymentAmount' can't be null";
        }
        if ($this->container['settlementStrategy'] === null) {
            $invalidProperties[] = "'settlementStrategy' can't be null";
        }
        if ($this->container['env'] === null) {
            $invalidProperties[] = "'env' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subscriptionRequestId
     *
     * @return string
     */
    public function getSubscriptionRequestId()
    {
        return $this->container['subscriptionRequestId'];
    }

    /**
     * Sets subscriptionRequestId
     *
     * @param string $subscriptionRequestId The unique ID assigned by a merchant to identify a subscription request. Antom uses this field for idempotency control.    More information:  This field is an API idempotency field.For subscription requests that are initiated with the same value of subscriptionRequestId and reach a final status of S or F, the same result is to be returned for the request. Maximum length: 64 characters
     *
     * @return self
     */
    public function setSubscriptionRequestId($subscriptionRequestId)
    {
        $this->container['subscriptionRequestId'] = $subscriptionRequestId;

        return $this;
    }

    /**
     * Gets subscriptionDescription
     *
     * @return string
     */
    public function getSubscriptionDescription()
    {
        return $this->container['subscriptionDescription'];
    }

    /**
     * Sets subscriptionDescription
     *
     * @param string $subscriptionDescription The description of the subscription, used for displaying user consumption records and other actions.   More information:  Maximum length: 256 characters
     *
     * @return self
     */
    public function setSubscriptionDescription($subscriptionDescription)
    {
        $this->container['subscriptionDescription'] = $subscriptionDescription;

        return $this;
    }

    /**
     * Gets subscriptionRedirectUrl
     *
     * @return string
     */
    public function getSubscriptionRedirectUrl()
    {
        return $this->container['subscriptionRedirectUrl'];
    }

    /**
     * Sets subscriptionRedirectUrl
     *
     * @param string $subscriptionRedirectUrl The merchant page URL that the user is redirected to after authorizing the subscription.   More information:  Maximum length: 2048 characters
     *
     * @return self
     */
    public function setSubscriptionRedirectUrl($subscriptionRedirectUrl)
    {
        $this->container['subscriptionRedirectUrl'] = $subscriptionRedirectUrl;

        return $this;
    }

    /**
     * Gets subscriptionStartTime
     *
     * @return string
     */
    public function getSubscriptionStartTime()
    {
        return $this->container['subscriptionStartTime'];
    }

    /**
     * Sets subscriptionStartTime
     *
     * @param string $subscriptionStartTime The date and time when the subscription becomes active.    More information:  The value follows the ISO 8601 standard format. For example, \"2019-11-27T12:01:01+08:00\".
     *
     * @return self
     */
    public function setSubscriptionStartTime($subscriptionStartTime)
    {
        $this->container['subscriptionStartTime'] = $subscriptionStartTime;

        return $this;
    }

    /**
     * Gets subscriptionEndTime
     *
     * @return string|null
     */
    public function getSubscriptionEndTime()
    {
        return $this->container['subscriptionEndTime'];
    }

    /**
     * Sets subscriptionEndTime
     *
     * @param string|null $subscriptionEndTime The date and time when the subscription ends.  Note: Specify this parameter when you want to designate the subscription end time.    More information:  The value follows the ISO 8601 standard format. For example, \"2019-11-27T12:01:01+08:00\".
     *
     * @return self
     */
    public function setSubscriptionEndTime($subscriptionEndTime)
    {
        $this->container['subscriptionEndTime'] = $subscriptionEndTime;

        return $this;
    }

    /**
     * Gets periodRule
     *
     * @return \request\model\PeriodRule
     */
    public function getPeriodRule()
    {
        return $this->container['periodRule'];
    }

    /**
     * Sets periodRule
     *
     * @param \request\model\PeriodRule $periodRule periodRule
     *
     * @return self
     */
    public function setPeriodRule($periodRule)
    {
        $this->container['periodRule'] = $periodRule;

        return $this;
    }

    /**
     * Gets subscriptionExpiryTime
     *
     * @return string|null
     */
    public function getSubscriptionExpiryTime()
    {
        return $this->container['subscriptionExpiryTime'];
    }

    /**
     * Sets subscriptionExpiryTime
     *
     * @param string|null $subscriptionExpiryTime A specific date and time after which the created subscription expires. When the subscription expires, the order must be terminated. The default value of this parameter is 30 minutes after the subscription creation request is sent.  Note: Specify this parameter if you want to designate the subscription creation expiration time. The specified payment expiration time must be less than 48 hours after the subscription request is sent.  More information:  The value follows the ISO 8601 standard format. For example, \"2019-11-27T12:01:01+08:00\".
     *
     * @return self
     */
    public function setSubscriptionExpiryTime($subscriptionExpiryTime)
    {
        $this->container['subscriptionExpiryTime'] = $subscriptionExpiryTime;

        return $this;
    }

    /**
     * Gets paymentMethod
     *
     * @return \request\model\PaymentMethod
     */
    public function getPaymentMethod()
    {
        return $this->container['paymentMethod'];
    }

    /**
     * Sets paymentMethod
     *
     * @param \request\model\PaymentMethod $paymentMethod paymentMethod
     *
     * @return self
     */
    public function setPaymentMethod($paymentMethod)
    {
        $this->container['paymentMethod'] = $paymentMethod;

        return $this;
    }

    /**
     * Gets subscriptionNotificationUrl
     *
     * @return string
     */
    public function getSubscriptionNotificationUrl()
    {
        return $this->container['subscriptionNotificationUrl'];
    }

    /**
     * Sets subscriptionNotificationUrl
     *
     * @param string $subscriptionNotificationUrl The URL that is used to receive the subscription result notification.   You can also configure the subscription notification URL in Antom Dashboard. If you specify this URL in both this API and Antom Dashboard, the URL configured in the API takes precedence.    Only one subscription notification URL can be configured in Antom Dashboard.  More information:  Maximum length: 2048 characters
     *
     * @return self
     */
    public function setSubscriptionNotificationUrl($subscriptionNotificationUrl)
    {
        $this->container['subscriptionNotificationUrl'] = $subscriptionNotificationUrl;

        return $this;
    }

    /**
     * Gets paymentNotificationUrl
     *
     * @return string
     */
    public function getPaymentNotificationUrl()
    {
        return $this->container['paymentNotificationUrl'];
    }

    /**
     * Sets paymentNotificationUrl
     *
     * @param string $paymentNotificationUrl The URL that is used to receive the payment result notification for each subscription period.  You can also configure the subscription notification URL in Antom Dashboard. If you specify this URL in both this API and Antom Dashboard, the URL configured in the API takes precedence.    You can only configure one subscription notification URL in Antom Dashboard.  More information:  Maximum length: 2048 characters
     *
     * @return self
     */
    public function setPaymentNotificationUrl($paymentNotificationUrl)
    {
        $this->container['paymentNotificationUrl'] = $paymentNotificationUrl;

        return $this;
    }

    /**
     * Gets orderInfo
     *
     * @return \request\model\OrderInfo
     */
    public function getOrderInfo()
    {
        return $this->container['orderInfo'];
    }

    /**
     * Sets orderInfo
     *
     * @param \request\model\OrderInfo $orderInfo orderInfo
     *
     * @return self
     */
    public function setOrderInfo($orderInfo)
    {
        $this->container['orderInfo'] = $orderInfo;

        return $this;
    }

    /**
     * Gets paymentAmount
     *
     * @return \request\model\Amount
     */
    public function getPaymentAmount()
    {
        return $this->container['paymentAmount'];
    }

    /**
     * Sets paymentAmount
     *
     * @param \request\model\Amount $paymentAmount paymentAmount
     *
     * @return self
     */
    public function setPaymentAmount($paymentAmount)
    {
        $this->container['paymentAmount'] = $paymentAmount;

        return $this;
    }

    /**
     * Gets settlementStrategy
     *
     * @return \request\model\SettlementStrategy
     */
    public function getSettlementStrategy()
    {
        return $this->container['settlementStrategy'];
    }

    /**
     * Sets settlementStrategy
     *
     * @param \request\model\SettlementStrategy $settlementStrategy settlementStrategy
     *
     * @return self
     */
    public function setSettlementStrategy($settlementStrategy)
    {
        $this->container['settlementStrategy'] = $settlementStrategy;

        return $this;
    }

    /**
     * Gets env
     *
     * @return \request\model\Env
     */
    public function getEnv()
    {
        return $this->container['env'];
    }

    /**
     * Sets env
     *
     * @param \request\model\Env $env env
     *
     * @return self
     */
    public function setEnv($env)
    {
        $this->container['env'] = $env;

        return $this;
    }

    /**
     * Gets trials
     *
     * @return \request\model\Trial[]|null
     */
    public function getTrials()
    {
        return $this->container['trials'];
    }

    /**
     * Sets trials
     *
     * @param \request\model\Trial[]|null $trials The list of trial information of a subscription.    Note: Specify this parameter if the subscription includes any trial periods.
     *
     * @return self
     */
    public function setTrials($trials)
    {
        $this->container['trials'] = $trials;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    public function toArray(): array
    {
        $array = [];
        foreach (self::$openAPITypes as $propertyName => $propertyType) {
            $propertyValue = $this[$propertyName];
            if ($propertyValue !== null) {
                // Check if the property value is an object and has a toArray() method
                if (is_object($propertyValue) && method_exists($propertyValue, 'toArray')) {
                    $array[$propertyName] = $propertyValue->toArray();
                // Check if it's type datetime
                } elseif ($propertyValue instanceof \DateTime) {
                    $array[$propertyName] = $propertyValue->format(DATE_ATOM);
                // If it's an array type we should check whether it contains objects and if so call toArray method
                } elseif (is_array($propertyValue)) {
                    $array[$propertyName] = array_map(function ($item) {
                        return $item instanceof ModelInterface ? $item->toArray() : $item;
                    }, $propertyValue);
                } else {
                    // Otherwise, directly assign the property value to the array
                    $array[$propertyName] = $propertyValue;
                }
            }
        }
        return $array;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
