<?php

/**
 * payments_pay
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Request\pay;

use \ArrayAccess;
use Request\AlipayRequest;
use Model\ModelInterface;
use Model\ObjectSerializer;

/**
 * AlipayPayRequest Class Doc Comment
 *
 * @category Class
 * @package  request
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AlipayPayRequest   extends AlipayRequest  implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AlipayPayRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'productCode' => '\request\model\ProductCodeType',
        'paymentRequestId' => 'string',
        'order' => '\request\model\Order',
        'paymentAmount' => '\request\model\Amount',
        'paymentMethod' => '\request\model\PaymentMethod',
        'paymentExpiryTime' => 'string',
        'paymentRedirectUrl' => 'string',
        'paymentNotifyUrl' => 'string',
        'paymentFactor' => '\request\model\PaymentFactor',
        'settlementStrategy' => '\request\model\SettlementStrategy',
        'creditPayPlan' => '\request\model\CreditPayPlan',
        'appId' => 'string',
        'merchantRegion' => 'string',
        'userRegion' => 'string',
        'env' => '\request\model\Env',
        'payToMethod' => '\request\model\PaymentMethod',
        'isAuthorization' => 'bool',
        'merchant' => '\request\model\Merchant',
        'paymentVerificationData' => '\request\model\PaymentVerificationData',
        'extendInfo' => 'string',
        'merchantAccountId' => 'string',
        'dualOfflinePayment' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'productCode' => null,
        'paymentRequestId' => null,
        'order' => null,
        'paymentAmount' => null,
        'paymentMethod' => null,
        'paymentExpiryTime' => null,
        'paymentRedirectUrl' => null,
        'paymentNotifyUrl' => null,
        'paymentFactor' => null,
        'settlementStrategy' => null,
        'creditPayPlan' => null,
        'appId' => null,
        'merchantRegion' => null,
        'userRegion' => null,
        'env' => null,
        'payToMethod' => null,
        'isAuthorization' => null,
        'merchant' => null,
        'paymentVerificationData' => null,
        'extendInfo' => null,
        'merchantAccountId' => null,
        'dualOfflinePayment' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'productCode' => false,
        'paymentRequestId' => false,
        'order' => false,
        'paymentAmount' => false,
        'paymentMethod' => false,
        'paymentExpiryTime' => false,
        'paymentRedirectUrl' => false,
        'paymentNotifyUrl' => false,
        'paymentFactor' => false,
        'settlementStrategy' => false,
        'creditPayPlan' => false,
        'appId' => false,
        'merchantRegion' => false,
        'userRegion' => false,
        'env' => false,
        'payToMethod' => false,
        'isAuthorization' => false,
        'merchant' => false,
        'paymentVerificationData' => false,
        'extendInfo' => false,
        'merchantAccountId' => false,
        'dualOfflinePayment' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'productCode' => 'productCode',
        'paymentRequestId' => 'paymentRequestId',
        'order' => 'order',
        'paymentAmount' => 'paymentAmount',
        'paymentMethod' => 'paymentMethod',
        'paymentExpiryTime' => 'paymentExpiryTime',
        'paymentRedirectUrl' => 'paymentRedirectUrl',
        'paymentNotifyUrl' => 'paymentNotifyUrl',
        'paymentFactor' => 'paymentFactor',
        'settlementStrategy' => 'settlementStrategy',
        'creditPayPlan' => 'creditPayPlan',
        'appId' => 'appId',
        'merchantRegion' => 'merchantRegion',
        'userRegion' => 'userRegion',
        'env' => 'env',
        'payToMethod' => 'payToMethod',
        'isAuthorization' => 'isAuthorization',
        'merchant' => 'merchant',
        'paymentVerificationData' => 'paymentVerificationData',
        'extendInfo' => 'extendInfo',
        'merchantAccountId' => 'merchantAccountId',
        'dualOfflinePayment' => 'dualOfflinePayment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'productCode' => 'setProductCode',
        'paymentRequestId' => 'setPaymentRequestId',
        'order' => 'setOrder',
        'paymentAmount' => 'setPaymentAmount',
        'paymentMethod' => 'setPaymentMethod',
        'paymentExpiryTime' => 'setPaymentExpiryTime',
        'paymentRedirectUrl' => 'setPaymentRedirectUrl',
        'paymentNotifyUrl' => 'setPaymentNotifyUrl',
        'paymentFactor' => 'setPaymentFactor',
        'settlementStrategy' => 'setSettlementStrategy',
        'creditPayPlan' => 'setCreditPayPlan',
        'appId' => 'setAppId',
        'merchantRegion' => 'setMerchantRegion',
        'userRegion' => 'setUserRegion',
        'env' => 'setEnv',
        'payToMethod' => 'setPayToMethod',
        'isAuthorization' => 'setIsAuthorization',
        'merchant' => 'setMerchant',
        'paymentVerificationData' => 'setPaymentVerificationData',
        'extendInfo' => 'setExtendInfo',
        'merchantAccountId' => 'setMerchantAccountId',
        'dualOfflinePayment' => 'setDualOfflinePayment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'productCode' => 'getProductCode',
        'paymentRequestId' => 'getPaymentRequestId',
        'order' => 'getOrder',
        'paymentAmount' => 'getPaymentAmount',
        'paymentMethod' => 'getPaymentMethod',
        'paymentExpiryTime' => 'getPaymentExpiryTime',
        'paymentRedirectUrl' => 'getPaymentRedirectUrl',
        'paymentNotifyUrl' => 'getPaymentNotifyUrl',
        'paymentFactor' => 'getPaymentFactor',
        'settlementStrategy' => 'getSettlementStrategy',
        'creditPayPlan' => 'getCreditPayPlan',
        'appId' => 'getAppId',
        'merchantRegion' => 'getMerchantRegion',
        'userRegion' => 'getUserRegion',
        'env' => 'getEnv',
        'payToMethod' => 'getPayToMethod',
        'isAuthorization' => 'getIsAuthorization',
        'merchant' => 'getMerchant',
        'paymentVerificationData' => 'getPaymentVerificationData',
        'extendInfo' => 'getExtendInfo',
        'merchantAccountId' => 'getMerchantAccountId',
        'dualOfflinePayment' => 'getDualOfflinePayment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('productCode', $data ?? [], null);
        $this->setIfExists('paymentRequestId', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('paymentAmount', $data ?? [], null);
        $this->setIfExists('paymentMethod', $data ?? [], null);
        $this->setIfExists('paymentExpiryTime', $data ?? [], null);
        $this->setIfExists('paymentRedirectUrl', $data ?? [], null);
        $this->setIfExists('paymentNotifyUrl', $data ?? [], null);
        $this->setIfExists('paymentFactor', $data ?? [], null);
        $this->setIfExists('settlementStrategy', $data ?? [], null);
        $this->setIfExists('creditPayPlan', $data ?? [], null);
        $this->setIfExists('appId', $data ?? [], null);
        $this->setIfExists('merchantRegion', $data ?? [], null);
        $this->setIfExists('userRegion', $data ?? [], null);
        $this->setIfExists('env', $data ?? [], null);
        $this->setIfExists('payToMethod', $data ?? [], null);
        $this->setIfExists('isAuthorization', $data ?? [], null);
        $this->setIfExists('merchant', $data ?? [], null);
        $this->setIfExists('paymentVerificationData', $data ?? [], null);
        $this->setIfExists('extendInfo', $data ?? [], null);
        $this->setIfExists('merchantAccountId', $data ?? [], null);
        $this->setIfExists('dualOfflinePayment', $data ?? [], null);

         $this->setPath("/ams/api/v1/payments/pay"); 
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['productCode'] === null) {
            $invalidProperties[] = "'productCode' can't be null";
        }
        if ($this->container['paymentRequestId'] === null) {
            $invalidProperties[] = "'paymentRequestId' can't be null";
        }
        if ($this->container['order'] === null) {
            $invalidProperties[] = "'order' can't be null";
        }
        if ($this->container['paymentAmount'] === null) {
            $invalidProperties[] = "'paymentAmount' can't be null";
        }
        if ($this->container['paymentMethod'] === null) {
            $invalidProperties[] = "'paymentMethod' can't be null";
        }
        if ($this->container['paymentRedirectUrl'] === null) {
            $invalidProperties[] = "'paymentRedirectUrl' can't be null";
        }
        if ($this->container['settlementStrategy'] === null) {
            $invalidProperties[] = "'settlementStrategy' can't be null";
        }
        if ($this->container['env'] === null) {
            $invalidProperties[] = "'env' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets productCode
     *
     * @return \request\model\ProductCodeType
     */
    public function getProductCode()
    {
        return $this->container['productCode'];
    }

    /**
     * Sets productCode
     *
     * @param \request\model\ProductCodeType $productCode productCode
     *
     * @return self
     */
    public function setProductCode($productCode)
    {
        $this->container['productCode'] = $productCode;

        return $this;
    }

    /**
     * Gets paymentRequestId
     *
     * @return string
     */
    public function getPaymentRequestId()
    {
        return $this->container['paymentRequestId'];
    }

    /**
     * Sets paymentRequestId
     *
     * @param string $paymentRequestId The unique ID assigned by a merchant to identify a payment request. Antom uses this field for idempotence control.  More information:  This field is an API idempotency field.For payment requests that are initiated with the same value of paymentRequestId and reach a final status of S or F, the same result is to be returned for the request. Maximum length: 64 characters
     *
     * @return self
     */
    public function setPaymentRequestId($paymentRequestId)
    {
        $this->container['paymentRequestId'] = $paymentRequestId;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \request\model\Order
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \request\model\Order $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets paymentAmount
     *
     * @return \request\model\Amount
     */
    public function getPaymentAmount()
    {
        return $this->container['paymentAmount'];
    }

    /**
     * Sets paymentAmount
     *
     * @param \request\model\Amount $paymentAmount paymentAmount
     *
     * @return self
     */
    public function setPaymentAmount($paymentAmount)
    {
        $this->container['paymentAmount'] = $paymentAmount;

        return $this;
    }

    /**
     * Gets paymentMethod
     *
     * @return \request\model\PaymentMethod
     */
    public function getPaymentMethod()
    {
        return $this->container['paymentMethod'];
    }

    /**
     * Sets paymentMethod
     *
     * @param \request\model\PaymentMethod $paymentMethod paymentMethod
     *
     * @return self
     */
    public function setPaymentMethod($paymentMethod)
    {
        $this->container['paymentMethod'] = $paymentMethod;

        return $this;
    }

    /**
     * Gets paymentExpiryTime
     *
     * @return string|null
     */
    public function getPaymentExpiryTime()
    {
        return $this->container['paymentExpiryTime'];
    }

    /**
     * Sets paymentExpiryTime
     *
     * @param string|null $paymentExpiryTime The payment expiration time is a specific time after which the payment will expire and the acquirer or merchant must terminate the order processing.   Notes:  For bank transfer payments, the default payment expiration time is 48 hours after the payment request is sent. For other payment categories, the default payment expiration time is usually 14 minutes after the payment request is sent. For example, if the request is sent on 2019-11-27T12:00:01+08:30, the payment expiration time is 2019-11-27T12:14:01+08:30. Specify this field if you want to use a payment expiration time that differs from the default time. For bank transfer payments, the specified payment expiration time must be less than 48 hours after the payment request is sent. For other payment categories, the specified payment expiration time must be less than 10 minutes after the payment request is sent. More information:  The value follows the ISO 8601 standard format. For example, \"2019-11-27T12:01:01+08:00\".
     *
     * @return self
     */
    public function setPaymentExpiryTime($paymentExpiryTime)
    {
        $this->container['paymentExpiryTime'] = $paymentExpiryTime;

        return $this;
    }

    /**
     * Gets paymentRedirectUrl
     *
     * @return string
     */
    public function getPaymentRedirectUrl()
    {
        return $this->container['paymentRedirectUrl'];
    }

    /**
     * Sets paymentRedirectUrl
     *
     * @param string $paymentRedirectUrl The merchant page URL that the user is redirected to after the payment is completed.  More information:  Maximum length: 2048 characters
     *
     * @return self
     */
    public function setPaymentRedirectUrl($paymentRedirectUrl)
    {
        $this->container['paymentRedirectUrl'] = $paymentRedirectUrl;

        return $this;
    }

    /**
     * Gets paymentNotifyUrl
     *
     * @return string|null
     */
    public function getPaymentNotifyUrl()
    {
        return $this->container['paymentNotifyUrl'];
    }

    /**
     * Sets paymentNotifyUrl
     *
     * @param string|null $paymentNotifyUrl The URL that is used to receive the payment result notification.  Note: Specify this parameter if you want to receive an asynchronous notification of the payment result. You can also set the URL to receive the result notification in Antom Dashboard. If the URL is specified in both the request and Antom Dashboard, the value specified in the request takes precedence.  More information:  Maximum length: 2048 characters
     *
     * @return self
     */
    public function setPaymentNotifyUrl($paymentNotifyUrl)
    {
        $this->container['paymentNotifyUrl'] = $paymentNotifyUrl;

        return $this;
    }

    /**
     * Gets paymentFactor
     *
     * @return \request\model\PaymentFactor|null
     */
    public function getPaymentFactor()
    {
        return $this->container['paymentFactor'];
    }

    /**
     * Sets paymentFactor
     *
     * @param \request\model\PaymentFactor|null $paymentFactor paymentFactor
     *
     * @return self
     */
    public function setPaymentFactor($paymentFactor)
    {
        $this->container['paymentFactor'] = $paymentFactor;

        return $this;
    }

    /**
     * Gets settlementStrategy
     *
     * @return \request\model\SettlementStrategy
     */
    public function getSettlementStrategy()
    {
        return $this->container['settlementStrategy'];
    }

    /**
     * Sets settlementStrategy
     *
     * @param \request\model\SettlementStrategy $settlementStrategy settlementStrategy
     *
     * @return self
     */
    public function setSettlementStrategy($settlementStrategy)
    {
        $this->container['settlementStrategy'] = $settlementStrategy;

        return $this;
    }

    /**
     * Gets creditPayPlan
     *
     * @return \request\model\CreditPayPlan|null
     */
    public function getCreditPayPlan()
    {
        return $this->container['creditPayPlan'];
    }

    /**
     * Sets creditPayPlan
     *
     * @param \request\model\CreditPayPlan|null $creditPayPlan creditPayPlan
     *
     * @return self
     */
    public function setCreditPayPlan($creditPayPlan)
    {
        $this->container['creditPayPlan'] = $creditPayPlan;

        return $this;
    }

    /**
     * Gets appId
     *
     * @return string|null
     */
    public function getAppId()
    {
        return $this->container['appId'];
    }

    /**
     * Sets appId
     *
     * @param string|null $appId The unique ID that is assigned by Antom to identify the mini program.  Note: This field is required when terminalType is MINI_APP.  More information:  Maximum length: 32 characters
     *
     * @return self
     */
    public function setAppId($appId)
    {
        $this->container['appId'] = $appId;

        return $this;
    }

    /**
     * Gets merchantRegion
     *
     * @return string|null
     */
    public function getMerchantRegion()
    {
        return $this->container['merchantRegion'];
    }

    /**
     * Sets merchantRegion
     *
     * @param string|null $merchantRegion The country or region where the merchant operates the business. The parameter is a 2-letter country or region code that follows ISO 3166 Country Codes standard.  Some possible values are US, SG, HK, PK, JP, CN, BR, AU, and MY.    Note: This parameter is required when you use the Global Acquirer Gateway (GAGW) product.  More information:  Maximum length: 2 characters
     *
     * @return self
     */
    public function setMerchantRegion($merchantRegion)
    {
        $this->container['merchantRegion'] = $merchantRegion;

        return $this;
    }

    /**
     * Gets userRegion
     *
     * @return string|null
     */
    public function getUserRegion()
    {
        return $this->container['userRegion'];
    }

    /**
     * Sets userRegion
     *
     * @param string|null $userRegion A 2-letter country or region code based on the standard of ISO 3166 Country Codes. This parameter is used to sort Alipay+ payment methods according to the user's region. For example, if ALIPAY_CN and KAKAOPAYare both on your payment method list and the user is from South Korea, KAKAOPAY will be listed first on the Alipay+ cashier page.  Note: This parameter is only for the merchant that has integrated the Alipay+ cashier page.    More information:  Maximum length: 2 characters
     *
     * @return self
     */
    public function setUserRegion($userRegion)
    {
        $this->container['userRegion'] = $userRegion;

        return $this;
    }

    /**
     * Gets env
     *
     * @return \request\model\Env
     */
    public function getEnv()
    {
        return $this->container['env'];
    }

    /**
     * Sets env
     *
     * @param \request\model\Env $env env
     *
     * @return self
     */
    public function setEnv($env)
    {
        $this->container['env'] = $env;

        return $this;
    }

    /**
     * Gets payToMethod
     *
     * @return \request\model\PaymentMethod|null
     */
    public function getPayToMethod()
    {
        return $this->container['payToMethod'];
    }

    /**
     * Sets payToMethod
     *
     * @param \request\model\PaymentMethod|null $payToMethod payToMethod
     *
     * @return self
     */
    public function setPayToMethod($payToMethod)
    {
        $this->container['payToMethod'] = $payToMethod;

        return $this;
    }

    /**
     * Gets isAuthorization
     *
     * @return bool|null
     */
    public function getIsAuthorization()
    {
        return $this->container['isAuthorization'];
    }

    /**
     * Sets isAuthorization
     *
     * @param bool|null $isAuthorization isAuthorization
     *
     * @return self
     */
    public function setIsAuthorization($isAuthorization)
    {
        $this->container['isAuthorization'] = $isAuthorization;

        return $this;
    }

    /**
     * Gets merchant
     *
     * @return \request\model\Merchant|null
     */
    public function getMerchant()
    {
        return $this->container['merchant'];
    }

    /**
     * Sets merchant
     *
     * @param \request\model\Merchant|null $merchant merchant
     *
     * @return self
     */
    public function setMerchant($merchant)
    {
        $this->container['merchant'] = $merchant;

        return $this;
    }

    /**
     * Gets paymentVerificationData
     *
     * @return \request\model\PaymentVerificationData|null
     */
    public function getPaymentVerificationData()
    {
        return $this->container['paymentVerificationData'];
    }

    /**
     * Sets paymentVerificationData
     *
     * @param \request\model\PaymentVerificationData|null $paymentVerificationData paymentVerificationData
     *
     * @return self
     */
    public function setPaymentVerificationData($paymentVerificationData)
    {
        $this->container['paymentVerificationData'] = $paymentVerificationData;

        return $this;
    }

    /**
     * Gets extendInfo
     *
     * @return string|null
     */
    public function getExtendInfo()
    {
        return $this->container['extendInfo'];
    }

    /**
     * Sets extendInfo
     *
     * @param string|null $extendInfo extendInfo
     *
     * @return self
     */
    public function setExtendInfo($extendInfo)
    {
        $this->container['extendInfo'] = $extendInfo;

        return $this;
    }

    /**
     * Gets merchantAccountId
     *
     * @return string|null
     */
    public function getMerchantAccountId()
    {
        return $this->container['merchantAccountId'];
    }

    /**
     * Sets merchantAccountId
     *
     * @param string|null $merchantAccountId The unique ID to identify a merchant account.  Note: Specify this parameter when you use a single client ID across multiple locations.  More information:  Maximum length: 32 characters
     *
     * @return self
     */
    public function setMerchantAccountId($merchantAccountId)
    {
        $this->container['merchantAccountId'] = $merchantAccountId;

        return $this;
    }

    /**
     * Gets dualOfflinePayment
     *
     * @return bool|null
     */
    public function getDualOfflinePayment()
    {
        return $this->container['dualOfflinePayment'];
    }

    /**
     * Sets dualOfflinePayment
     *
     * @param bool|null $dualOfflinePayment dualOfflinePayment
     *
     * @return self
     */
    public function setDualOfflinePayment($dualOfflinePayment)
    {
        $this->container['dualOfflinePayment'] = $dualOfflinePayment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    public function toArray(): array
    {
        $array = [];
        foreach (self::$openAPITypes as $propertyName => $propertyType) {
            $propertyValue = $this[$propertyName];
            if ($propertyValue !== null) {
                // Check if the property value is an object and has a toArray() method
                if (is_object($propertyValue) && method_exists($propertyValue, 'toArray')) {
                    $array[$propertyName] = $propertyValue->toArray();
                // Check if it's type datetime
                } elseif ($propertyValue instanceof \DateTime) {
                    $array[$propertyName] = $propertyValue->format(DATE_ATOM);
                // If it's an array type we should check whether it contains objects and if so call toArray method
                } elseif (is_array($propertyValue)) {
                    $array[$propertyName] = array_map(function ($item) {
                        return $item instanceof ModelInterface ? $item->toArray() : $item;
                    }, $propertyValue);
                } else {
                    // Otherwise, directly assign the property value to the array
                    $array[$propertyName] = $propertyValue;
                }
            }
        }
        return $array;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
