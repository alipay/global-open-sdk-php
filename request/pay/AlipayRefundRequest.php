<?php

/**
 * payments_refund
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Request\pay;

use \ArrayAccess;
use Request\AlipayRequest;
use Model\ModelInterface;
use Model\ObjectSerializer;

/**
 * AlipayRefundRequest Class Doc Comment
 *
 * @category Class
 * @package  request
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AlipayRefundRequest   extends AlipayRequest  implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AlipayRefundRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'refundRequestId' => 'string',
        'paymentId' => 'string',
        'referenceRefundId' => 'string',
        'refundAmount' => '\request\model\Amount',
        'refundReason' => 'string',
        'refundNotifyUrl' => 'string',
        'isAsyncRefund' => 'bool',
        'extendInfo' => 'string',
        'refundDetails' => '\request\model\RefundDetail[]',
        'refundSourceAccountNo' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'refundRequestId' => null,
        'paymentId' => null,
        'referenceRefundId' => null,
        'refundAmount' => null,
        'refundReason' => null,
        'refundNotifyUrl' => null,
        'isAsyncRefund' => null,
        'extendInfo' => null,
        'refundDetails' => null,
        'refundSourceAccountNo' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'refundRequestId' => false,
        'paymentId' => false,
        'referenceRefundId' => false,
        'refundAmount' => false,
        'refundReason' => false,
        'refundNotifyUrl' => false,
        'isAsyncRefund' => false,
        'extendInfo' => false,
        'refundDetails' => false,
        'refundSourceAccountNo' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'refundRequestId' => 'refundRequestId',
        'paymentId' => 'paymentId',
        'referenceRefundId' => 'referenceRefundId',
        'refundAmount' => 'refundAmount',
        'refundReason' => 'refundReason',
        'refundNotifyUrl' => 'refundNotifyUrl',
        'isAsyncRefund' => 'isAsyncRefund',
        'extendInfo' => 'extendInfo',
        'refundDetails' => 'refundDetails',
        'refundSourceAccountNo' => 'refundSourceAccountNo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'refundRequestId' => 'setRefundRequestId',
        'paymentId' => 'setPaymentId',
        'referenceRefundId' => 'setReferenceRefundId',
        'refundAmount' => 'setRefundAmount',
        'refundReason' => 'setRefundReason',
        'refundNotifyUrl' => 'setRefundNotifyUrl',
        'isAsyncRefund' => 'setIsAsyncRefund',
        'extendInfo' => 'setExtendInfo',
        'refundDetails' => 'setRefundDetails',
        'refundSourceAccountNo' => 'setRefundSourceAccountNo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'refundRequestId' => 'getRefundRequestId',
        'paymentId' => 'getPaymentId',
        'referenceRefundId' => 'getReferenceRefundId',
        'refundAmount' => 'getRefundAmount',
        'refundReason' => 'getRefundReason',
        'refundNotifyUrl' => 'getRefundNotifyUrl',
        'isAsyncRefund' => 'getIsAsyncRefund',
        'extendInfo' => 'getExtendInfo',
        'refundDetails' => 'getRefundDetails',
        'refundSourceAccountNo' => 'getRefundSourceAccountNo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('refundRequestId', $data ?? [], null);
        $this->setIfExists('paymentId', $data ?? [], null);
        $this->setIfExists('referenceRefundId', $data ?? [], null);
        $this->setIfExists('refundAmount', $data ?? [], null);
        $this->setIfExists('refundReason', $data ?? [], null);
        $this->setIfExists('refundNotifyUrl', $data ?? [], null);
        $this->setIfExists('isAsyncRefund', $data ?? [], null);
        $this->setIfExists('extendInfo', $data ?? [], null);
        $this->setIfExists('refundDetails', $data ?? [], null);
        $this->setIfExists('refundSourceAccountNo', $data ?? [], null);

         $this->setPath("/ams/api/v1/payments/refund"); 
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['refundRequestId'] === null) {
            $invalidProperties[] = "'refundRequestId' can't be null";
        }
        if ($this->container['paymentId'] === null) {
            $invalidProperties[] = "'paymentId' can't be null";
        }
        if ($this->container['refundAmount'] === null) {
            $invalidProperties[] = "'refundAmount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets refundRequestId
     *
     * @return string
     */
    public function getRefundRequestId()
    {
        return $this->container['refundRequestId'];
    }

    /**
     * Sets refundRequestId
     *
     * @param string $refundRequestId The unique ID assigned by the merchant to identify a refund request.  More information:  This field is an API idempotency field.The merchant uses the refundRequestId field for idempotency control. For payment requests that are initiated with the same value of refundRequestId and reach a final status (S or F), the same result is to be returned for the request. Maximum length: 64 characters
     *
     * @return self
     */
    public function setRefundRequestId($refundRequestId)
    {
        $this->container['refundRequestId'] = $refundRequestId;

        return $this;
    }

    /**
     * Gets paymentId
     *
     * @return string
     */
    public function getPaymentId()
    {
        return $this->container['paymentId'];
    }

    /**
     * Sets paymentId
     *
     * @param string $paymentId The unique ID assigned by Antom for the original payment to be refunded.  More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setPaymentId($paymentId)
    {
        $this->container['paymentId'] = $paymentId;

        return $this;
    }

    /**
     * Gets referenceRefundId
     *
     * @return string|null
     */
    public function getReferenceRefundId()
    {
        return $this->container['referenceRefundId'];
    }

    /**
     * Sets referenceRefundId
     *
     * @param string|null $referenceRefundId The unique ID to identify a refund, which is assigned by the merchant that directly provides services or goods to the customer.  Note: Specify this field if this value is needed for internal use or reconciliation.  More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setReferenceRefundId($referenceRefundId)
    {
        $this->container['referenceRefundId'] = $referenceRefundId;

        return $this;
    }

    /**
     * Gets refundAmount
     *
     * @return \request\model\Amount
     */
    public function getRefundAmount()
    {
        return $this->container['refundAmount'];
    }

    /**
     * Sets refundAmount
     *
     * @param \request\model\Amount $refundAmount refundAmount
     *
     * @return self
     */
    public function setRefundAmount($refundAmount)
    {
        $this->container['refundAmount'] = $refundAmount;

        return $this;
    }

    /**
     * Gets refundReason
     *
     * @return string|null
     */
    public function getRefundReason()
    {
        return $this->container['refundReason'];
    }

    /**
     * Sets refundReason
     *
     * @param string|null $refundReason The refund reason.  Note: Specify this field if you want to provide the refund reason to the user and payment method.  More information:  Maximum length: 256 characters
     *
     * @return self
     */
    public function setRefundReason($refundReason)
    {
        $this->container['refundReason'] = $refundReason;

        return $this;
    }

    /**
     * Gets refundNotifyUrl
     *
     * @return string|null
     */
    public function getRefundNotifyUrl()
    {
        return $this->container['refundNotifyUrl'];
    }

    /**
     * Sets refundNotifyUrl
     *
     * @param string|null $refundNotifyUrl The URL that is used to receive the refund result notification. The URL must be either specified in the request or set in Antom Dashboard.  Note: Specify this field if you want to receive an asynchronous notification of the refund result. If the refund notification URL is specified in both the request and Antom Dashboard, the value specified in the request takes precedence.  More information:  Maximum length: 1024 characters
     *
     * @return self
     */
    public function setRefundNotifyUrl($refundNotifyUrl)
    {
        $this->container['refundNotifyUrl'] = $refundNotifyUrl;

        return $this;
    }

    /**
     * Gets isAsyncRefund
     *
     * @return bool|null
     */
    public function getIsAsyncRefund()
    {
        return $this->container['isAsyncRefund'];
    }

    /**
     * Sets isAsyncRefund
     *
     * @param bool|null $isAsyncRefund isAsyncRefund
     *
     * @return self
     */
    public function setIsAsyncRefund($isAsyncRefund)
    {
        $this->container['isAsyncRefund'] = $isAsyncRefund;

        return $this;
    }

    /**
     * Gets extendInfo
     *
     * @return string|null
     */
    public function getExtendInfo()
    {
        return $this->container['extendInfo'];
    }

    /**
     * Sets extendInfo
     *
     * @param string|null $extendInfo extendInfo
     *
     * @return self
     */
    public function setExtendInfo($extendInfo)
    {
        $this->container['extendInfo'] = $extendInfo;

        return $this;
    }

    /**
     * Gets refundDetails
     *
     * @return \request\model\RefundDetail[]|null
     */
    public function getRefundDetails()
    {
        return $this->container['refundDetails'];
    }

    /**
     * Sets refundDetails
     *
     * @param \request\model\RefundDetail[]|null $refundDetails refundDetails
     *
     * @return self
     */
    public function setRefundDetails($refundDetails)
    {
        $this->container['refundDetails'] = $refundDetails;

        return $this;
    }

    /**
     * Gets refundSourceAccountNo
     *
     * @return string|null
     */
    public function getRefundSourceAccountNo()
    {
        return $this->container['refundSourceAccountNo'];
    }

    /**
     * Sets refundSourceAccountNo
     *
     * @param string|null $refundSourceAccountNo refundSourceAccountNo
     *
     * @return self
     */
    public function setRefundSourceAccountNo($refundSourceAccountNo)
    {
        $this->container['refundSourceAccountNo'] = $refundSourceAccountNo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    public function toArray(): array
    {
        $array = [];
        foreach (self::$openAPITypes as $propertyName => $propertyType) {
            $propertyValue = $this[$propertyName];
            if ($propertyValue !== null) {
                // Check if the property value is an object and has a toArray() method
                if (is_object($propertyValue) && method_exists($propertyValue, 'toArray')) {
                    $array[$propertyName] = $propertyValue->toArray();
                // Check if it's type datetime
                } elseif ($propertyValue instanceof \DateTime) {
                    $array[$propertyName] = $propertyValue->format(DATE_ATOM);
                // If it's an array type we should check whether it contains objects and if so call toArray method
                } elseif (is_array($propertyValue)) {
                    $array[$propertyName] = array_map(function ($item) {
                        return $item instanceof ModelInterface ? $item->toArray() : $item;
                    }, $propertyValue);
                } else {
                    // Otherwise, directly assign the property value to the array
                    $array[$propertyName] = $propertyValue;
                }
            }
        }
        return $array;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
