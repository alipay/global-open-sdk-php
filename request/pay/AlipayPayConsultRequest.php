<?php

/**
 * Payment API
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Request\pay;

use \ArrayAccess;
use Request\AlipayRequest;
use Model\ModelInterface;
use Model\ObjectSerializer;

/**
 * AlipayPayConsultRequest Class Doc Comment
 *
 * @category Class
 * @package  request
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AlipayPayConsultRequest   extends AlipayRequest  implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AlipayPayConsultRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'productCode' => '\request\model\ProductCodeType',
        'paymentAmount' => '\request\model\Amount',
        'merchantRegion' => 'string',
        'allowedPaymentMethodRegions' => 'string[]',
        'allowedPaymentMethods' => 'string[]',
        'blockedPaymentMethods' => 'string[]',
        'region' => 'string',
        'customerId' => 'string',
        'referenceUserId' => 'string',
        'env' => '\request\model\Env',
        'extendInfo' => 'string',
        'userRegion' => 'string',
        'paymentFactor' => '\request\model\PaymentFactor',
        'settlementStrategy' => '\request\model\SettlementStrategy',
        'merchant' => '\request\model\Merchant',
        'allowedPspRegions' => 'string[]',
        'buyer' => '\request\model\Buyer',
        'merchantAccountId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'productCode' => null,
        'paymentAmount' => null,
        'merchantRegion' => null,
        'allowedPaymentMethodRegions' => null,
        'allowedPaymentMethods' => null,
        'blockedPaymentMethods' => null,
        'region' => null,
        'customerId' => null,
        'referenceUserId' => null,
        'env' => null,
        'extendInfo' => null,
        'userRegion' => null,
        'paymentFactor' => null,
        'settlementStrategy' => null,
        'merchant' => null,
        'allowedPspRegions' => null,
        'buyer' => null,
        'merchantAccountId' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'productCode' => false,
        'paymentAmount' => false,
        'merchantRegion' => false,
        'allowedPaymentMethodRegions' => false,
        'allowedPaymentMethods' => false,
        'blockedPaymentMethods' => false,
        'region' => false,
        'customerId' => false,
        'referenceUserId' => false,
        'env' => false,
        'extendInfo' => false,
        'userRegion' => false,
        'paymentFactor' => false,
        'settlementStrategy' => false,
        'merchant' => false,
        'allowedPspRegions' => false,
        'buyer' => false,
        'merchantAccountId' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'productCode' => 'productCode',
        'paymentAmount' => 'paymentAmount',
        'merchantRegion' => 'merchantRegion',
        'allowedPaymentMethodRegions' => 'allowedPaymentMethodRegions',
        'allowedPaymentMethods' => 'allowedPaymentMethods',
        'blockedPaymentMethods' => 'blockedPaymentMethods',
        'region' => 'region',
        'customerId' => 'customerId',
        'referenceUserId' => 'referenceUserId',
        'env' => 'env',
        'extendInfo' => 'extendInfo',
        'userRegion' => 'userRegion',
        'paymentFactor' => 'paymentFactor',
        'settlementStrategy' => 'settlementStrategy',
        'merchant' => 'merchant',
        'allowedPspRegions' => 'allowedPspRegions',
        'buyer' => 'buyer',
        'merchantAccountId' => 'merchantAccountId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'productCode' => 'setProductCode',
        'paymentAmount' => 'setPaymentAmount',
        'merchantRegion' => 'setMerchantRegion',
        'allowedPaymentMethodRegions' => 'setAllowedPaymentMethodRegions',
        'allowedPaymentMethods' => 'setAllowedPaymentMethods',
        'blockedPaymentMethods' => 'setBlockedPaymentMethods',
        'region' => 'setRegion',
        'customerId' => 'setCustomerId',
        'referenceUserId' => 'setReferenceUserId',
        'env' => 'setEnv',
        'extendInfo' => 'setExtendInfo',
        'userRegion' => 'setUserRegion',
        'paymentFactor' => 'setPaymentFactor',
        'settlementStrategy' => 'setSettlementStrategy',
        'merchant' => 'setMerchant',
        'allowedPspRegions' => 'setAllowedPspRegions',
        'buyer' => 'setBuyer',
        'merchantAccountId' => 'setMerchantAccountId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'productCode' => 'getProductCode',
        'paymentAmount' => 'getPaymentAmount',
        'merchantRegion' => 'getMerchantRegion',
        'allowedPaymentMethodRegions' => 'getAllowedPaymentMethodRegions',
        'allowedPaymentMethods' => 'getAllowedPaymentMethods',
        'blockedPaymentMethods' => 'getBlockedPaymentMethods',
        'region' => 'getRegion',
        'customerId' => 'getCustomerId',
        'referenceUserId' => 'getReferenceUserId',
        'env' => 'getEnv',
        'extendInfo' => 'getExtendInfo',
        'userRegion' => 'getUserRegion',
        'paymentFactor' => 'getPaymentFactor',
        'settlementStrategy' => 'getSettlementStrategy',
        'merchant' => 'getMerchant',
        'allowedPspRegions' => 'getAllowedPspRegions',
        'buyer' => 'getBuyer',
        'merchantAccountId' => 'getMerchantAccountId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('productCode', $data ?? [], null);
        $this->setIfExists('paymentAmount', $data ?? [], null);
        $this->setIfExists('merchantRegion', $data ?? [], null);
        $this->setIfExists('allowedPaymentMethodRegions', $data ?? [], null);
        $this->setIfExists('allowedPaymentMethods', $data ?? [], null);
        $this->setIfExists('blockedPaymentMethods', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('customerId', $data ?? [], null);
        $this->setIfExists('referenceUserId', $data ?? [], null);
        $this->setIfExists('env', $data ?? [], null);
        $this->setIfExists('extendInfo', $data ?? [], null);
        $this->setIfExists('userRegion', $data ?? [], null);
        $this->setIfExists('paymentFactor', $data ?? [], null);
        $this->setIfExists('settlementStrategy', $data ?? [], null);
        $this->setIfExists('merchant', $data ?? [], null);
        $this->setIfExists('allowedPspRegions', $data ?? [], null);
        $this->setIfExists('buyer', $data ?? [], null);
        $this->setIfExists('merchantAccountId', $data ?? [], null);

         $this->setPath("/ams/api/v1/payments/consult"); 
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['productCode'] === null) {
            $invalidProperties[] = "'productCode' can't be null";
        }
        if ($this->container['paymentAmount'] === null) {
            $invalidProperties[] = "'paymentAmount' can't be null";
        }
        if ($this->container['env'] === null) {
            $invalidProperties[] = "'env' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets productCode
     *
     * @return \request\model\ProductCodeType
     */
    public function getProductCode()
    {
        return $this->container['productCode'];
    }

    /**
     * Sets productCode
     *
     * @param \request\model\ProductCodeType $productCode productCode
     *
     * @return self
     */
    public function setProductCode($productCode)
    {
        $this->container['productCode'] = $productCode;

        return $this;
    }

    /**
     * Gets paymentAmount
     *
     * @return \request\model\Amount
     */
    public function getPaymentAmount()
    {
        return $this->container['paymentAmount'];
    }

    /**
     * Sets paymentAmount
     *
     * @param \request\model\Amount $paymentAmount paymentAmount
     *
     * @return self
     */
    public function setPaymentAmount($paymentAmount)
    {
        $this->container['paymentAmount'] = $paymentAmount;

        return $this;
    }

    /**
     * Gets merchantRegion
     *
     * @return string|null
     */
    public function getMerchantRegion()
    {
        return $this->container['merchantRegion'];
    }

    /**
     * Sets merchantRegion
     *
     * @param string|null $merchantRegion The country or region where the merchant operates the business. The parameter is a 2-letter country or region code that follows ISO 3166 Country Codes standard.  Some possible values are US, SG, HK, PK, JP, CN, BR, AU, and MY.    Note: This parameter is required when you use the Global Acquirer Gateway (GAGW) product.  More information:  Maximum length: 2 characters
     *
     * @return self
     */
    public function setMerchantRegion($merchantRegion)
    {
        $this->container['merchantRegion'] = $merchantRegion;

        return $this;
    }

    /**
     * Gets allowedPaymentMethodRegions
     *
     * @return string[]|null
     */
    public function getAllowedPaymentMethodRegions()
    {
        return $this->container['allowedPaymentMethodRegions'];
    }

    /**
     * Sets allowedPaymentMethodRegions
     *
     * @param string[]|null $allowedPaymentMethodRegions A list of region codes that represent the countries or regions of payment methods. The value of this parameter is a 2-letter ISO country code or GLOBAL.   Note: Specify this parameter if you want available payment methods from specific regions to be returned. For example, if you pass in GLOBAL, global cards Visa and Mastercard are returned.    More information:  Maximum length: 6 characters
     *
     * @return self
     */
    public function setAllowedPaymentMethodRegions($allowedPaymentMethodRegions)
    {
        $this->container['allowedPaymentMethodRegions'] = $allowedPaymentMethodRegions;

        return $this;
    }

    /**
     * Gets allowedPaymentMethods
     *
     * @return string[]|null
     */
    public function getAllowedPaymentMethods()
    {
        return $this->container['allowedPaymentMethods'];
    }

    /**
     * Sets allowedPaymentMethods
     *
     * @param string[]|null $allowedPaymentMethods allowedPaymentMethods
     *
     * @return self
     */
    public function setAllowedPaymentMethods($allowedPaymentMethods)
    {
        $this->container['allowedPaymentMethods'] = $allowedPaymentMethods;

        return $this;
    }

    /**
     * Gets blockedPaymentMethods
     *
     * @return string[]|null
     */
    public function getBlockedPaymentMethods()
    {
        return $this->container['blockedPaymentMethods'];
    }

    /**
     * Sets blockedPaymentMethods
     *
     * @param string[]|null $blockedPaymentMethods blockedPaymentMethods
     *
     * @return self
     */
    public function setBlockedPaymentMethods($blockedPaymentMethods)
    {
        $this->container['blockedPaymentMethods'] = $blockedPaymentMethods;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region region
     *
     * @return self
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets customerId
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId
     *
     * @param string|null $customerId customerId
     *
     * @return self
     */
    public function setCustomerId($customerId)
    {
        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets referenceUserId
     *
     * @return string|null
     */
    public function getReferenceUserId()
    {
        return $this->container['referenceUserId'];
    }

    /**
     * Sets referenceUserId
     *
     * @param string|null $referenceUserId referenceUserId
     *
     * @return self
     */
    public function setReferenceUserId($referenceUserId)
    {
        $this->container['referenceUserId'] = $referenceUserId;

        return $this;
    }

    /**
     * Gets env
     *
     * @return \request\model\Env
     */
    public function getEnv()
    {
        return $this->container['env'];
    }

    /**
     * Sets env
     *
     * @param \request\model\Env $env env
     *
     * @return self
     */
    public function setEnv($env)
    {
        $this->container['env'] = $env;

        return $this;
    }

    /**
     * Gets extendInfo
     *
     * @return string|null
     */
    public function getExtendInfo()
    {
        return $this->container['extendInfo'];
    }

    /**
     * Sets extendInfo
     *
     * @param string|null $extendInfo extendInfo
     *
     * @return self
     */
    public function setExtendInfo($extendInfo)
    {
        $this->container['extendInfo'] = $extendInfo;

        return $this;
    }

    /**
     * Gets userRegion
     *
     * @return string|null
     */
    public function getUserRegion()
    {
        return $this->container['userRegion'];
    }

    /**
     * Sets userRegion
     *
     * @param string|null $userRegion The 2-letter country or region code. For more information, see ISO 3166 Country Codes standard. The payment methods will be sorted based on payment method relevance for the given user's region.   More information:  Maximum length: 2 characters
     *
     * @return self
     */
    public function setUserRegion($userRegion)
    {
        $this->container['userRegion'] = $userRegion;

        return $this;
    }

    /**
     * Gets paymentFactor
     *
     * @return \request\model\PaymentFactor|null
     */
    public function getPaymentFactor()
    {
        return $this->container['paymentFactor'];
    }

    /**
     * Sets paymentFactor
     *
     * @param \request\model\PaymentFactor|null $paymentFactor paymentFactor
     *
     * @return self
     */
    public function setPaymentFactor($paymentFactor)
    {
        $this->container['paymentFactor'] = $paymentFactor;

        return $this;
    }

    /**
     * Gets settlementStrategy
     *
     * @return \request\model\SettlementStrategy|null
     */
    public function getSettlementStrategy()
    {
        return $this->container['settlementStrategy'];
    }

    /**
     * Sets settlementStrategy
     *
     * @param \request\model\SettlementStrategy|null $settlementStrategy settlementStrategy
     *
     * @return self
     */
    public function setSettlementStrategy($settlementStrategy)
    {
        $this->container['settlementStrategy'] = $settlementStrategy;

        return $this;
    }

    /**
     * Gets merchant
     *
     * @return \request\model\Merchant|null
     */
    public function getMerchant()
    {
        return $this->container['merchant'];
    }

    /**
     * Sets merchant
     *
     * @param \request\model\Merchant|null $merchant merchant
     *
     * @return self
     */
    public function setMerchant($merchant)
    {
        $this->container['merchant'] = $merchant;

        return $this;
    }

    /**
     * Gets allowedPspRegions
     *
     * @return string[]|null
     */
    public function getAllowedPspRegions()
    {
        return $this->container['allowedPspRegions'];
    }

    /**
     * Sets allowedPspRegions
     *
     * @param string[]|null $allowedPspRegions allowedPspRegions
     *
     * @return self
     */
    public function setAllowedPspRegions($allowedPspRegions)
    {
        $this->container['allowedPspRegions'] = $allowedPspRegions;

        return $this;
    }

    /**
     * Gets buyer
     *
     * @return \request\model\Buyer|null
     */
    public function getBuyer()
    {
        return $this->container['buyer'];
    }

    /**
     * Sets buyer
     *
     * @param \request\model\Buyer|null $buyer buyer
     *
     * @return self
     */
    public function setBuyer($buyer)
    {
        $this->container['buyer'] = $buyer;

        return $this;
    }

    /**
     * Gets merchantAccountId
     *
     * @return string|null
     */
    public function getMerchantAccountId()
    {
        return $this->container['merchantAccountId'];
    }

    /**
     * Sets merchantAccountId
     *
     * @param string|null $merchantAccountId The unique ID to identify a merchant account.  Note: Specify this parameter when you use a single client ID across multiple locations.  More information:  Maximum length: 32 characters
     *
     * @return self
     */
    public function setMerchantAccountId($merchantAccountId)
    {
        $this->container['merchantAccountId'] = $merchantAccountId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    public function toArray(): array
    {
        $array = [];
        foreach (self::$openAPITypes as $propertyName => $propertyType) {
            $propertyValue = $this[$propertyName];
            if ($propertyValue !== null) {
                // Check if the property value is an object and has a toArray() method
                if (is_object($propertyValue) && method_exists($propertyValue, 'toArray')) {
                    $array[$propertyName] = $propertyValue->toArray();
                // Check if it's type datetime
                } elseif ($propertyValue instanceof \DateTime) {
                    $array[$propertyName] = $propertyValue->format(DATE_ATOM);
                // If it's an array type we should check whether it contains objects and if so call toArray method
                } elseif (is_array($propertyValue)) {
                    $array[$propertyName] = array_map(function ($item) {
                        return $item instanceof ModelInterface ? $item->toArray() : $item;
                    }, $propertyValue);
                } else {
                    // Otherwise, directly assign the property value to the array
                    $array[$propertyName] = $propertyValue;
                }
            }
        }
        return $array;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
