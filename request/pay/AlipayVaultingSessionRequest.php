<?php

/**
 * vaults_createVaultingSession
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Request\pay;

use \ArrayAccess;
use Request\AlipayRequest;
use Model\ModelInterface;
use Model\ObjectSerializer;

/**
 * AlipayVaultingSessionRequest Class Doc Comment
 *
 * @category Class
 * @package  request
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AlipayVaultingSessionRequest   extends AlipayRequest  implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AlipayVaultingSessionRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'paymentMethodType' => 'string',
        'vaultingRequestId' => 'string',
        'vaultingNotificationUrl' => 'string',
        'redirectUrl' => 'string',
        'merchantRegion' => 'string',
        'is3DSAuthentication' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'paymentMethodType' => null,
        'vaultingRequestId' => null,
        'vaultingNotificationUrl' => null,
        'redirectUrl' => null,
        'merchantRegion' => null,
        'is3DSAuthentication' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'paymentMethodType' => false,
        'vaultingRequestId' => false,
        'vaultingNotificationUrl' => false,
        'redirectUrl' => false,
        'merchantRegion' => false,
        'is3DSAuthentication' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'paymentMethodType' => 'paymentMethodType',
        'vaultingRequestId' => 'vaultingRequestId',
        'vaultingNotificationUrl' => 'vaultingNotificationUrl',
        'redirectUrl' => 'redirectUrl',
        'merchantRegion' => 'merchantRegion',
        'is3DSAuthentication' => 'is3DSAuthentication'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'paymentMethodType' => 'setPaymentMethodType',
        'vaultingRequestId' => 'setVaultingRequestId',
        'vaultingNotificationUrl' => 'setVaultingNotificationUrl',
        'redirectUrl' => 'setRedirectUrl',
        'merchantRegion' => 'setMerchantRegion',
        'is3DSAuthentication' => 'setIs3DSAuthentication'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'paymentMethodType' => 'getPaymentMethodType',
        'vaultingRequestId' => 'getVaultingRequestId',
        'vaultingNotificationUrl' => 'getVaultingNotificationUrl',
        'redirectUrl' => 'getRedirectUrl',
        'merchantRegion' => 'getMerchantRegion',
        'is3DSAuthentication' => 'getIs3DSAuthentication'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('paymentMethodType', $data ?? [], null);
        $this->setIfExists('vaultingRequestId', $data ?? [], null);
        $this->setIfExists('vaultingNotificationUrl', $data ?? [], null);
        $this->setIfExists('redirectUrl', $data ?? [], null);
        $this->setIfExists('merchantRegion', $data ?? [], null);
        $this->setIfExists('is3DSAuthentication', $data ?? [], null);

         $this->setPath("/ams/api/v1/vaults/createVaultingSession"); 
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['paymentMethodType'] === null) {
            $invalidProperties[] = "'paymentMethodType' can't be null";
        }
        if ($this->container['vaultingRequestId'] === null) {
            $invalidProperties[] = "'vaultingRequestId' can't be null";
        }
        if ($this->container['vaultingNotificationUrl'] === null) {
            $invalidProperties[] = "'vaultingNotificationUrl' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets paymentMethodType
     *
     * @return string
     */
    public function getPaymentMethodType()
    {
        return $this->container['paymentMethodType'];
    }

    /**
     * Sets paymentMethodType
     *
     * @param string $paymentMethodType The payment method type is included in payment method options. See Payment methods to check the valid values for card payments.    More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setPaymentMethodType($paymentMethodType)
    {
        $this->container['paymentMethodType'] = $paymentMethodType;

        return $this;
    }

    /**
     * Gets vaultingRequestId
     *
     * @return string
     */
    public function getVaultingRequestId()
    {
        return $this->container['vaultingRequestId'];
    }

    /**
     * Sets vaultingRequestId
     *
     * @param string $vaultingRequestId The unique ID that is assigned by a merchant to identify a card vaulting request.   More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setVaultingRequestId($vaultingRequestId)
    {
        $this->container['vaultingRequestId'] = $vaultingRequestId;

        return $this;
    }

    /**
     * Gets vaultingNotificationUrl
     *
     * @return string
     */
    public function getVaultingNotificationUrl()
    {
        return $this->container['vaultingNotificationUrl'];
    }

    /**
     * Sets vaultingNotificationUrl
     *
     * @param string $vaultingNotificationUrl The URL that is used to receive the vaulting result notification.   More information:  Maximum length: 2048 characters
     *
     * @return self
     */
    public function setVaultingNotificationUrl($vaultingNotificationUrl)
    {
        $this->container['vaultingNotificationUrl'] = $vaultingNotificationUrl;

        return $this;
    }

    /**
     * Gets redirectUrl
     *
     * @return string|null
     */
    public function getRedirectUrl()
    {
        return $this->container['redirectUrl'];
    }

    /**
     * Sets redirectUrl
     *
     * @param string|null $redirectUrl The merchant page URL that the buyer is redirected to after the vaulting is completed.   Note: Specify this parameter if you want to redirect the buyer to your page directly after the vaulting is completed.  More information:  Maximum length: 2048 characters
     *
     * @return self
     */
    public function setRedirectUrl($redirectUrl)
    {
        $this->container['redirectUrl'] = $redirectUrl;

        return $this;
    }

    /**
     * Gets merchantRegion
     *
     * @return string|null
     */
    public function getMerchantRegion()
    {
        return $this->container['merchantRegion'];
    }

    /**
     * Sets merchantRegion
     *
     * @param string|null $merchantRegion The country or region where the merchant operates the business. The value of this parameter is a 2-letter country or region code based on the ISO 3166 Country Codes standard.  Some possible values are US, SG, HK, PK, JP, CN, BR, AU, and MY.  Note: Specify this parameter when you use the Global Acquirer Gateway (GAGW) product.  More information:  Maximum length: 2 characters
     *
     * @return self
     */
    public function setMerchantRegion($merchantRegion)
    {
        $this->container['merchantRegion'] = $merchantRegion;

        return $this;
    }

    /**
     * Gets is3DSAuthentication
     *
     * @return bool|null
     */
    public function getIs3DSAuthentication()
    {
        return $this->container['is3DSAuthentication'];
    }

    /**
     * Sets is3DSAuthentication
     *
     * @param bool|null $is3DSAuthentication Indicates whether the transaction authentication type is 3D secure. Specify this parameter when the value of paymentMethodType is CARD.
     *
     * @return self
     */
    public function setIs3DSAuthentication($is3DSAuthentication)
    {
        $this->container['is3DSAuthentication'] = $is3DSAuthentication;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    public function toArray(): array
    {
        $array = [];
        foreach (self::$openAPITypes as $propertyName => $propertyType) {
            $propertyValue = $this[$propertyName];
            if ($propertyValue !== null) {
                // Check if the property value is an object and has a toArray() method
                if (is_object($propertyValue) && method_exists($propertyValue, 'toArray')) {
                    $array[$propertyName] = $propertyValue->toArray();
                // Check if it's type datetime
                } elseif ($propertyValue instanceof \DateTime) {
                    $array[$propertyName] = $propertyValue->format(DATE_ATOM);
                // If it's an array type we should check whether it contains objects and if so call toArray method
                } elseif (is_array($propertyValue)) {
                    $array[$propertyName] = array_map(function ($item) {
                        return $item instanceof ModelInterface ? $item->toArray() : $item;
                    }, $propertyValue);
                } else {
                    // Otherwise, directly assign the property value to the array
                    $array[$propertyName] = $propertyValue;
                }
            }
        }
        return $array;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
