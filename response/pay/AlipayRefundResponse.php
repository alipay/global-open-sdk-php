<?php

/**
 * payments_refund
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Response\pay;

use \ArrayAccess;
use Request\AlipayRequest;
use Model\ModelInterface;
use Model\ObjectSerializer;

/**
 * AlipayRefundResponse Class Doc Comment
 *
 * @category Class
 * @package  request
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AlipayRefundResponse  implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AlipayRefundResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'result' => '\request\model\Result',
        'refundRequestId' => 'string',
        'refundId' => 'string',
        'paymentId' => 'string',
        'refundAmount' => '\request\model\Amount',
        'refundTime' => 'string',
        'refundNonGuaranteeCouponAmount' => '\request\model\Amount',
        'grossSettlementAmount' => '\request\model\Amount',
        'settlementQuote' => '\request\model\Quote',
        'acquirerInfo' => '\request\model\AcquirerInfo',
        'acquirerReferenceNo' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'result' => null,
        'refundRequestId' => null,
        'refundId' => null,
        'paymentId' => null,
        'refundAmount' => null,
        'refundTime' => null,
        'refundNonGuaranteeCouponAmount' => null,
        'grossSettlementAmount' => null,
        'settlementQuote' => null,
        'acquirerInfo' => null,
        'acquirerReferenceNo' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'result' => false,
        'refundRequestId' => false,
        'refundId' => false,
        'paymentId' => false,
        'refundAmount' => false,
        'refundTime' => false,
        'refundNonGuaranteeCouponAmount' => false,
        'grossSettlementAmount' => false,
        'settlementQuote' => false,
        'acquirerInfo' => false,
        'acquirerReferenceNo' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'result' => 'result',
        'refundRequestId' => 'refundRequestId',
        'refundId' => 'refundId',
        'paymentId' => 'paymentId',
        'refundAmount' => 'refundAmount',
        'refundTime' => 'refundTime',
        'refundNonGuaranteeCouponAmount' => 'refundNonGuaranteeCouponAmount',
        'grossSettlementAmount' => 'grossSettlementAmount',
        'settlementQuote' => 'settlementQuote',
        'acquirerInfo' => 'acquirerInfo',
        'acquirerReferenceNo' => 'acquirerReferenceNo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'result' => 'setResult',
        'refundRequestId' => 'setRefundRequestId',
        'refundId' => 'setRefundId',
        'paymentId' => 'setPaymentId',
        'refundAmount' => 'setRefundAmount',
        'refundTime' => 'setRefundTime',
        'refundNonGuaranteeCouponAmount' => 'setRefundNonGuaranteeCouponAmount',
        'grossSettlementAmount' => 'setGrossSettlementAmount',
        'settlementQuote' => 'setSettlementQuote',
        'acquirerInfo' => 'setAcquirerInfo',
        'acquirerReferenceNo' => 'setAcquirerReferenceNo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'result' => 'getResult',
        'refundRequestId' => 'getRefundRequestId',
        'refundId' => 'getRefundId',
        'paymentId' => 'getPaymentId',
        'refundAmount' => 'getRefundAmount',
        'refundTime' => 'getRefundTime',
        'refundNonGuaranteeCouponAmount' => 'getRefundNonGuaranteeCouponAmount',
        'grossSettlementAmount' => 'getGrossSettlementAmount',
        'settlementQuote' => 'getSettlementQuote',
        'acquirerInfo' => 'getAcquirerInfo',
        'acquirerReferenceNo' => 'getAcquirerReferenceNo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('result', $data ?? [], null);
        $this->setIfExists('refundRequestId', $data ?? [], null);
        $this->setIfExists('refundId', $data ?? [], null);
        $this->setIfExists('paymentId', $data ?? [], null);
        $this->setIfExists('refundAmount', $data ?? [], null);
        $this->setIfExists('refundTime', $data ?? [], null);
        $this->setIfExists('refundNonGuaranteeCouponAmount', $data ?? [], null);
        $this->setIfExists('grossSettlementAmount', $data ?? [], null);
        $this->setIfExists('settlementQuote', $data ?? [], null);
        $this->setIfExists('acquirerInfo', $data ?? [], null);
        $this->setIfExists('acquirerReferenceNo', $data ?? [], null);

            }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['result'] === null) {
            $invalidProperties[] = "'result' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets result
     *
     * @return \request\model\Result
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param \request\model\Result $result result
     *
     * @return self
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets refundRequestId
     *
     * @return string|null
     */
    public function getRefundRequestId()
    {
        return $this->container['refundRequestId'];
    }

    /**
     * Sets refundRequestId
     *
     * @param string|null $refundRequestId The unique ID that is assigned by the merchant to identify a refund request.  Note: This field is returned when the refund succeeds (the value of result.resultStatus is S).  More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setRefundRequestId($refundRequestId)
    {
        $this->container['refundRequestId'] = $refundRequestId;

        return $this;
    }

    /**
     * Gets refundId
     *
     * @return string|null
     */
    public function getRefundId()
    {
        return $this->container['refundId'];
    }

    /**
     * Sets refundId
     *
     * @param string|null $refundId The unique ID that is assigned by Antom to identify a refund. A one-to-one correspondence between refundId and refundRequestId exists.   Note: This field is returned when the refund succeeds (the value of result.resultStatus is S).  More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setRefundId($refundId)
    {
        $this->container['refundId'] = $refundId;

        return $this;
    }

    /**
     * Gets paymentId
     *
     * @return string|null
     */
    public function getPaymentId()
    {
        return $this->container['paymentId'];
    }

    /**
     * Sets paymentId
     *
     * @param string|null $paymentId The unique ID assigned by Antom for the original payment to be refunded.  Note: This field is returned when the refund succeeds (the value of result.resultStatus is S).  More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setPaymentId($paymentId)
    {
        $this->container['paymentId'] = $paymentId;

        return $this;
    }

    /**
     * Gets refundAmount
     *
     * @return \request\model\Amount|null
     */
    public function getRefundAmount()
    {
        return $this->container['refundAmount'];
    }

    /**
     * Sets refundAmount
     *
     * @param \request\model\Amount|null $refundAmount refundAmount
     *
     * @return self
     */
    public function setRefundAmount($refundAmount)
    {
        $this->container['refundAmount'] = $refundAmount;

        return $this;
    }

    /**
     * Gets refundTime
     *
     * @return string|null
     */
    public function getRefundTime()
    {
        return $this->container['refundTime'];
    }

    /**
     * Sets refundTime
     *
     * @param string|null $refundTime The date and time when the refund reaches the state of success, failure, or unknown.  More information:  The value follows the ISO 8601 standard format. For example, \"2019-11-27T12:01:01+08:00\".
     *
     * @return self
     */
    public function setRefundTime($refundTime)
    {
        $this->container['refundTime'] = $refundTime;

        return $this;
    }

    /**
     * Gets refundNonGuaranteeCouponAmount
     *
     * @return \request\model\Amount|null
     */
    public function getRefundNonGuaranteeCouponAmount()
    {
        return $this->container['refundNonGuaranteeCouponAmount'];
    }

    /**
     * Sets refundNonGuaranteeCouponAmount
     *
     * @param \request\model\Amount|null $refundNonGuaranteeCouponAmount refundNonGuaranteeCouponAmount
     *
     * @return self
     */
    public function setRefundNonGuaranteeCouponAmount($refundNonGuaranteeCouponAmount)
    {
        $this->container['refundNonGuaranteeCouponAmount'] = $refundNonGuaranteeCouponAmount;

        return $this;
    }

    /**
     * Gets grossSettlementAmount
     *
     * @return \request\model\Amount|null
     */
    public function getGrossSettlementAmount()
    {
        return $this->container['grossSettlementAmount'];
    }

    /**
     * Sets grossSettlementAmount
     *
     * @param \request\model\Amount|null $grossSettlementAmount grossSettlementAmount
     *
     * @return self
     */
    public function setGrossSettlementAmount($grossSettlementAmount)
    {
        $this->container['grossSettlementAmount'] = $grossSettlementAmount;

        return $this;
    }

    /**
     * Gets settlementQuote
     *
     * @return \request\model\Quote|null
     */
    public function getSettlementQuote()
    {
        return $this->container['settlementQuote'];
    }

    /**
     * Sets settlementQuote
     *
     * @param \request\model\Quote|null $settlementQuote settlementQuote
     *
     * @return self
     */
    public function setSettlementQuote($settlementQuote)
    {
        $this->container['settlementQuote'] = $settlementQuote;

        return $this;
    }

    /**
     * Gets acquirerInfo
     *
     * @return \request\model\AcquirerInfo|null
     */
    public function getAcquirerInfo()
    {
        return $this->container['acquirerInfo'];
    }

    /**
     * Sets acquirerInfo
     *
     * @param \request\model\AcquirerInfo|null $acquirerInfo acquirerInfo
     *
     * @return self
     */
    public function setAcquirerInfo($acquirerInfo)
    {
        $this->container['acquirerInfo'] = $acquirerInfo;

        return $this;
    }

    /**
     * Gets acquirerReferenceNo
     *
     * @return string|null
     */
    public function getAcquirerReferenceNo()
    {
        return $this->container['acquirerReferenceNo'];
    }

    /**
     * Sets acquirerReferenceNo
     *
     * @param string|null $acquirerReferenceNo The unique ID assigned by the non-Antom acquirer for the transaction.  More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setAcquirerReferenceNo($acquirerReferenceNo)
    {
        $this->container['acquirerReferenceNo'] = $acquirerReferenceNo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    public function toArray(): array
    {
        $array = [];
        foreach (self::$openAPITypes as $propertyName => $propertyType) {
            $propertyValue = $this[$propertyName];
            if ($propertyValue !== null) {
                // Check if the property value is an object and has a toArray() method
                if (is_object($propertyValue) && method_exists($propertyValue, 'toArray')) {
                    $array[$propertyName] = $propertyValue->toArray();
                // Check if it's type datetime
                } elseif ($propertyValue instanceof \DateTime) {
                    $array[$propertyName] = $propertyValue->format(DATE_ATOM);
                // If it's an array type we should check whether it contains objects and if so call toArray method
                } elseif (is_array($propertyValue)) {
                    $array[$propertyName] = array_map(function ($item) {
                        return $item instanceof ModelInterface ? $item->toArray() : $item;
                    }, $propertyValue);
                } else {
                    // Otherwise, directly assign the property value to the array
                    $array[$propertyName] = $propertyValue;
                }
            }
        }
        return $array;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
