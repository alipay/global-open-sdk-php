<?php

/**
 * payments_ inquiryPayment
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Response\pay;

use \ArrayAccess;
use Request\AlipayRequest;
use Model\ModelInterface;
use Model\ObjectSerializer;

/**
 * AlipayPayQueryResponse Class Doc Comment
 *
 * @category Class
 * @package  request
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AlipayPayQueryResponse  implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AlipayPayQueryResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'result' => '\request\model\Result',
        'paymentStatus' => '\request\model\TransactionStatusType',
        'paymentResultCode' => 'string',
        'paymentResultMessage' => 'string',
        'paymentRequestId' => 'string',
        'paymentId' => 'string',
        'authPaymentId' => 'string',
        'paymentAmount' => '\request\model\Amount',
        'actualPaymentAmount' => '\request\model\Amount',
        'paymentQuote' => '\request\model\Quote',
        'authExpiryTime' => 'string',
        'paymentCreateTime' => 'string',
        'paymentTime' => 'string',
        'nonGuaranteeCouponAmount' => '\request\model\Amount',
        'pspCustomerInfo' => '\request\model\PspCustomerInfo',
        'redirectActionForm' => '\request\model\RedirectActionForm',
        'cardInfo' => '\request\model\CardInfo',
        'acquirerReferenceNo' => 'string',
        'extendInfo' => 'string',
        'transactions' => '\request\model\Transaction[]',
        'customsDeclarationAmount' => '\request\model\Amount',
        'grossSettlementAmount' => '\request\model\Amount',
        'settlementQuote' => '\request\model\Quote',
        'paymentResultInfo' => '\request\model\PaymentResultInfo',
        'acquirerInfo' => '\request\model\AcquirerInfo',
        'merchantAccountId' => 'string',
        'promotionResults' => '\request\model\PromotionResult[]',
        'earliestSettlementTime' => 'string',
        'paymentMethodType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'result' => null,
        'paymentStatus' => null,
        'paymentResultCode' => null,
        'paymentResultMessage' => null,
        'paymentRequestId' => null,
        'paymentId' => null,
        'authPaymentId' => null,
        'paymentAmount' => null,
        'actualPaymentAmount' => null,
        'paymentQuote' => null,
        'authExpiryTime' => null,
        'paymentCreateTime' => null,
        'paymentTime' => null,
        'nonGuaranteeCouponAmount' => null,
        'pspCustomerInfo' => null,
        'redirectActionForm' => null,
        'cardInfo' => null,
        'acquirerReferenceNo' => null,
        'extendInfo' => null,
        'transactions' => null,
        'customsDeclarationAmount' => null,
        'grossSettlementAmount' => null,
        'settlementQuote' => null,
        'paymentResultInfo' => null,
        'acquirerInfo' => null,
        'merchantAccountId' => null,
        'promotionResults' => null,
        'earliestSettlementTime' => null,
        'paymentMethodType' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'result' => false,
        'paymentStatus' => false,
        'paymentResultCode' => false,
        'paymentResultMessage' => false,
        'paymentRequestId' => false,
        'paymentId' => false,
        'authPaymentId' => false,
        'paymentAmount' => false,
        'actualPaymentAmount' => false,
        'paymentQuote' => false,
        'authExpiryTime' => false,
        'paymentCreateTime' => false,
        'paymentTime' => false,
        'nonGuaranteeCouponAmount' => false,
        'pspCustomerInfo' => false,
        'redirectActionForm' => false,
        'cardInfo' => false,
        'acquirerReferenceNo' => false,
        'extendInfo' => false,
        'transactions' => false,
        'customsDeclarationAmount' => false,
        'grossSettlementAmount' => false,
        'settlementQuote' => false,
        'paymentResultInfo' => false,
        'acquirerInfo' => false,
        'merchantAccountId' => false,
        'promotionResults' => false,
        'earliestSettlementTime' => false,
        'paymentMethodType' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'result' => 'result',
        'paymentStatus' => 'paymentStatus',
        'paymentResultCode' => 'paymentResultCode',
        'paymentResultMessage' => 'paymentResultMessage',
        'paymentRequestId' => 'paymentRequestId',
        'paymentId' => 'paymentId',
        'authPaymentId' => 'authPaymentId',
        'paymentAmount' => 'paymentAmount',
        'actualPaymentAmount' => 'actualPaymentAmount',
        'paymentQuote' => 'paymentQuote',
        'authExpiryTime' => 'authExpiryTime',
        'paymentCreateTime' => 'paymentCreateTime',
        'paymentTime' => 'paymentTime',
        'nonGuaranteeCouponAmount' => 'nonGuaranteeCouponAmount',
        'pspCustomerInfo' => 'pspCustomerInfo',
        'redirectActionForm' => 'redirectActionForm',
        'cardInfo' => 'cardInfo',
        'acquirerReferenceNo' => 'acquirerReferenceNo',
        'extendInfo' => 'extendInfo',
        'transactions' => 'transactions',
        'customsDeclarationAmount' => 'customsDeclarationAmount',
        'grossSettlementAmount' => 'grossSettlementAmount',
        'settlementQuote' => 'settlementQuote',
        'paymentResultInfo' => 'paymentResultInfo',
        'acquirerInfo' => 'acquirerInfo',
        'merchantAccountId' => 'merchantAccountId',
        'promotionResults' => 'promotionResults',
        'earliestSettlementTime' => 'earliestSettlementTime',
        'paymentMethodType' => 'paymentMethodType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'result' => 'setResult',
        'paymentStatus' => 'setPaymentStatus',
        'paymentResultCode' => 'setPaymentResultCode',
        'paymentResultMessage' => 'setPaymentResultMessage',
        'paymentRequestId' => 'setPaymentRequestId',
        'paymentId' => 'setPaymentId',
        'authPaymentId' => 'setAuthPaymentId',
        'paymentAmount' => 'setPaymentAmount',
        'actualPaymentAmount' => 'setActualPaymentAmount',
        'paymentQuote' => 'setPaymentQuote',
        'authExpiryTime' => 'setAuthExpiryTime',
        'paymentCreateTime' => 'setPaymentCreateTime',
        'paymentTime' => 'setPaymentTime',
        'nonGuaranteeCouponAmount' => 'setNonGuaranteeCouponAmount',
        'pspCustomerInfo' => 'setPspCustomerInfo',
        'redirectActionForm' => 'setRedirectActionForm',
        'cardInfo' => 'setCardInfo',
        'acquirerReferenceNo' => 'setAcquirerReferenceNo',
        'extendInfo' => 'setExtendInfo',
        'transactions' => 'setTransactions',
        'customsDeclarationAmount' => 'setCustomsDeclarationAmount',
        'grossSettlementAmount' => 'setGrossSettlementAmount',
        'settlementQuote' => 'setSettlementQuote',
        'paymentResultInfo' => 'setPaymentResultInfo',
        'acquirerInfo' => 'setAcquirerInfo',
        'merchantAccountId' => 'setMerchantAccountId',
        'promotionResults' => 'setPromotionResults',
        'earliestSettlementTime' => 'setEarliestSettlementTime',
        'paymentMethodType' => 'setPaymentMethodType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'result' => 'getResult',
        'paymentStatus' => 'getPaymentStatus',
        'paymentResultCode' => 'getPaymentResultCode',
        'paymentResultMessage' => 'getPaymentResultMessage',
        'paymentRequestId' => 'getPaymentRequestId',
        'paymentId' => 'getPaymentId',
        'authPaymentId' => 'getAuthPaymentId',
        'paymentAmount' => 'getPaymentAmount',
        'actualPaymentAmount' => 'getActualPaymentAmount',
        'paymentQuote' => 'getPaymentQuote',
        'authExpiryTime' => 'getAuthExpiryTime',
        'paymentCreateTime' => 'getPaymentCreateTime',
        'paymentTime' => 'getPaymentTime',
        'nonGuaranteeCouponAmount' => 'getNonGuaranteeCouponAmount',
        'pspCustomerInfo' => 'getPspCustomerInfo',
        'redirectActionForm' => 'getRedirectActionForm',
        'cardInfo' => 'getCardInfo',
        'acquirerReferenceNo' => 'getAcquirerReferenceNo',
        'extendInfo' => 'getExtendInfo',
        'transactions' => 'getTransactions',
        'customsDeclarationAmount' => 'getCustomsDeclarationAmount',
        'grossSettlementAmount' => 'getGrossSettlementAmount',
        'settlementQuote' => 'getSettlementQuote',
        'paymentResultInfo' => 'getPaymentResultInfo',
        'acquirerInfo' => 'getAcquirerInfo',
        'merchantAccountId' => 'getMerchantAccountId',
        'promotionResults' => 'getPromotionResults',
        'earliestSettlementTime' => 'getEarliestSettlementTime',
        'paymentMethodType' => 'getPaymentMethodType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('result', $data ?? [], null);
        $this->setIfExists('paymentStatus', $data ?? [], null);
        $this->setIfExists('paymentResultCode', $data ?? [], null);
        $this->setIfExists('paymentResultMessage', $data ?? [], null);
        $this->setIfExists('paymentRequestId', $data ?? [], null);
        $this->setIfExists('paymentId', $data ?? [], null);
        $this->setIfExists('authPaymentId', $data ?? [], null);
        $this->setIfExists('paymentAmount', $data ?? [], null);
        $this->setIfExists('actualPaymentAmount', $data ?? [], null);
        $this->setIfExists('paymentQuote', $data ?? [], null);
        $this->setIfExists('authExpiryTime', $data ?? [], null);
        $this->setIfExists('paymentCreateTime', $data ?? [], null);
        $this->setIfExists('paymentTime', $data ?? [], null);
        $this->setIfExists('nonGuaranteeCouponAmount', $data ?? [], null);
        $this->setIfExists('pspCustomerInfo', $data ?? [], null);
        $this->setIfExists('redirectActionForm', $data ?? [], null);
        $this->setIfExists('cardInfo', $data ?? [], null);
        $this->setIfExists('acquirerReferenceNo', $data ?? [], null);
        $this->setIfExists('extendInfo', $data ?? [], null);
        $this->setIfExists('transactions', $data ?? [], null);
        $this->setIfExists('customsDeclarationAmount', $data ?? [], null);
        $this->setIfExists('grossSettlementAmount', $data ?? [], null);
        $this->setIfExists('settlementQuote', $data ?? [], null);
        $this->setIfExists('paymentResultInfo', $data ?? [], null);
        $this->setIfExists('acquirerInfo', $data ?? [], null);
        $this->setIfExists('merchantAccountId', $data ?? [], null);
        $this->setIfExists('promotionResults', $data ?? [], null);
        $this->setIfExists('earliestSettlementTime', $data ?? [], null);
        $this->setIfExists('paymentMethodType', $data ?? [], null);

            }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['result'] === null) {
            $invalidProperties[] = "'result' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets result
     *
     * @return \request\model\Result
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param \request\model\Result $result result
     *
     * @return self
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets paymentStatus
     *
     * @return \request\model\TransactionStatusType|null
     */
    public function getPaymentStatus()
    {
        return $this->container['paymentStatus'];
    }

    /**
     * Sets paymentStatus
     *
     * @param \request\model\TransactionStatusType|null $paymentStatus paymentStatus
     *
     * @return self
     */
    public function setPaymentStatus($paymentStatus)
    {
        $this->container['paymentStatus'] = $paymentStatus;

        return $this;
    }

    /**
     * Gets paymentResultCode
     *
     * @return string|null
     */
    public function getPaymentResultCode()
    {
        return $this->container['paymentResultCode'];
    }

    /**
     * Sets paymentResultCode
     *
     * @param string|null $paymentResultCode The result code for different payment statuses. Possible payment result codes are listed in the Payment result codes table on this page.  Note: This field is returned when the API is called successfully (the value of result.resultStatus is S).  More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setPaymentResultCode($paymentResultCode)
    {
        $this->container['paymentResultCode'] = $paymentResultCode;

        return $this;
    }

    /**
     * Gets paymentResultMessage
     *
     * @return string|null
     */
    public function getPaymentResultMessage()
    {
        return $this->container['paymentResultMessage'];
    }

    /**
     * Sets paymentResultMessage
     *
     * @param string|null $paymentResultMessage The result message that explains the payment result code.  Note: This field is returned when the API is called successfully (the value of result.resultStatus is S).  More information:  Maximum length: 256 characters
     *
     * @return self
     */
    public function setPaymentResultMessage($paymentResultMessage)
    {
        $this->container['paymentResultMessage'] = $paymentResultMessage;

        return $this;
    }

    /**
     * Gets paymentRequestId
     *
     * @return string|null
     */
    public function getPaymentRequestId()
    {
        return $this->container['paymentRequestId'];
    }

    /**
     * Sets paymentRequestId
     *
     * @param string|null $paymentRequestId The unique ID that is assigned by a merchant to identify a payment request.  Note: This field is returned when the API is called successfully (the value of result.resultStatus is S).  More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setPaymentRequestId($paymentRequestId)
    {
        $this->container['paymentRequestId'] = $paymentRequestId;

        return $this;
    }

    /**
     * Gets paymentId
     *
     * @return string|null
     */
    public function getPaymentId()
    {
        return $this->container['paymentId'];
    }

    /**
     * Sets paymentId
     *
     * @param string|null $paymentId The unique ID that is assigned by Antom to identify a payment.  Note: This field is returned when the API is called successfully (the value of result.resultStatus is S).  More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setPaymentId($paymentId)
    {
        $this->container['paymentId'] = $paymentId;

        return $this;
    }

    /**
     * Gets authPaymentId
     *
     * @return string|null
     */
    public function getAuthPaymentId()
    {
        return $this->container['authPaymentId'];
    }

    /**
     * Sets authPaymentId
     *
     * @param string|null $authPaymentId authPaymentId
     *
     * @return self
     */
    public function setAuthPaymentId($authPaymentId)
    {
        $this->container['authPaymentId'] = $authPaymentId;

        return $this;
    }

    /**
     * Gets paymentAmount
     *
     * @return \request\model\Amount|null
     */
    public function getPaymentAmount()
    {
        return $this->container['paymentAmount'];
    }

    /**
     * Sets paymentAmount
     *
     * @param \request\model\Amount|null $paymentAmount paymentAmount
     *
     * @return self
     */
    public function setPaymentAmount($paymentAmount)
    {
        $this->container['paymentAmount'] = $paymentAmount;

        return $this;
    }

    /**
     * Gets actualPaymentAmount
     *
     * @return \request\model\Amount|null
     */
    public function getActualPaymentAmount()
    {
        return $this->container['actualPaymentAmount'];
    }

    /**
     * Sets actualPaymentAmount
     *
     * @param \request\model\Amount|null $actualPaymentAmount actualPaymentAmount
     *
     * @return self
     */
    public function setActualPaymentAmount($actualPaymentAmount)
    {
        $this->container['actualPaymentAmount'] = $actualPaymentAmount;

        return $this;
    }

    /**
     * Gets paymentQuote
     *
     * @return \request\model\Quote|null
     */
    public function getPaymentQuote()
    {
        return $this->container['paymentQuote'];
    }

    /**
     * Sets paymentQuote
     *
     * @param \request\model\Quote|null $paymentQuote paymentQuote
     *
     * @return self
     */
    public function setPaymentQuote($paymentQuote)
    {
        $this->container['paymentQuote'] = $paymentQuote;

        return $this;
    }

    /**
     * Gets authExpiryTime
     *
     * @return string|null
     */
    public function getAuthExpiryTime()
    {
        return $this->container['authExpiryTime'];
    }

    /**
     * Sets authExpiryTime
     *
     * @param string|null $authExpiryTime The expiration date and time of the authorization payment. You cannot capture the payment after this time.  This parameter is returned when the value of paymentMethodType in the pay (Checkout Payment) API is CARD.  More information about this field:  The value follows the ISO 8601 standard format. For example, \"2019-11-27T12:01:01+08:00\".
     *
     * @return self
     */
    public function setAuthExpiryTime($authExpiryTime)
    {
        $this->container['authExpiryTime'] = $authExpiryTime;

        return $this;
    }

    /**
     * Gets paymentCreateTime
     *
     * @return string|null
     */
    public function getPaymentCreateTime()
    {
        return $this->container['paymentCreateTime'];
    }

    /**
     * Sets paymentCreateTime
     *
     * @param string|null $paymentCreateTime The date and time when the payment is created.   Note: This field is returned when the API is called successfully (the value of result.resultStatus is S).  More information:  The value follows the ISO 8601 standard format. For example, \"2019-11-27T12:01:01+08:00\".
     *
     * @return self
     */
    public function setPaymentCreateTime($paymentCreateTime)
    {
        $this->container['paymentCreateTime'] = $paymentCreateTime;

        return $this;
    }

    /**
     * Gets paymentTime
     *
     * @return string|null
     */
    public function getPaymentTime()
    {
        return $this->container['paymentTime'];
    }

    /**
     * Sets paymentTime
     *
     * @param string|null $paymentTime The date and time when the payment reaches a final state of success.  Note: This field is returned only when the payment reaches a final state of success (the value of paymentStatus is SUCCESS).   More information:  The value follows the ISO 8601 standard format. For example, \"2019-11-27T12:01:01+08:00\".
     *
     * @return self
     */
    public function setPaymentTime($paymentTime)
    {
        $this->container['paymentTime'] = $paymentTime;

        return $this;
    }

    /**
     * Gets nonGuaranteeCouponAmount
     *
     * @return \request\model\Amount|null
     */
    public function getNonGuaranteeCouponAmount()
    {
        return $this->container['nonGuaranteeCouponAmount'];
    }

    /**
     * Sets nonGuaranteeCouponAmount
     *
     * @param \request\model\Amount|null $nonGuaranteeCouponAmount nonGuaranteeCouponAmount
     *
     * @return self
     */
    public function setNonGuaranteeCouponAmount($nonGuaranteeCouponAmount)
    {
        $this->container['nonGuaranteeCouponAmount'] = $nonGuaranteeCouponAmount;

        return $this;
    }

    /**
     * Gets pspCustomerInfo
     *
     * @return \request\model\PspCustomerInfo|null
     */
    public function getPspCustomerInfo()
    {
        return $this->container['pspCustomerInfo'];
    }

    /**
     * Sets pspCustomerInfo
     *
     * @param \request\model\PspCustomerInfo|null $pspCustomerInfo pspCustomerInfo
     *
     * @return self
     */
    public function setPspCustomerInfo($pspCustomerInfo)
    {
        $this->container['pspCustomerInfo'] = $pspCustomerInfo;

        return $this;
    }

    /**
     * Gets redirectActionForm
     *
     * @return \request\model\RedirectActionForm|null
     */
    public function getRedirectActionForm()
    {
        return $this->container['redirectActionForm'];
    }

    /**
     * Sets redirectActionForm
     *
     * @param \request\model\RedirectActionForm|null $redirectActionForm redirectActionForm
     *
     * @return self
     */
    public function setRedirectActionForm($redirectActionForm)
    {
        $this->container['redirectActionForm'] = $redirectActionForm;

        return $this;
    }

    /**
     * Gets cardInfo
     *
     * @return \request\model\CardInfo|null
     */
    public function getCardInfo()
    {
        return $this->container['cardInfo'];
    }

    /**
     * Sets cardInfo
     *
     * @param \request\model\CardInfo|null $cardInfo cardInfo
     *
     * @return self
     */
    public function setCardInfo($cardInfo)
    {
        $this->container['cardInfo'] = $cardInfo;

        return $this;
    }

    /**
     * Gets acquirerReferenceNo
     *
     * @return string|null
     */
    public function getAcquirerReferenceNo()
    {
        return $this->container['acquirerReferenceNo'];
    }

    /**
     * Sets acquirerReferenceNo
     *
     * @param string|null $acquirerReferenceNo The unique ID assigned by the non-Antom acquirer for the transaction.    More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setAcquirerReferenceNo($acquirerReferenceNo)
    {
        $this->container['acquirerReferenceNo'] = $acquirerReferenceNo;

        return $this;
    }

    /**
     * Gets extendInfo
     *
     * @return string|null
     */
    public function getExtendInfo()
    {
        return $this->container['extendInfo'];
    }

    /**
     * Sets extendInfo
     *
     * @param string|null $extendInfo extendInfo
     *
     * @return self
     */
    public function setExtendInfo($extendInfo)
    {
        $this->container['extendInfo'] = $extendInfo;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return \request\model\Transaction[]|null
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param \request\model\Transaction[]|null $transactions Information about the subsequent action against a transaction.  Note: This parameter is returned when a refund or a capture against the transaction exists.
     *
     * @return self
     */
    public function setTransactions($transactions)
    {
        $this->container['transactions'] = $transactions;

        return $this;
    }

    /**
     * Gets customsDeclarationAmount
     *
     * @return \request\model\Amount|null
     */
    public function getCustomsDeclarationAmount()
    {
        return $this->container['customsDeclarationAmount'];
    }

    /**
     * Sets customsDeclarationAmount
     *
     * @param \request\model\Amount|null $customsDeclarationAmount customsDeclarationAmount
     *
     * @return self
     */
    public function setCustomsDeclarationAmount($customsDeclarationAmount)
    {
        $this->container['customsDeclarationAmount'] = $customsDeclarationAmount;

        return $this;
    }

    /**
     * Gets grossSettlementAmount
     *
     * @return \request\model\Amount|null
     */
    public function getGrossSettlementAmount()
    {
        return $this->container['grossSettlementAmount'];
    }

    /**
     * Sets grossSettlementAmount
     *
     * @param \request\model\Amount|null $grossSettlementAmount grossSettlementAmount
     *
     * @return self
     */
    public function setGrossSettlementAmount($grossSettlementAmount)
    {
        $this->container['grossSettlementAmount'] = $grossSettlementAmount;

        return $this;
    }

    /**
     * Gets settlementQuote
     *
     * @return \request\model\Quote|null
     */
    public function getSettlementQuote()
    {
        return $this->container['settlementQuote'];
    }

    /**
     * Sets settlementQuote
     *
     * @param \request\model\Quote|null $settlementQuote settlementQuote
     *
     * @return self
     */
    public function setSettlementQuote($settlementQuote)
    {
        $this->container['settlementQuote'] = $settlementQuote;

        return $this;
    }

    /**
     * Gets paymentResultInfo
     *
     * @return \request\model\PaymentResultInfo|null
     */
    public function getPaymentResultInfo()
    {
        return $this->container['paymentResultInfo'];
    }

    /**
     * Sets paymentResultInfo
     *
     * @param \request\model\PaymentResultInfo|null $paymentResultInfo paymentResultInfo
     *
     * @return self
     */
    public function setPaymentResultInfo($paymentResultInfo)
    {
        $this->container['paymentResultInfo'] = $paymentResultInfo;

        return $this;
    }

    /**
     * Gets acquirerInfo
     *
     * @return \request\model\AcquirerInfo|null
     */
    public function getAcquirerInfo()
    {
        return $this->container['acquirerInfo'];
    }

    /**
     * Sets acquirerInfo
     *
     * @param \request\model\AcquirerInfo|null $acquirerInfo acquirerInfo
     *
     * @return self
     */
    public function setAcquirerInfo($acquirerInfo)
    {
        $this->container['acquirerInfo'] = $acquirerInfo;

        return $this;
    }

    /**
     * Gets merchantAccountId
     *
     * @return string|null
     */
    public function getMerchantAccountId()
    {
        return $this->container['merchantAccountId'];
    }

    /**
     * Sets merchantAccountId
     *
     * @param string|null $merchantAccountId merchantAccountId
     *
     * @return self
     */
    public function setMerchantAccountId($merchantAccountId)
    {
        $this->container['merchantAccountId'] = $merchantAccountId;

        return $this;
    }

    /**
     * Gets promotionResults
     *
     * @return \request\model\PromotionResult[]|null
     */
    public function getPromotionResults()
    {
        return $this->container['promotionResults'];
    }

    /**
     * Sets promotionResults
     *
     * @param \request\model\PromotionResult[]|null $promotionResults Promotion result.  Note: This parameter is returned when the buyer applied a promotion while placing an order.
     *
     * @return self
     */
    public function setPromotionResults($promotionResults)
    {
        $this->container['promotionResults'] = $promotionResults;

        return $this;
    }

    /**
     * Gets earliestSettlementTime
     *
     * @return string|null
     */
    public function getEarliestSettlementTime()
    {
        return $this->container['earliestSettlementTime'];
    }

    /**
     * Sets earliestSettlementTime
     *
     * @param string|null $earliestSettlementTime earliestSettlementTime
     *
     * @return self
     */
    public function setEarliestSettlementTime($earliestSettlementTime)
    {
        $this->container['earliestSettlementTime'] = $earliestSettlementTime;

        return $this;
    }

    /**
     * Gets paymentMethodType
     *
     * @return string|null
     */
    public function getPaymentMethodType()
    {
        return $this->container['paymentMethodType'];
    }

    /**
     * Sets paymentMethodType
     *
     * @param string|null $paymentMethodType The payment method type that is included in payment method options. See Payment methods to check the valid values.   Note: This field will be returned when selecting the Antom Chechkout Page integration.  More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setPaymentMethodType($paymentMethodType)
    {
        $this->container['paymentMethodType'] = $paymentMethodType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    public function toArray(): array
    {
        $array = [];
        foreach (self::$openAPITypes as $propertyName => $propertyType) {
            $propertyValue = $this[$propertyName];
            if ($propertyValue !== null) {
                // Check if the property value is an object and has a toArray() method
                if (is_object($propertyValue) && method_exists($propertyValue, 'toArray')) {
                    $array[$propertyName] = $propertyValue->toArray();
                // Check if it's type datetime
                } elseif ($propertyValue instanceof \DateTime) {
                    $array[$propertyName] = $propertyValue->format(DATE_ATOM);
                // If it's an array type we should check whether it contains objects and if so call toArray method
                } elseif (is_array($propertyValue)) {
                    $array[$propertyName] = array_map(function ($item) {
                        return $item instanceof ModelInterface ? $item->toArray() : $item;
                    }, $propertyValue);
                } else {
                    // Otherwise, directly assign the property value to the array
                    $array[$propertyName] = $propertyValue;
                }
            }
        }
        return $array;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
