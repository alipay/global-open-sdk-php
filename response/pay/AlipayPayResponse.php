<?php

/**
 * payments_pay
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Response\pay;

use \ArrayAccess;
use Request\AlipayRequest;
use Model\ModelInterface;
use Model\ObjectSerializer;

/**
 * AlipayPayResponse Class Doc Comment
 *
 * @category Class
 * @package  request
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AlipayPayResponse  implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AlipayPayResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'result' => '\request\model\Result',
        'paymentRequestId' => 'string',
        'paymentId' => 'string',
        'paymentAmount' => '\request\model\Amount',
        'paymentData' => 'string',
        'actualPaymentAmount' => '\request\model\Amount',
        'paymentQuote' => '\request\model\Quote',
        'paymentTime' => 'string',
        'paymentCreateTime' => 'string',
        'authExpiryTime' => 'string',
        'nonGuaranteeCouponValue' => '\request\model\Amount',
        'paymentActionForm' => 'string',
        'pspCustomerInfo' => '\request\model\PspCustomerInfo',
        'challengeActionForm' => '\request\model\ChallengeActionForm',
        'redirectActionForm' => '\request\model\RedirectActionForm',
        'orderCodeForm' => '\request\model\OrderCodeForm',
        'grossSettlementAmount' => '\request\model\Amount',
        'settlementQuote' => '\request\model\Quote',
        'extendInfo' => 'string',
        'normalUrl' => 'string',
        'schemeUrl' => 'string',
        'applinkUrl' => 'string',
        'appIdentifier' => 'string',
        'paymentResultInfo' => '\request\model\PaymentResultInfo',
        'acquirerInfo' => '\request\model\AcquirerInfo',
        'promotionResult' => '\request\model\PromotionResult[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'result' => null,
        'paymentRequestId' => null,
        'paymentId' => null,
        'paymentAmount' => null,
        'paymentData' => null,
        'actualPaymentAmount' => null,
        'paymentQuote' => null,
        'paymentTime' => null,
        'paymentCreateTime' => null,
        'authExpiryTime' => null,
        'nonGuaranteeCouponValue' => null,
        'paymentActionForm' => null,
        'pspCustomerInfo' => null,
        'challengeActionForm' => null,
        'redirectActionForm' => null,
        'orderCodeForm' => null,
        'grossSettlementAmount' => null,
        'settlementQuote' => null,
        'extendInfo' => null,
        'normalUrl' => null,
        'schemeUrl' => null,
        'applinkUrl' => null,
        'appIdentifier' => null,
        'paymentResultInfo' => null,
        'acquirerInfo' => null,
        'promotionResult' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'result' => false,
        'paymentRequestId' => false,
        'paymentId' => false,
        'paymentAmount' => false,
        'paymentData' => false,
        'actualPaymentAmount' => false,
        'paymentQuote' => false,
        'paymentTime' => false,
        'paymentCreateTime' => false,
        'authExpiryTime' => false,
        'nonGuaranteeCouponValue' => false,
        'paymentActionForm' => false,
        'pspCustomerInfo' => false,
        'challengeActionForm' => false,
        'redirectActionForm' => false,
        'orderCodeForm' => false,
        'grossSettlementAmount' => false,
        'settlementQuote' => false,
        'extendInfo' => false,
        'normalUrl' => false,
        'schemeUrl' => false,
        'applinkUrl' => false,
        'appIdentifier' => false,
        'paymentResultInfo' => false,
        'acquirerInfo' => false,
        'promotionResult' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'result' => 'result',
        'paymentRequestId' => 'paymentRequestId',
        'paymentId' => 'paymentId',
        'paymentAmount' => 'paymentAmount',
        'paymentData' => 'paymentData',
        'actualPaymentAmount' => 'actualPaymentAmount',
        'paymentQuote' => 'paymentQuote',
        'paymentTime' => 'paymentTime',
        'paymentCreateTime' => 'paymentCreateTime',
        'authExpiryTime' => 'authExpiryTime',
        'nonGuaranteeCouponValue' => 'nonGuaranteeCouponValue',
        'paymentActionForm' => 'paymentActionForm',
        'pspCustomerInfo' => 'pspCustomerInfo',
        'challengeActionForm' => 'challengeActionForm',
        'redirectActionForm' => 'redirectActionForm',
        'orderCodeForm' => 'orderCodeForm',
        'grossSettlementAmount' => 'grossSettlementAmount',
        'settlementQuote' => 'settlementQuote',
        'extendInfo' => 'extendInfo',
        'normalUrl' => 'normalUrl',
        'schemeUrl' => 'schemeUrl',
        'applinkUrl' => 'applinkUrl',
        'appIdentifier' => 'appIdentifier',
        'paymentResultInfo' => 'paymentResultInfo',
        'acquirerInfo' => 'acquirerInfo',
        'promotionResult' => 'promotionResult'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'result' => 'setResult',
        'paymentRequestId' => 'setPaymentRequestId',
        'paymentId' => 'setPaymentId',
        'paymentAmount' => 'setPaymentAmount',
        'paymentData' => 'setPaymentData',
        'actualPaymentAmount' => 'setActualPaymentAmount',
        'paymentQuote' => 'setPaymentQuote',
        'paymentTime' => 'setPaymentTime',
        'paymentCreateTime' => 'setPaymentCreateTime',
        'authExpiryTime' => 'setAuthExpiryTime',
        'nonGuaranteeCouponValue' => 'setNonGuaranteeCouponValue',
        'paymentActionForm' => 'setPaymentActionForm',
        'pspCustomerInfo' => 'setPspCustomerInfo',
        'challengeActionForm' => 'setChallengeActionForm',
        'redirectActionForm' => 'setRedirectActionForm',
        'orderCodeForm' => 'setOrderCodeForm',
        'grossSettlementAmount' => 'setGrossSettlementAmount',
        'settlementQuote' => 'setSettlementQuote',
        'extendInfo' => 'setExtendInfo',
        'normalUrl' => 'setNormalUrl',
        'schemeUrl' => 'setSchemeUrl',
        'applinkUrl' => 'setApplinkUrl',
        'appIdentifier' => 'setAppIdentifier',
        'paymentResultInfo' => 'setPaymentResultInfo',
        'acquirerInfo' => 'setAcquirerInfo',
        'promotionResult' => 'setPromotionResult'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'result' => 'getResult',
        'paymentRequestId' => 'getPaymentRequestId',
        'paymentId' => 'getPaymentId',
        'paymentAmount' => 'getPaymentAmount',
        'paymentData' => 'getPaymentData',
        'actualPaymentAmount' => 'getActualPaymentAmount',
        'paymentQuote' => 'getPaymentQuote',
        'paymentTime' => 'getPaymentTime',
        'paymentCreateTime' => 'getPaymentCreateTime',
        'authExpiryTime' => 'getAuthExpiryTime',
        'nonGuaranteeCouponValue' => 'getNonGuaranteeCouponValue',
        'paymentActionForm' => 'getPaymentActionForm',
        'pspCustomerInfo' => 'getPspCustomerInfo',
        'challengeActionForm' => 'getChallengeActionForm',
        'redirectActionForm' => 'getRedirectActionForm',
        'orderCodeForm' => 'getOrderCodeForm',
        'grossSettlementAmount' => 'getGrossSettlementAmount',
        'settlementQuote' => 'getSettlementQuote',
        'extendInfo' => 'getExtendInfo',
        'normalUrl' => 'getNormalUrl',
        'schemeUrl' => 'getSchemeUrl',
        'applinkUrl' => 'getApplinkUrl',
        'appIdentifier' => 'getAppIdentifier',
        'paymentResultInfo' => 'getPaymentResultInfo',
        'acquirerInfo' => 'getAcquirerInfo',
        'promotionResult' => 'getPromotionResult'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('result', $data ?? [], null);
        $this->setIfExists('paymentRequestId', $data ?? [], null);
        $this->setIfExists('paymentId', $data ?? [], null);
        $this->setIfExists('paymentAmount', $data ?? [], null);
        $this->setIfExists('paymentData', $data ?? [], null);
        $this->setIfExists('actualPaymentAmount', $data ?? [], null);
        $this->setIfExists('paymentQuote', $data ?? [], null);
        $this->setIfExists('paymentTime', $data ?? [], null);
        $this->setIfExists('paymentCreateTime', $data ?? [], null);
        $this->setIfExists('authExpiryTime', $data ?? [], null);
        $this->setIfExists('nonGuaranteeCouponValue', $data ?? [], null);
        $this->setIfExists('paymentActionForm', $data ?? [], null);
        $this->setIfExists('pspCustomerInfo', $data ?? [], null);
        $this->setIfExists('challengeActionForm', $data ?? [], null);
        $this->setIfExists('redirectActionForm', $data ?? [], null);
        $this->setIfExists('orderCodeForm', $data ?? [], null);
        $this->setIfExists('grossSettlementAmount', $data ?? [], null);
        $this->setIfExists('settlementQuote', $data ?? [], null);
        $this->setIfExists('extendInfo', $data ?? [], null);
        $this->setIfExists('normalUrl', $data ?? [], null);
        $this->setIfExists('schemeUrl', $data ?? [], null);
        $this->setIfExists('applinkUrl', $data ?? [], null);
        $this->setIfExists('appIdentifier', $data ?? [], null);
        $this->setIfExists('paymentResultInfo', $data ?? [], null);
        $this->setIfExists('acquirerInfo', $data ?? [], null);
        $this->setIfExists('promotionResult', $data ?? [], null);

            }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['result'] === null) {
            $invalidProperties[] = "'result' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets result
     *
     * @return \request\model\Result
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param \request\model\Result $result result
     *
     * @return self
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets paymentRequestId
     *
     * @return string|null
     */
    public function getPaymentRequestId()
    {
        return $this->container['paymentRequestId'];
    }

    /**
     * Sets paymentRequestId
     *
     * @param string|null $paymentRequestId The unique ID that is assigned by a merchant to identify a payment request.  Note: This field is returned when resultCode is PAYMENT_IN_PROCESS.  More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setPaymentRequestId($paymentRequestId)
    {
        $this->container['paymentRequestId'] = $paymentRequestId;

        return $this;
    }

    /**
     * Gets paymentId
     *
     * @return string|null
     */
    public function getPaymentId()
    {
        return $this->container['paymentId'];
    }

    /**
     * Sets paymentId
     *
     * @param string|null $paymentId The unique ID that is assigned by Antom to identify a payment.  Note: This field is returned when resultCode is PAYMENT_IN_PROCESS.  More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setPaymentId($paymentId)
    {
        $this->container['paymentId'] = $paymentId;

        return $this;
    }

    /**
     * Gets paymentAmount
     *
     * @return \request\model\Amount|null
     */
    public function getPaymentAmount()
    {
        return $this->container['paymentAmount'];
    }

    /**
     * Sets paymentAmount
     *
     * @param \request\model\Amount|null $paymentAmount paymentAmount
     *
     * @return self
     */
    public function setPaymentAmount($paymentAmount)
    {
        $this->container['paymentAmount'] = $paymentAmount;

        return $this;
    }

    /**
     * Gets paymentData
     *
     * @return string|null
     */
    public function getPaymentData()
    {
        return $this->container['paymentData'];
    }

    /**
     * Sets paymentData
     *
     * @param string|null $paymentData Used by the Antom client SDK to render the checkout page. This parameter is returned if the merchant app has integrated Antom client SDK. After receiving the parameter, you can call the showPaymentSheet API of the Antom client SDK.  More information:  Maximum length: 20000 characters
     *
     * @return self
     */
    public function setPaymentData($paymentData)
    {
        $this->container['paymentData'] = $paymentData;

        return $this;
    }

    /**
     * Gets actualPaymentAmount
     *
     * @return \request\model\Amount|null
     */
    public function getActualPaymentAmount()
    {
        return $this->container['actualPaymentAmount'];
    }

    /**
     * Sets actualPaymentAmount
     *
     * @param \request\model\Amount|null $actualPaymentAmount actualPaymentAmount
     *
     * @return self
     */
    public function setActualPaymentAmount($actualPaymentAmount)
    {
        $this->container['actualPaymentAmount'] = $actualPaymentAmount;

        return $this;
    }

    /**
     * Gets paymentQuote
     *
     * @return \request\model\Quote|null
     */
    public function getPaymentQuote()
    {
        return $this->container['paymentQuote'];
    }

    /**
     * Sets paymentQuote
     *
     * @param \request\model\Quote|null $paymentQuote paymentQuote
     *
     * @return self
     */
    public function setPaymentQuote($paymentQuote)
    {
        $this->container['paymentQuote'] = $paymentQuote;

        return $this;
    }

    /**
     * Gets paymentTime
     *
     * @return string|null
     */
    public function getPaymentTime()
    {
        return $this->container['paymentTime'];
    }

    /**
     * Sets paymentTime
     *
     * @param string|null $paymentTime paymentTime
     *
     * @return self
     */
    public function setPaymentTime($paymentTime)
    {
        $this->container['paymentTime'] = $paymentTime;

        return $this;
    }

    /**
     * Gets paymentCreateTime
     *
     * @return string|null
     */
    public function getPaymentCreateTime()
    {
        return $this->container['paymentCreateTime'];
    }

    /**
     * Sets paymentCreateTime
     *
     * @param string|null $paymentCreateTime The date and time when the payment is created.  Note: This field is returned when resultCode is PAYMENT_IN_PROCESS.  More information:  The value follows the ISO 8601 standard format. For example, \"2019-11-27T12:01:01+08:00\".
     *
     * @return self
     */
    public function setPaymentCreateTime($paymentCreateTime)
    {
        $this->container['paymentCreateTime'] = $paymentCreateTime;

        return $this;
    }

    /**
     * Gets authExpiryTime
     *
     * @return string|null
     */
    public function getAuthExpiryTime()
    {
        return $this->container['authExpiryTime'];
    }

    /**
     * Sets authExpiryTime
     *
     * @param string|null $authExpiryTime authExpiryTime
     *
     * @return self
     */
    public function setAuthExpiryTime($authExpiryTime)
    {
        $this->container['authExpiryTime'] = $authExpiryTime;

        return $this;
    }

    /**
     * Gets nonGuaranteeCouponValue
     *
     * @return \request\model\Amount|null
     */
    public function getNonGuaranteeCouponValue()
    {
        return $this->container['nonGuaranteeCouponValue'];
    }

    /**
     * Sets nonGuaranteeCouponValue
     *
     * @param \request\model\Amount|null $nonGuaranteeCouponValue nonGuaranteeCouponValue
     *
     * @return self
     */
    public function setNonGuaranteeCouponValue($nonGuaranteeCouponValue)
    {
        $this->container['nonGuaranteeCouponValue'] = $nonGuaranteeCouponValue;

        return $this;
    }

    /**
     * Gets paymentActionForm
     *
     * @return string|null
     */
    public function getPaymentActionForm()
    {
        return $this->container['paymentActionForm'];
    }

    /**
     * Sets paymentActionForm
     *
     * @param string|null $paymentActionForm paymentActionForm
     *
     * @return self
     */
    public function setPaymentActionForm($paymentActionForm)
    {
        $this->container['paymentActionForm'] = $paymentActionForm;

        return $this;
    }

    /**
     * Gets pspCustomerInfo
     *
     * @return \request\model\PspCustomerInfo|null
     */
    public function getPspCustomerInfo()
    {
        return $this->container['pspCustomerInfo'];
    }

    /**
     * Sets pspCustomerInfo
     *
     * @param \request\model\PspCustomerInfo|null $pspCustomerInfo pspCustomerInfo
     *
     * @return self
     */
    public function setPspCustomerInfo($pspCustomerInfo)
    {
        $this->container['pspCustomerInfo'] = $pspCustomerInfo;

        return $this;
    }

    /**
     * Gets challengeActionForm
     *
     * @return \request\model\ChallengeActionForm|null
     */
    public function getChallengeActionForm()
    {
        return $this->container['challengeActionForm'];
    }

    /**
     * Sets challengeActionForm
     *
     * @param \request\model\ChallengeActionForm|null $challengeActionForm challengeActionForm
     *
     * @return self
     */
    public function setChallengeActionForm($challengeActionForm)
    {
        $this->container['challengeActionForm'] = $challengeActionForm;

        return $this;
    }

    /**
     * Gets redirectActionForm
     *
     * @return \request\model\RedirectActionForm|null
     */
    public function getRedirectActionForm()
    {
        return $this->container['redirectActionForm'];
    }

    /**
     * Sets redirectActionForm
     *
     * @param \request\model\RedirectActionForm|null $redirectActionForm redirectActionForm
     *
     * @return self
     */
    public function setRedirectActionForm($redirectActionForm)
    {
        $this->container['redirectActionForm'] = $redirectActionForm;

        return $this;
    }

    /**
     * Gets orderCodeForm
     *
     * @return \request\model\OrderCodeForm|null
     */
    public function getOrderCodeForm()
    {
        return $this->container['orderCodeForm'];
    }

    /**
     * Sets orderCodeForm
     *
     * @param \request\model\OrderCodeForm|null $orderCodeForm orderCodeForm
     *
     * @return self
     */
    public function setOrderCodeForm($orderCodeForm)
    {
        $this->container['orderCodeForm'] = $orderCodeForm;

        return $this;
    }

    /**
     * Gets grossSettlementAmount
     *
     * @return \request\model\Amount|null
     */
    public function getGrossSettlementAmount()
    {
        return $this->container['grossSettlementAmount'];
    }

    /**
     * Sets grossSettlementAmount
     *
     * @param \request\model\Amount|null $grossSettlementAmount grossSettlementAmount
     *
     * @return self
     */
    public function setGrossSettlementAmount($grossSettlementAmount)
    {
        $this->container['grossSettlementAmount'] = $grossSettlementAmount;

        return $this;
    }

    /**
     * Gets settlementQuote
     *
     * @return \request\model\Quote|null
     */
    public function getSettlementQuote()
    {
        return $this->container['settlementQuote'];
    }

    /**
     * Sets settlementQuote
     *
     * @param \request\model\Quote|null $settlementQuote settlementQuote
     *
     * @return self
     */
    public function setSettlementQuote($settlementQuote)
    {
        $this->container['settlementQuote'] = $settlementQuote;

        return $this;
    }

    /**
     * Gets extendInfo
     *
     * @return string|null
     */
    public function getExtendInfo()
    {
        return $this->container['extendInfo'];
    }

    /**
     * Sets extendInfo
     *
     * @param string|null $extendInfo extendInfo
     *
     * @return self
     */
    public function setExtendInfo($extendInfo)
    {
        $this->container['extendInfo'] = $extendInfo;

        return $this;
    }

    /**
     * Gets normalUrl
     *
     * @return string|null
     */
    public function getNormalUrl()
    {
        return $this->container['normalUrl'];
    }

    /**
     * Sets normalUrl
     *
     * @param string|null $normalUrl The URL that redirects users to a WAP or WEB page in the default browser or the embedded WebView.  Note: When the value of resultCode is ​PAYMENT_IN_PROCESS​, at least one of schemeUrl, applinkUrl, and normalUrl is to be returned.  More information:  Maximum length: 2048 characters
     *
     * @return self
     */
    public function setNormalUrl($normalUrl)
    {
        $this->container['normalUrl'] = $normalUrl;

        return $this;
    }

    /**
     * Gets schemeUrl
     *
     * @return string|null
     */
    public function getSchemeUrl()
    {
        return $this->container['schemeUrl'];
    }

    /**
     * Sets schemeUrl
     *
     * @param string|null $schemeUrl The URL scheme that redirects users to open an app in an Android or iOS system when the target app is installed.  Note: When the value of resultCode is ​PAYMENT_IN_PROCESS​, at least one of schemeUrl, applinkUrl, and normalUrl is to be returned.  More information:  Maximum length: 2048 characters
     *
     * @return self
     */
    public function setSchemeUrl($schemeUrl)
    {
        $this->container['schemeUrl'] = $schemeUrl;

        return $this;
    }

    /**
     * Gets applinkUrl
     *
     * @return string|null
     */
    public function getApplinkUrl()
    {
        return $this->container['applinkUrl'];
    }

    /**
     * Sets applinkUrl
     *
     * @param string|null $applinkUrl The URL that redirects users to open an app when the target app is installed, or to open a WAP page when the target app is not installed. For Android, the URL is a Native App Link. For iOS, the URL is a Universal Link.  Note: When the value of resultCode is ​PAYMENT_IN_PROCESS​, at least one of schemeUrl, applinkUrl, and normalUrl is to be returned.  More information:  Maximum length: 2048 characters
     *
     * @return self
     */
    public function setApplinkUrl($applinkUrl)
    {
        $this->container['applinkUrl'] = $applinkUrl;

        return $this;
    }

    /**
     * Gets appIdentifier
     *
     * @return string|null
     */
    public function getAppIdentifier()
    {
        return $this->container['appIdentifier'];
    }

    /**
     * Sets appIdentifier
     *
     * @param string|null $appIdentifier Android package name, which is used by Android apps to open a cashier page.  Note: This field is returned when resultCode is ​PAYMENT_IN_PROCESS​ and terminalType is APP or WAP.
     *
     * @return self
     */
    public function setAppIdentifier($appIdentifier)
    {
        $this->container['appIdentifier'] = $appIdentifier;

        return $this;
    }

    /**
     * Gets paymentResultInfo
     *
     * @return \request\model\PaymentResultInfo|null
     */
    public function getPaymentResultInfo()
    {
        return $this->container['paymentResultInfo'];
    }

    /**
     * Sets paymentResultInfo
     *
     * @param \request\model\PaymentResultInfo|null $paymentResultInfo paymentResultInfo
     *
     * @return self
     */
    public function setPaymentResultInfo($paymentResultInfo)
    {
        $this->container['paymentResultInfo'] = $paymentResultInfo;

        return $this;
    }

    /**
     * Gets acquirerInfo
     *
     * @return \request\model\AcquirerInfo|null
     */
    public function getAcquirerInfo()
    {
        return $this->container['acquirerInfo'];
    }

    /**
     * Sets acquirerInfo
     *
     * @param \request\model\AcquirerInfo|null $acquirerInfo acquirerInfo
     *
     * @return self
     */
    public function setAcquirerInfo($acquirerInfo)
    {
        $this->container['acquirerInfo'] = $acquirerInfo;

        return $this;
    }

    /**
     * Gets promotionResult
     *
     * @return \request\model\PromotionResult[]|null
     */
    public function getPromotionResult()
    {
        return $this->container['promotionResult'];
    }

    /**
     * Sets promotionResult
     *
     * @param \request\model\PromotionResult[]|null $promotionResult Promotion result.
     *
     * @return self
     */
    public function setPromotionResult($promotionResult)
    {
        $this->container['promotionResult'] = $promotionResult;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    public function toArray(): array
    {
        $array = [];
        foreach (self::$openAPITypes as $propertyName => $propertyType) {
            $propertyValue = $this[$propertyName];
            if ($propertyValue !== null) {
                // Check if the property value is an object and has a toArray() method
                if (is_object($propertyValue) && method_exists($propertyValue, 'toArray')) {
                    $array[$propertyName] = $propertyValue->toArray();
                // Check if it's type datetime
                } elseif ($propertyValue instanceof \DateTime) {
                    $array[$propertyName] = $propertyValue->format(DATE_ATOM);
                // If it's an array type we should check whether it contains objects and if so call toArray method
                } elseif (is_array($propertyValue)) {
                    $array[$propertyName] = array_map(function ($item) {
                        return $item instanceof ModelInterface ? $item->toArray() : $item;
                    }, $propertyValue);
                } else {
                    // Otherwise, directly assign the property value to the array
                    $array[$propertyName] = $propertyValue;
                }
            }
        }
        return $array;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
