<?php

/**
 * authorizations_applyToken
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Response\auth;

use \ArrayAccess;
use Request\AlipayRequest;
use Model\ModelInterface;
use Model\ObjectSerializer;

/**
 * AlipayAuthApplyTokenResponse Class Doc Comment
 *
 * @category Class
 * @package  request
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AlipayAuthApplyTokenResponse  implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AlipayAuthApplyTokenResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'result' => '\request\model\Result',
        'accessToken' => 'string',
        'accessTokenExpiryTime' => 'string',
        'refreshToken' => 'string',
        'refreshTokenExpiryTime' => 'string',
        'extendInfo' => 'string',
        'userLoginId' => 'string',
        'pspCustomerInfo' => '\request\model\PspCustomerInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'result' => null,
        'accessToken' => null,
        'accessTokenExpiryTime' => null,
        'refreshToken' => null,
        'refreshTokenExpiryTime' => null,
        'extendInfo' => null,
        'userLoginId' => null,
        'pspCustomerInfo' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'result' => false,
        'accessToken' => false,
        'accessTokenExpiryTime' => false,
        'refreshToken' => false,
        'refreshTokenExpiryTime' => false,
        'extendInfo' => false,
        'userLoginId' => false,
        'pspCustomerInfo' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'result' => 'result',
        'accessToken' => 'accessToken',
        'accessTokenExpiryTime' => 'accessTokenExpiryTime',
        'refreshToken' => 'refreshToken',
        'refreshTokenExpiryTime' => 'refreshTokenExpiryTime',
        'extendInfo' => 'extendInfo',
        'userLoginId' => 'userLoginId',
        'pspCustomerInfo' => 'pspCustomerInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'result' => 'setResult',
        'accessToken' => 'setAccessToken',
        'accessTokenExpiryTime' => 'setAccessTokenExpiryTime',
        'refreshToken' => 'setRefreshToken',
        'refreshTokenExpiryTime' => 'setRefreshTokenExpiryTime',
        'extendInfo' => 'setExtendInfo',
        'userLoginId' => 'setUserLoginId',
        'pspCustomerInfo' => 'setPspCustomerInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'result' => 'getResult',
        'accessToken' => 'getAccessToken',
        'accessTokenExpiryTime' => 'getAccessTokenExpiryTime',
        'refreshToken' => 'getRefreshToken',
        'refreshTokenExpiryTime' => 'getRefreshTokenExpiryTime',
        'extendInfo' => 'getExtendInfo',
        'userLoginId' => 'getUserLoginId',
        'pspCustomerInfo' => 'getPspCustomerInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('result', $data ?? [], null);
        $this->setIfExists('accessToken', $data ?? [], null);
        $this->setIfExists('accessTokenExpiryTime', $data ?? [], null);
        $this->setIfExists('refreshToken', $data ?? [], null);
        $this->setIfExists('refreshTokenExpiryTime', $data ?? [], null);
        $this->setIfExists('extendInfo', $data ?? [], null);
        $this->setIfExists('userLoginId', $data ?? [], null);
        $this->setIfExists('pspCustomerInfo', $data ?? [], null);

            }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['result'] === null) {
            $invalidProperties[] = "'result' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets result
     *
     * @return \request\model\Result
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param \request\model\Result $result result
     *
     * @return self
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets accessToken
     *
     * @return string|null
     */
    public function getAccessToken()
    {
        return $this->container['accessToken'];
    }

    /**
     * Sets accessToken
     *
     * @param string|null $accessToken The access token that is used to access the corresponding scope of the user resource.   Note: This field is returned when the API is called successfully.  More information:  Maximum length: 128 characters
     *
     * @return self
     */
    public function setAccessToken($accessToken)
    {
        $this->container['accessToken'] = $accessToken;

        return $this;
    }

    /**
     * Gets accessTokenExpiryTime
     *
     * @return string|null
     */
    public function getAccessTokenExpiryTime()
    {
        return $this->container['accessTokenExpiryTime'];
    }

    /**
     * Sets accessTokenExpiryTime
     *
     * @param string|null $accessTokenExpiryTime The time after which the access token expires. After the access token expires, the access token cannot be used to deduct money from the user's account.   Note: This field is returned when accessToken is returned.  More information:  The value follows the ISO 8601 standard format. For example, \"2019-11-27T12:01:01+08:00\".
     *
     * @return self
     */
    public function setAccessTokenExpiryTime($accessTokenExpiryTime)
    {
        $this->container['accessTokenExpiryTime'] = $accessTokenExpiryTime;

        return $this;
    }

    /**
     * Gets refreshToken
     *
     * @return string|null
     */
    public function getRefreshToken()
    {
        return $this->container['refreshToken'];
    }

    /**
     * Sets refreshToken
     *
     * @param string|null $refreshToken The refresh token that is used to exchange for a new access token when the access token is about to expire.   Note: This field is returned when the wallet supports refreshing the token. If this field is not returned, it indicates that the access token has a quite long valid period.  More information:  Maximum length: 128 characters
     *
     * @return self
     */
    public function setRefreshToken($refreshToken)
    {
        $this->container['refreshToken'] = $refreshToken;

        return $this;
    }

    /**
     * Gets refreshTokenExpiryTime
     *
     * @return string|null
     */
    public function getRefreshTokenExpiryTime()
    {
        return $this->container['refreshTokenExpiryTime'];
    }

    /**
     * Sets refreshTokenExpiryTime
     *
     * @param string|null $refreshTokenExpiryTime The time after which the refresh token expires. After the refresh token expires, the refresh token cannot be used to retrieve a new access token.   Note: This field is returned when refreshToken is returned.  More information:  The value follows the ISO 8601 standard format. For example, \"2019-11-27T12:01:01+08:00\".
     *
     * @return self
     */
    public function setRefreshTokenExpiryTime($refreshTokenExpiryTime)
    {
        $this->container['refreshTokenExpiryTime'] = $refreshTokenExpiryTime;

        return $this;
    }

    /**
     * Gets extendInfo
     *
     * @return string|null
     */
    public function getExtendInfo()
    {
        return $this->container['extendInfo'];
    }

    /**
     * Sets extendInfo
     *
     * @param string|null $extendInfo Extended information.  Note: This field is returned when extended information exists.  More information:  Maximum length: 2048 characters
     *
     * @return self
     */
    public function setExtendInfo($extendInfo)
    {
        $this->container['extendInfo'] = $extendInfo;

        return $this;
    }

    /**
     * Gets userLoginId
     *
     * @return string|null
     */
    public function getUserLoginId()
    {
        return $this->container['userLoginId'];
    }

    /**
     * Sets userLoginId
     *
     * @param string|null $userLoginId The login ID that the user used to register in the wallet. The login ID can be the user's email address or phone number, which is masked when returned to Alipay+ payment methods . This field can inform the merchant of the users who are registered.  Note: This field is returned when result.resultCode is SUCCESS and the value of the scopes field in the consult API is AGREEMENT_PAY.  More information:  Maximum length: 64 characters
     *
     * @return self
     */
    public function setUserLoginId($userLoginId)
    {
        $this->container['userLoginId'] = $userLoginId;

        return $this;
    }

    /**
     * Gets pspCustomerInfo
     *
     * @return \request\model\PspCustomerInfo|null
     */
    public function getPspCustomerInfo()
    {
        return $this->container['pspCustomerInfo'];
    }

    /**
     * Sets pspCustomerInfo
     *
     * @param \request\model\PspCustomerInfo|null $pspCustomerInfo pspCustomerInfo
     *
     * @return self
     */
    public function setPspCustomerInfo($pspCustomerInfo)
    {
        $this->container['pspCustomerInfo'] = $pspCustomerInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    public function toArray(): array
    {
        $array = [];
        foreach (self::$openAPITypes as $propertyName => $propertyType) {
            $propertyValue = $this[$propertyName];
            if ($propertyValue !== null) {
                // Check if the property value is an object and has a toArray() method
                if (is_object($propertyValue) && method_exists($propertyValue, 'toArray')) {
                    $array[$propertyName] = $propertyValue->toArray();
                // Check if it's type datetime
                } elseif ($propertyValue instanceof \DateTime) {
                    $array[$propertyName] = $propertyValue->format(DATE_ATOM);
                // If it's an array type we should check whether it contains objects and if so call toArray method
                } elseif (is_array($propertyValue)) {
                    $array[$propertyName] = array_map(function ($item) {
                        return $item instanceof ModelInterface ? $item->toArray() : $item;
                    }, $propertyValue);
                } else {
                    // Otherwise, directly assign the property value to the array
                    $array[$propertyName] = $propertyValue;
                }
            }
        }
        return $array;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
